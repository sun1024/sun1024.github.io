<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>b1ng0&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://b1ng0.top/"/>
  <updated>2020-06-28T10:43:18.264Z</updated>
  <id>http://b1ng0.top/</id>
  
  <author>
    <name>b1ng0</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vivo提前批安全岗记录</title>
    <link href="http://b1ng0.top/2020/06/20/vivo%E6%8F%90%E5%89%8D%E6%89%B9%E5%AE%89%E5%85%A8%E5%B2%97%E8%AE%B0%E5%BD%95/"/>
    <id>http://b1ng0.top/2020/06/20/vivo提前批安全岗记录/</id>
    <published>2020-06-19T16:00:00.000Z</published>
    <updated>2020-06-28T10:43:18.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>虽然拒了，但总归还是要记一下的。</p><h2 id="0x02-笔试"><a href="#0x02-笔试" class="headerlink" title="0x02 笔试"></a>0x02 笔试</h2><p>6.07，三道编程题，都是些高频题，AC了1.9道，第三道处理输入输出半天没弄好ORZ</p><p>第一题–<a href="https://leetcode-cn.com/problems/can-place-flowers/" target="_blank" rel="noopener">种花问题</a></p><p>第二题–<a href="https://leetcode-cn.com/problems/super-egg-drop/" target="_blank" rel="noopener">扔鸡蛋</a></p><p>第二题–<a href="https://leetcode-cn.com/problems/merge-k-sorted-lists/" target="_blank" rel="noopener">合并K个排序链表</a></p><h2 id="0x03-一面"><a href="#0x03-一面" class="headerlink" title="0x03 一面"></a>0x03 一面</h2><p>6.09，总共聊了28min，感觉是个Leader在面，但是自我介绍之后就像HR一样聊人生了，主动往技术细节上引都不接茬，差点以为凉了。</p><p>主要问题：</p><p>自我介绍<br>授权测试项目的内容<br>是否做过黑产、灰产<br>最有成就感的事<br>学习安全的过程<br>对安全的认知<br>大学到研究生都是通信，师兄师姐有没有做安全的<br>缺点和优点<br>将来的打算<br>怎么量化你的目标<br>觉得vivo的安全要做些什么<br>有没有想去的公司<br>为什么觉得甲方安全比乙方好</p><p>反问：</p><p>给我一点建议<br>vivo的安全具体是做那些内容<br>什么时候出结果</p><h2 id="0x04-二面"><a href="#0x04-二面" class="headerlink" title="0x04 二面"></a>0x04 二面</h2><p>6.10，7min速战速决，也没给反问时间，面完更疑惑了。</p><p>主要问题：</p><p>自我介绍<br>是否保研<br>六级过没<br>成绩是否是写的50%<br>两个项目哪个是自己主导的<br>意向城市<br>未来三到五年规划</p><p>最后来了句你技术面评价比较高（？？？<br>等通知，然后直接拜拜没有反问</p><h2 id="0x05-结果"><a href="#0x05-结果" class="headerlink" title="0x05 结果"></a>0x05 结果</h2><p>6.17：收到录用通知</p><p>没有太过纠结，基于一些原因觉得不太合适就直接拒了，虽然我后面可能不一定能拿到这样的价了，但是就像太祖说过的：风物长宜放眼量。</p><p>————– update————– </p><p>刚拒完vivo，就发现自己被头条拒了，简历筛选都没过，上帝欲使人疯狂，必先使其膨胀（笑哭。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h2&gt;&lt;p&gt;虽然拒了，但总归还是要记一下的。&lt;/p&gt;
&lt;h2 id=&quot;0x02-笔试&quot;&gt;&lt;a href=&quot;#0x
      
    
    </summary>
    
    
      <category term="秋招" scheme="http://b1ng0.top/tags/%E7%A7%8B%E6%8B%9B/"/>
    
  </entry>
  
  <entry>
    <title>vps搭建CobaltStrike</title>
    <link href="http://b1ng0.top/2020/05/25/vps%E6%90%AD%E5%BB%BACobaltStrike/"/>
    <id>http://b1ng0.top/2020/05/25/vps搭建CobaltStrike/</id>
    <published>2020-05-25T10:09:00.000Z</published>
    <updated>2020-05-25T07:42:18.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h2><p>手贱重装了下服务器，各种线上环境都没了，在这里记录一下cs的搭建，免得每次都像个憨憨到处找。。。</p><h2 id="0x02-服务端搭建"><a href="#0x02-服务端搭建" class="headerlink" title="0x02 服务端搭建"></a>0x02 服务端搭建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 1. CobaltStrike破解版下载</span><br><span class="line">// 来自ssooking师傅的破解：https://www.cnblogs.com/ssooking/p/12535998.html</span><br><span class="line">$ git <span class="built_in">clone</span> https://gitee.com/ssooking/cobaltstrike-cracked.git</span><br><span class="line"></span><br><span class="line">// 2. vps上安装java环境 ubuntu环境</span><br><span class="line">// JDK官网下载还要注册 亲测使用openJDK也完全可以</span><br><span class="line">$ apt install openjdk-8-jre-headless</span><br><span class="line">// 测试</span><br><span class="line">$ java -version</span><br><span class="line">openjdk version <span class="string">"1.8.0_252"</span></span><br><span class="line">OpenJDK Runtime Environment (build 1.8.0_252-8u252-b09-1~18.04-b09)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 25.252-b09, mixed mode)</span><br><span class="line"></span><br><span class="line">// 3. 解压cobaltstrike4.0-cracked 运行teamserver即可</span><br><span class="line">$ ./teamserver 公网ip password</span><br><span class="line">[*] Will use existing X509 certificate and keystore (<span class="keyword">for</span> SSL)</span><br><span class="line">[+] Team server is up on *****</span><br><span class="line">[*] SHA256 <span class="built_in">hash</span> of SSL cert is: ************************************************</span><br><span class="line"></span><br><span class="line">// 个人习惯nohup长期运行</span><br><span class="line">$ nohup ./teamserver 公网ip password &amp;</span><br></pre></td></tr></table></figure><h2 id="0x03-客户端连接"><a href="#0x03-客户端连接" class="headerlink" title="0x03 客户端连接"></a>0x03 客户端连接</h2><p>客户端也是用上面的cobaltstrike4.0-cracked文件夹，安装好java环境后双击start.bat即可：</p><p><img src="/images/image-20200525112443061.png" alt></p><p>按服务端配置填写connect:</p><p><img src="/images/image-20200525112950735.png" alt></p><h2 id="0x04-CS简单加固"><a href="#0x04-CS简单加固" class="headerlink" title="0x04 CS简单加固"></a>0x04 CS简单加固</h2><ul><li><p>修改默认端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 默认端口50050 在teamserver中改掉即可</span><br><span class="line">$ vim teamserver</span><br><span class="line">// 最后一行 50050 改成放行的端口</span><br><span class="line"># start the team server.</span><br><span class="line">java -XX:ParallelGCThreads=4 -Dcobaltstrike.server_port=50050 -Djavax.net.ssl.keyStore=./cobaltstrike.store -Djavax.net.ssl.keyStorePassword=123456 -server -XX:+AggressiveHeap -XX:+UseParallelGC -classpath ./cobaltstrike.jar server.TeamServer $*</span><br></pre></td></tr></table></figure></li><li><p>修改证书信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 可以重新生成一次 但是太麻烦 不如直接改掉CobaltStrike特征 又不是拿来干坏事(笑</span><br><span class="line">$ vim teamserver</span><br><span class="line">// keytool部分 在改端口的前两行</span><br><span class="line">keytool -keystore ./cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias cobaltstrike -dname &quot;CN=Major Cobalt Strike, OU=AdvancedPenTesting, O=cobaltstrike, L=Somewhere, S=Cyberspace, C=Earth&quot;</span><br><span class="line">//瞎改下</span><br><span class="line">keytool -keystore ./cobaltstrike.store -storepass 123456 -keypass 123456 -genkey -keyalg RSA -alias cobaltstrike -dname &quot;CN=abc, OU=abc, O=abc, L=abc, S=abc, C=abc&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.cnblogs.com/ssooking/p/12535998.html" target="_blank" rel="noopener">https://www.cnblogs.com/ssooking/p/12535998.html</a></p><p><a href="https://www.3hack.com/note/96.html" target="_blank" rel="noopener">https://www.3hack.com/note/96.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h2&gt;&lt;p&gt;手贱重装了下服务器，各种线上环境都没了，在这里记录一下cs的搭建，免得每次都像个憨憨到处找。。。&lt;/
      
    
    </summary>
    
    
      <category term="CobaltStrike" scheme="http://b1ng0.top/tags/CobaltStrike/"/>
    
  </entry>
  
  <entry>
    <title>gitignore不忽略指定文件</title>
    <link href="http://b1ng0.top/2020/05/07/gitignore%E4%B8%8D%E5%BF%BD%E7%95%A5%E6%8C%87%E5%AE%9A%E6%96%87%E4%BB%B6/"/>
    <id>http://b1ng0.top/2020/05/07/gitignore不忽略指定文件/</id>
    <published>2020-05-07T10:09:00.000Z</published>
    <updated>2020-05-19T13:41:52.113Z</updated>
    
    <content type="html"><![CDATA[<p>突然产生这么个需求，尝试直接用<em>！</em>取反，结果并行不通.</p><p>整体上需要先忽略父级目录下所有东西，再保留指定文件(当然文件在根目录的话，不写进来不就是保留了嘛。。。)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保留dir1下的test.txt</span></span><br><span class="line">dir1/*</span><br><span class="line">!dir1/test.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;突然产生这么个需求，尝试直接用&lt;em&gt;！&lt;/em&gt;取反，结果并行不通.&lt;/p&gt;
&lt;p&gt;整体上需要先忽略父级目录下所有东西，再保留指定文件(当然文件在根目录的话，不写进来不就是保留了嘛。。。)：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
      <category term="git" scheme="http://b1ng0.top/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>EXata中的卫星仿真</title>
    <link href="http://b1ng0.top/2020/04/14/exata%E4%B8%AD%E7%9A%84%E5%8D%AB%E6%98%9F%E4%BB%BF%E7%9C%9F/"/>
    <id>http://b1ng0.top/2020/04/14/exata中的卫星仿真/</id>
    <published>2020-04-14T10:09:00.000Z</published>
    <updated>2020-05-19T12:00:32.543Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这破项目，什么时候是个头。。。</p><p>我的burp有一个月没打开过了，好想挖洞鸭！！！</p></blockquote><h2 id="抽象卫星模型："><a href="#抽象卫星模型：" class="headerlink" title="抽象卫星模型："></a>抽象卫星模型：</h2><p><a href="http://exata.b1ng0.top/wwhelp/wwhimpl/js/html/wwhelp.htm#href=Developer/Abstract%20Satellite.html" target="_blank" rel="noopener">http://exata.b1ng0.top/wwhelp/wwhimpl/js/html/wwhelp.htm#href=Developer/Abstract%20Satellite.html</a></p><p>这是卫星网络的抽象模型。 每个卫星网络都分组为子网。 每个卫星子网都只有一个卫星节点和许多地面节点。 与子网关联的地面节点始终会传输到指定的子网卫星节点。 因此，<strong>不涉及切换</strong>。 而且，卫星节点是弯管卫星（仅中继数据）。 卫星节点从地面节点接收数据时，会将数据广播到子网中的所有其他地面节点，但不广播到发起数据的地面节点。 最后，卫星节点一定不能生成任何数据包。 因此，卫星节点无法运行应用程序或路由协议。</p><p>考虑到无损线性延迟过程，该模型代表了卫星模型的最高抽象水平。 需要对卫星系统进行更详细模拟的开发人员应考虑使用“卫星模型库”中介绍的高级卫星附加模块。</p><h2 id="支持RSV的Aloha卫星模型（Satellite-RSV）"><a href="#支持RSV的Aloha卫星模型（Satellite-RSV）" class="headerlink" title="支持RSV的Aloha卫星模型（Satellite-RSV）"></a>支持RSV的Aloha卫星模型（Satellite-RSV）</h2><p><a href="http://exata.b1ng0.top/wwhelp/wwhimpl/js/html/wwhelp.htm#href=Wireless/Satellite-RSV.html" target="_blank" rel="noopener">http://exata.b1ng0.top/wwhelp/wwhimpl/js/html/wwhelp.htm#href=Wireless/Satellite-RSV.html</a></p><p>支持Reed-Solomon / Viterbi（RSV）的Aloha卫星模型是基于Aloha协议的需求分配多路访问（DAMA）方案。 该模型<strong>既可以用作弯管卫星，也可以用作带有机载有效载荷的卫星</strong>。<br>该系统的基本模型是利用外部Reed-Solomon（RS）和级联的Viterbi内部卷积码（RSV）的双向突发传输。 这包括考虑编码和调制开销，增加斜坡上升/下降保护时间以及插入前导码。<br>此外，该模型还允许用户指定来自相邻频道和相邻卫星的干扰电平以及交叉极化能量泄漏。<br>Aloha卫星模型由Satellite-RSV PHY和MAC模型组成。 卫星的信道仿真使用标准的EXata传播建模，因此可以配置为使用EXata移动文件选项对卫星运动进行建模。</p><h2 id="抽象网络方程–卫星（ANESAT）模型"><a href="#抽象网络方程–卫星（ANESAT）模型" class="headerlink" title="抽象网络方程–卫星（ANESAT）模型"></a>抽象网络方程–卫星（ANESAT）模型</h2><p><a href="http://exata.b1ng0.top/wwhelp/wwhimpl/js/html/wwhelp.htm#href=Wireless/ANESAT.html" target="_blank" rel="noopener">http://exata.b1ng0.top/wwhelp/wwhimpl/js/html/wwhelp.htm#href=Wireless/ANESAT.html</a></p><p>一个系统由一个或多个跨一组双向通道运行的子网组成。 每个子网具有单个下游（或前向）链路和多个关联的上游链路。 每个下行链路（如果基于从网络层出队的优先级以TDMA方式操作）。 每个子网都有一个前端（可以是卫星或前端地面站）以及零个或多个客户端。 上游和下游通道的使用完全受前端过程的控制。 每个上游都包含一组共享的数据，以允许将其作为一个组进行调度。 当头端的两个或多个子网想要共享一组通用的上游通道时，通常会发生这种情况。 每个发射机（即连接到卫星信道的节点/接口对）可以可选地用入口流量调节器实例化。 该业务量调节器限制了从终端发送的业务量，而不管该终端可用的可用串行化速率如何。 所有终端，包括前端，都在网络层处理数据包。 因此，可以在客户端模型上强加其他排队规则。 这些规则包括严格的优先级排队和加权公平排队。</p><h2 id="STK和Exata联合仿真"><a href="#STK和Exata联合仿真" class="headerlink" title="STK和Exata联合仿真"></a>STK和Exata联合仿真</h2><p><a href="http://exata.b1ng0.top/wwhelp/wwhimpl/js/html/wwhelp.htm#href=Developer/STK_Connect.html" target="_blank" rel="noopener">http://exata.b1ng0.top/wwhelp/wwhimpl/js/html/wwhelp.htm#href=Developer/STK_Connect.html</a></p><p>STK接口提供了一种将EXata与STK进行连接的方法。 它允许EXata仿真使用STK的无线传播模块和天线模型进行信号传播。 另外，它允许STK提供节点位置更新，从而控制移动性。</p><p><img src="/images/2020.4.14.1.png" alt="image-20200412170810333"></p><p>主要功能：</p><ul><li>与STK进行通信；</li><li>使用STK的无线传播模块进行信号传播，代替EXata的传播模块；</li><li>使用STK的天线模型进行天线相关的计算；</li><li>允许STK控制节点移动性。</li></ul><p><img src="/images/2020.4.14.2.png" alt="image-20200427102642893"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这破项目，什么时候是个头。。。&lt;/p&gt;
&lt;p&gt;我的burp有一个月没打开过了，好想挖洞鸭！！！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;抽象卫星模型：&quot;&gt;&lt;a href=&quot;#抽象卫星模型：&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="卫星网络 EXata" scheme="http://b1ng0.top/tags/%E5%8D%AB%E6%98%9F%E7%BD%91%E7%BB%9C-EXata/"/>
    
  </entry>
  
  <entry>
    <title>星地5G融合初探</title>
    <link href="http://b1ng0.top/2020/03/29/%E6%98%9F%E5%9C%B05G%E8%9E%8D%E5%90%88%E5%88%9D%E6%8E%A2/"/>
    <id>http://b1ng0.top/2020/03/29/星地5G融合初探/</id>
    <published>2020-03-29T10:09:00.000Z</published>
    <updated>2020-05-19T12:00:32.557Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>迫于论文开题方向，最近主要在看3gpp、ITU等标准化组织关于星地融合（卫星和5g融合）的相关研究，跟进SaT5G（Satellite and Terrestrial Network for 5G）项目的研究进展。下面是基于标准文档和相关解读整理的卫星5g融合和5g回传的现状。</p></blockquote><h2 id="3GPP与卫星相关的研究"><a href="#3GPP与卫星相关的研究" class="headerlink" title="3GPP与卫星相关的研究"></a>3GPP与卫星相关的研究</h2><p>目前找到的与卫星相关的标准文档主要有以下几篇：</p><ul><li>3GPP TS 22.261 on satellite access</li><li>3GPP TR 22.822 “Study on using Satellite Access in 5G” </li><li>3GPP TR 38.811 “Study on NR to support non-terrestrial networks” </li><li>3GPP TR 23.737 “Study on architecture aspects for using satellite access in 5G; (Release 16)” </li><li>3GPP TR 38.821 “Study on solutions for NR to support non-terrestrial networks (NTN) (Release 16)”</li></ul><p>3GPP从R14开始着手开展星地融合的研究工作。在TS22.261中，对卫星在5G系统中的角色和优势进行了探讨，作为5G多种接入技术之一，卫星在一些要求广域覆盖的工业应用场景中具有显著优势。卫星网络可以在地面5G覆盖的薄弱地区提供低成本的覆盖方案，对于5G网络中的M2M/IoT，以及为高速移动载体上的乘客提供无所不及的网络服务，借助卫星优越的广播/多播能力，可以为网络边缘网元及用户终端提供广播/多播信息服务。</p><p>在2017年底发布的技术报告22.822中，3GPP工作组SA1对与卫星相关的接入网协议及架构进行了评估，并计划进一步开展基于5G的接入研究。在这份报告中，定义了在5G中使用卫星接入的三大类用例，分别是连续服务、泛在服务和扩展服务。并讨论了新的及现有服务的需求，卫星终端特性的建立、配置与维护，以及在卫星网络与地面网络间的切换问题。</p><p>在3GPP名为“面向‘非地面网络’中的5G新空口”研究项目中，定义了包括卫星网络在内的非地面网络（NTN:Non-terrestrial networks）的部署场景。按照3GPP的定义，5G网络中的NTN应用场景包括8个增强型移动宽带（eMBB）场景和2个大规模机器类通信（mMTC）场景。借助卫星的广域覆盖能力，可以使运营商在地面网络基础设施不发达地区提供5G商用服务，实现5G业务连续性，尤其是在应急通信、海事通信、航空通信及铁路沿线通信等场景中发挥作用。</p><p>38.811规定的卫星网络架构可能包含的系统组成包括：</p><ul><li>NTN终端：3GPP 用户终端（UE）和非3GPP UE （卫星终端）</li><li>用户链路(Service Link)：UE和卫星之间的链路</li><li>空间平台(Space Platform)：搭载弯管或者具备星上处理能力的卫星</li><li>星间链路(ISL: Inter-Satellite Links)：对于具备星上处理能力卫星间的链路</li><li>信关站(Gateway)：连接卫星和地面核心网的网元</li><li>馈电链路：卫星与地面关口站之间的链路</li></ul><p><img src="/images/2020.3.29.1.png" alt="img"></p><p>在非地面网络与地面5G融合的网络架构上，3GPP提出了星地融合的4种网络架构初步模型。38.811还对卫星5G场景中的传输延时、多普勒频移进行了估计，并对在非地面网络中部署5G新空口需要做的适应性修改进行了讨论，包括由于卫星等空间飞行器的移动性带来的切换和寻呼问题、定时提前的调整、下行链路同步等问题，星地链路长延时对HARQ、MAC/RLC过程、物理层ACM及功率控制等过程的影响，卫星小区尺寸过大给PRACH和随机过程带来的影响以及对随机接入响应消息中定时提前的影响，多径时延扩展带来的问题，双工模式问题，对CP-OFDM技术在卫星上的适用性也进行了分析。</p><p><img src="/images/2020.3.29.2.png" alt="img"></p><h2 id="ITU的星地5G融合"><a href="#ITU的星地5G融合" class="headerlink" title="ITU的星地5G融合"></a>ITU的星地5G融合</h2><p>针对卫星与地面5G融合的问题，国际电信联盟（ITU，International Telecommunication Union）提出了星地5G融合的4种应用场景，包括中继到站、小区回传、动中通及混合多播场景，并提出支持这些场景必须考虑的关键因素，包括多播支持、智能路由支持、动态缓存管理及自适应流支持、延时、一致的服务质量、NFV（Network Function Virtualization，网络功能虚拟化）/SDN（Software Defined Network，软件定义网络）兼容、商业模式的灵活性等。</p><p><img src="/images/2020.3.29.3.png" alt="img"></p><p>(a)中继到站场景</p><p><img src="/images/2020.3.29.4.png" alt="img"></p><p>(b)小区回传场景</p><p><img src="/images/2020.3.29.5.png" alt="img"></p><p>(c)动中通场景</p><p><img src="/images/2020.3.29.6.png" alt="img"></p><p>(d)混合多播场景</p><h2 id="5g回传"><a href="#5g回传" class="headerlink" title="5g回传"></a>5g回传</h2><p>5g整体可以划分为接入网、承载网、核心网，承载网就是专门负责承载数据传输的网络。整个通信网络的数据传输，都是由承载网负责的，不仅连接接入网和核心网，它也存在于接入网网元之间，以及核心网网元之间。</p><p><img src="/images/2020.3.29.7.png" alt="img"></p><p>5g基站与核心网之间的数据传输属于承载网络的范畴，而在5G网络中，接入网不再是由BBU、RRU、天线这些东西组成，而是被重构为CU（Centralized unit，集中单元）、DU（Distribute Unit，分布单元）和AAU（Active Antenna Unit，有源天线单元）这3个功能实体，依据3gpp标准，CU、DU、AAU可以采取分离或合设的方式，会出现多种网络部署形态：</p><p><img src="/images/2020.3.29.8.png" alt="img"></p><p>承载网随着RAN架构的重构，划分为前传网络、中传网络和回传网络三部分。前传、中传、回传是不同实体之间的连接：AAU和DU之间是前传网络、DU和CU之间是中传网络、CU以上是回传网络。</p><p>传统的回传技术有两种:无线回传，光纤回传。这两种技术都广泛应用于当前的LTE网络中。两种回传方式每个运营商各有偏好，从全球统计数据来看，绝大部分网络都是选用无线回传，但在中国刚好相反，仅在少数应急场景才动用无线回传。</p><p>但在5G时代，高密集组网的需求下，全光纤组网的成本让运营商难以承担。前段时间任正非就提出了5G和微波技术结合的方向，微波回传与光纤回传混合使用这也将是未来5G回传的主流趋势。</p><p>传统的微波回传应用的是6-42GHz频段，平均容量在50Mbps至500Mbps之间，而对于5G时代，这一需求可高达10-20G，所以，传统微波回传是无法满足5G时代的基站回传容量需求的。于是业界将眼光投向了能提供超大带宽的E-Band微波。E频段指频率在80GHz附近的微波频段，实际分配频段为71-76GHz和81-86GHz的对称两段，可用总频宽达10GHz。较传统的3.5-112M信道带宽，E频段可以使用惊人的1000MHz至2000MHz带宽，再采用高阶调制方式、多频段聚合和MIMO等技术后，回传容量可高达20Gbps以上。面向未来，微波通信技术还将从E波段向W波段（92-115GHz）和D波段（130-175GHz）扩展，可实现100Gbps的高需求。</p><p>关于无线回传，另一种方案是把无线接入网和回传集成，这也是3GPP R16的工作项目。利用Massive MIMO多波束的特性，将无线接入和回传集成，让每个微站通过无线“自回传”实现更加灵活、简单、低成本的基站部署。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;迫于论文开题方向，最近主要在看3gpp、ITU等标准化组织关于星地融合（卫星和5g融合）的相关研究，跟进SaT5G（Satellite and Terrestrial Network for 5G）项目的研究进展。下面是基于标准文档和相关解读整理的
      
    
    </summary>
    
    
      <category term="卫星网络 5G" scheme="http://b1ng0.top/tags/%E5%8D%AB%E6%98%9F%E7%BD%91%E7%BB%9C-5G/"/>
    
  </entry>
  
  <entry>
    <title>bash tricks</title>
    <link href="http://b1ng0.top/2020/03/13/bash%20tricks/"/>
    <id>http://b1ng0.top/2020/03/13/bash tricks/</id>
    <published>2020-03-13T10:09:00.000Z</published>
    <updated>2020-05-19T12:00:32.542Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在推上看到了一些新姿势，结合以前的重新总结一下linux下执行命令的技巧。</p></blockquote><p>cat&lt;1.txt</p><p><img src="/images/2020.2.30.1.png" alt="img"></p><p>cat$IFS$91.txt</p><p><img src="/images/2020.2.30.2.png" alt="img"></p><p>cat${IFS}1.txt</p><p><img src="/images/2020.2.30.3.png" alt="img"></p><p>cat&lt;&gt;1.txt</p><p><img src="/images/2020.2.30.4.png" alt="img"></p><p>{cat,1.txt}  </p><p>// 带参数的情况：{ls,-las,/var}</p><p><img src="/images/2020.2.30.5.png" alt="img"></p><p>CMD=$’\x201.txt’&amp;&amp;cat$CMD</p><p><img src="/images/2020.2.30.6.png" alt="img"></p><p>CMD=$’\x0a1.txt’&amp;&amp;cat$CMD</p><p><img src="/images/2020.2.30.7.png" alt="img"></p><p>CMD=$’\x091.txt’&amp;&amp;cat$CMD</p><p><img src="/images/2020.2.30.8.png" alt="img"></p><p>IFS=,;`cat&lt;&lt;&lt;cat,1.txt`</p><p><img src="/images/2020.2.30.12.png" alt="image-20200427094309711"></p><p>X=$’cat\x20/etc/passwd’&amp;&amp;$X ubuntu下没有测试成功</p><p>!! 执行上一条命令 ！+ 数字 执行历史命令</p><p><img src="/images/2020.2.30.9.png" alt="img"></p><p>绕过其他字符( . / ; ` ‘ &gt; 等)的姿势:</p><p>1.从环境变量(env)中提取：</p><p><img src="/images/2020.2.30.10.png" alt="img"></p><ol start="2"><li>base64+管道符执行：</li></ol><p><img src="/images/2020.2.30.11.png" alt="img"></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://twitter.com/konsolitus/status/1241610891235225601" target="_blank" rel="noopener">https://twitter.com/konsolitus/status/1241610891235225601</a></p><p><a href="https://b1ng0.top/2018/11/15/Blank Bypass/">https://b1ng0.top/2018/11/15/Blank%20Bypass/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在推上看到了一些新姿势，结合以前的重新总结一下linux下执行命令的技巧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;cat&amp;lt;1.txt&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/2020.2.30.1.png&quot; alt=&quot;img&quot;&gt;
      
    
    </summary>
    
    
      <category term="bash" scheme="http://b1ng0.top/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>一些算法题套路</title>
    <link href="http://b1ng0.top/2020/03/01/%E4%B8%80%E4%BA%9B%E7%AE%97%E6%B3%95%E9%A2%98%E5%A5%97%E8%B7%AF/"/>
    <id>http://b1ng0.top/2020/03/01/一些算法题套路/</id>
    <published>2020-02-29T16:00:00.000Z</published>
    <updated>2020-05-19T12:00:32.551Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近刷leetcode上瘾，准备刷完一个tag就总结一下基本的写法，长期更新。。。</p></blockquote><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前提是数组有序 O(logn)</span></span><br><span class="line"><span class="comment">// 例子:在数组中查找一个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binary_search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>; <span class="comment">//防止溢出</span></span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target) &#123; </span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target) &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">//没找到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快慢指针：主要对于链表操作，判断是否有环、寻找链表中点，思路比较简单，就不写代码了。</span></span><br><span class="line"><span class="comment">// 左右指针：需要数组有序，从两边到中间，O(n)</span></span><br><span class="line"><span class="comment">// 例子: 反转数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[left];</span><br><span class="line">        nums[left] = nums[right];</span><br><span class="line">        nums[right] = temp;</span><br><span class="line">        left++; right--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>## 滑动窗口</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双指针的高阶用法，将嵌套的循环问题，转换为单循环问题，降低时间复杂度。</span></span><br><span class="line"><span class="comment">// 解决各种子串(子数组)问题.</span></span><br><span class="line"><span class="comment">// 核心思想是将满足要求的子串作为窗口在整个数组间移动，一次循环得到结果，O(n)</span></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近刷leetcode上瘾，准备刷完一个tag就总结一下基本的写法，长期更新。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;二分查找&quot;&gt;&lt;a href=&quot;#二分查找&quot; class=&quot;headerlink&quot; title=&quot;二分查找&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="algorithm" scheme="http://b1ng0.top/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>低轨卫星星座系统调研</title>
    <link href="http://b1ng0.top/2020/02/29/%E4%BD%8E%E8%BD%A8%E5%8D%AB%E6%98%9F%E6%98%9F%E5%BA%A7%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%A0%94/"/>
    <id>http://b1ng0.top/2020/02/29/低轨卫星星座系统调研/</id>
    <published>2020-02-29T10:09:00.000Z</published>
    <updated>2020-05-19T12:00:32.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="低轨卫星星座系统调研"><a href="#低轨卫星星座系统调研" class="headerlink" title="低轨卫星星座系统调研"></a>低轨卫星星座系统调研</h1><h2 id="低轨卫星系统概况"><a href="#低轨卫星系统概况" class="headerlink" title="低轨卫星系统概况"></a>低轨卫星系统概况</h2><table><thead><tr><th></th><th><strong>铱星</strong></th><th><strong>波音</strong></th><th><strong>LeoSat</strong></th><th><strong>OneWeb</strong></th><th><strong>星链</strong></th><th><strong>三星</strong></th><th><strong>O3b</strong></th><th><strong>TeleSat</strong>  <strong>LEO</strong></th></tr></thead><tbody><tr><td><strong>星数（颗）</strong></td><td>66+9备份</td><td>2956</td><td>78-108</td><td>720</td><td>4425+备份</td><td>4600</td><td>27</td><td>117+</td></tr><tr><td><strong>星重（kg）</strong></td><td>860</td><td>不详</td><td>1250</td><td>150</td><td>不详</td><td>不详</td><td>700</td><td>不详</td></tr><tr><td><strong>推出时间</strong></td><td>2009</td><td>2016</td><td>2015</td><td>2015</td><td>2015</td><td>2015</td><td>2008</td><td>2016</td></tr><tr><td><strong>业务启动时间</strong></td><td>2018</td><td>批准后6年</td><td>2022</td><td>2019</td><td>2024</td><td>2028</td><td>2014</td><td>2021</td></tr><tr><td><strong>轨道高度（km）</strong></td><td>780</td><td>1200</td><td>1400</td><td>1200</td><td>1110-1325</td><td>1500</td><td>8000</td><td>1000-1248</td></tr><tr><td><strong>带宽</strong></td><td>1.4Mbit/s</td><td>宽带</td><td>高通量</td><td>共10Tbit/s  单星10Gbit/s</td><td>宽带</td><td>每月200Gb总流量</td><td>电信港用户1Gbit/s</td><td>光纤等级</td></tr><tr><td><strong>频段</strong></td><td>L/Ka</td><td>V</td><td>Ka</td><td>Ka</td><td>Ku/Ka</td><td>V</td><td>Ka</td><td>Ka</td></tr><tr><td><strong>星间链路</strong></td><td>23GHz</td><td>无</td><td>光通信</td><td>无</td><td>光通信</td><td>22.55-190GHz</td><td>无</td><td>光通信</td></tr></tbody></table><p>这里主要调研了规模较小的OneWeb（720颗）、铱星二代（66颗）、Telesat（117颗）三个低轨卫星系统。</p><h2 id="OneWeb"><a href="#OneWeb" class="headerlink" title="OneWeb"></a>OneWeb</h2><h3 id="卫星主要参数："><a href="#卫星主要参数：" class="headerlink" title="卫星主要参数："></a>卫星主要参数：</h3><table><thead><tr><th style="text-align:center"><strong>参数名称</strong></th><th style="text-align:center"><strong>数值</strong></th></tr></thead><tbody><tr><td style="text-align:center">类型</td><td style="text-align:center">LEO</td></tr><tr><td style="text-align:center">周期/min</td><td style="text-align:center">110</td></tr><tr><td style="text-align:center">高度/km</td><td style="text-align:center">1200</td></tr><tr><td style="text-align:center">倾角/(°)</td><td style="text-align:center">87.9</td></tr><tr><td style="text-align:center">轨道面个数</td><td style="text-align:center">18</td></tr><tr><td style="text-align:center">相邻轨道面间隔/(°)</td><td style="text-align:center">10.15</td></tr><tr><td style="text-align:center">每个轨道面卫星个数</td><td style="text-align:center">40</td></tr><tr><td style="text-align:center">同轨道面两个卫星距离/km</td><td style="text-align:center">1189.2</td></tr><tr><td style="text-align:center">同轨道面两个卫星时间/s</td><td style="text-align:center">165</td></tr><tr><td style="text-align:center">卫星速度/(km/s)</td><td style="text-align:center">7.21</td></tr><tr><td style="text-align:center">卫星个数</td><td style="text-align:center">720颗在轨，200颗地面备份</td></tr><tr><td style="text-align:center">卫星重量/kg</td><td style="text-align:center">150</td></tr><tr><td style="text-align:center">造价/万美元</td><td style="text-align:center">每颗卫星造价不超过50</td></tr><tr><td style="text-align:center">覆盖</td><td style="text-align:center">全球覆盖</td></tr><tr><td style="text-align:center">信关站到卫星/GHz</td><td style="text-align:center">27.5-29.1, 29.5-30/0</td></tr><tr><td style="text-align:center">卫星到信关站/GHz</td><td style="text-align:center">17.8-18.6,  18.8-19.3, 19.7-20.2</td></tr><tr><td style="text-align:center">用户终端到卫星/GHz</td><td style="text-align:center">12.75-13.25, 14.0-14.5</td></tr><tr><td style="text-align:center">卫星到用户终端/GHz</td><td style="text-align:center">10.7-12.7</td></tr><tr><td style="text-align:center">接入速率/Mbps</td><td style="text-align:center">上行50，下行200</td></tr><tr><td style="text-align:center">用户波束</td><td style="text-align:center">每颗LEO卫星有16个椭圆形用户波束（工作在Ku频段）</td></tr><tr><td style="text-align:center">馈电波束</td><td style="text-align:center">两个馈电波束（Ka频段）双圆极化</td></tr><tr><td style="text-align:center">关口站</td><td style="text-align:center">全球共分布50多个地面Ka关口站（美国至少有4个）；每个关口站配置数量10副以上的天线，每副天线口径为2.4m或更大</td></tr><tr><td style="text-align:center">用户终端天线</td><td style="text-align:center">天线尺寸为30-75cm，或为机械式双抛物面天线、或为低成本相控阵天线</td></tr><tr><td style="text-align:center">发射EIRP  (卫星用户链路)</td><td style="text-align:center">29.9dBW(54MHz带宽)</td></tr></tbody></table><p>OneWeb卫星包括720颗卫星，分布在18个轨道面，每个轨道面40颗卫星实现全球覆盖，每个轨道面上每隔9°部署一颗卫星。</p><p><strong>卫星不带有星间链路，通过关口站组网通信。</strong>卫星与用户间链路采用Ku频段，单星形成16个长椭圆形波束，共覆盖星下1080km ×1080km的范围。单个波束下行速率可达750Mit/s，上行速率可达375Mbit/s。每颗卫星携带2个Ka频段圆极化双反射面天线，同时与2个关口站进行通信。单星吞吐量约为7.5Gbit/s，整个星座总吞吐量为6-7Tbit/s。由于采用低轨道，<strong>链路传输时延仅为**</strong>30ms**，与地面网络相当。</p><p>OneWeb卫星提供的扩展蜂窝和宽带覆盖示例如下：</p><p>（1）    电池或者太阳能供电可选择；</p><p>（2）    星地时延&lt;30ms（双向）；</p><p>（3）    宽带速率2/10/24/48Mbps；</p><p>（4）    200m皮蜂窝；</p><p>（5）    支持LTE/3G/Wifi；</p><p>（6）    支持小区任意载波（包括漫游）；</p><p>（7）    障碍地形具有很好的性能：视角&gt;50°。</p><h3 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h3><ul><li>小区切换</li></ul><p>由于OneWeb卫星是LEO卫星，低轨道卫星的运动速度非常快，大概在7km/s水平。所以，用户在不断地更换为其服务的卫星，通过波束的多重覆盖，可使用户感觉不到这种“漫游”，保证通讯等质量。跨波束、跨卫星的切换对于卫星来说，由于其相对地面运动速度较大，终端与节点在三维空间中的随机与可预测运动轨迹与相对速度的快速变化，将导致三维角速度快速变化和多普勒频移造成链路捕获与跟踪的困难，需要通过接入控制进行链路适配与切换控制，支持其链路层协议的识别，切换、链路调制。采用<strong>类似于移动**</strong>IP<strong>**的方法进行移动性管理</strong>。由于卫星在其轨道中不停地移动，所以用户在一颗星下要渐渐地从一个波束“漫游”到另一个波束，接着再“漫游”到同一轨道、下一颗卫星的第一个波束（或者是邻近轨道的其他卫星）。这些“漫游”（或叫波束／卫星切换）均无缝进行，用户不会有感知。</p><ul><li>渐进俯仰技术</li></ul><p>OneWeb的720颗低轨道卫星距地球表面1200km，在卫星飞越赤道的过程中，采用“渐进俯仰（progressive pitch）”技术能逐步改变LEO卫星信号发射的方向和电平值，从而消除对GEO卫星的干扰。1997年，ITU意识到用开放的7GHz的频谱资源通过非GEO卫星系统进行全球连接会存在潜在的干扰。OneWeb被批准使用这部分容量，是因为它能够利用一种称作“俯仰渐进”的关键技术来规避这种威胁。这项技术使得他们能够更有效地利用这些频谱，当他们的卫星接近赤道时，他们通过逐渐改变卫星的发射方向，进而消除对同步轨道卫星产生的干扰。</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.oneweb.net/#solution" target="_blank" rel="noopener">https://www.oneweb.net/#solution</a></p><p><a href="https://kns.cnki.net/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFDLAST2018&amp;filename=KJDZ201706001&amp;v=MTI1OTR6a1Y3L05MaWZQZExHNEg5Yk1xWTlGWllSOGVYMUx1eFlTN0RoMVQzcVRyV00xRnJDVVI3cWZaZVJvRnk=" target="_blank" rel="noopener">翟继强,李雄飞.OneWeb卫星系统及国内低轨互联网卫星系统发展思考</a></p><p><a href="https://spacefan.github.io/2019/02/12/LEOComm/" target="_blank" rel="noopener">低轨卫星通信系统发展综述</a></p><h2 id="铱星二代（Iridium-NEXT）"><a href="#铱星二代（Iridium-NEXT）" class="headerlink" title="铱星二代（Iridium NEXT）"></a>铱星二代（Iridium NEXT）</h2><h3 id="卫星总体指标："><a href="#卫星总体指标：" class="headerlink" title="卫星总体指标："></a>卫星总体指标：</h3><table><thead><tr><th style="text-align:center"><strong>项目</strong></th><th style="text-align:center"><strong>指标</strong></th></tr></thead><tbody><tr><td style="text-align:center">星座规模</td><td style="text-align:center">66颗工作星呈δ-Walker星座均匀分布在6个轨道面上，辅以6颗天基备份星和9颗地基备份星</td></tr><tr><td style="text-align:center">卫星轨道</td><td style="text-align:center">LEO极轨道，倾角86.4°，工作轨道高度780km，轨道周期101分钟</td></tr><tr><td style="text-align:center">发射部署</td><td style="text-align:center">2017.01.14-2019.01.12，8次发射任务，运载火箭Falcon-9 v1.2</td></tr><tr><td style="text-align:center">总体指标</td><td style="text-align:center">质量约860kg，功率2kW，发射包络3.1mx2.4mx1.5m，在轨包络3.1mx9.4mx1.5m</td></tr><tr><td style="text-align:center">在轨寿命</td><td style="text-align:center">设计寿命10年，任务寿命15年</td></tr><tr><td style="text-align:center">姿态控制</td><td style="text-align:center">两轴稳定，带有星敏</td></tr><tr><td style="text-align:center">主载荷</td><td style="text-align:center">L频段通信机，相控阵天线，48个波束，1.5Mbps星地数据传输速率</td></tr><tr><td style="text-align:center">测控系统</td><td style="text-align:center">Ka频段（20/30GHz），全向天线</td></tr><tr><td style="text-align:center">星地网关</td><td style="text-align:center">两个Ka频段（23GHz）通信机交叉连接到相邻的卫星，速率达10Mbps</td></tr><tr><td style="text-align:center">搭载能力</td><td style="text-align:center">质量≤50kg，空间包络≤40cmx70cmx30cm长期功耗≤50W，峰值功耗≤200W数据量≤100kbps（90%占空比）、≤1Mbps(10%占空比)</td></tr></tbody></table><p>​    铱星二代由81颗功能相同的卫星组成天基移动通信系统，其中66颗工作星呈δ-Walker 星座均匀分布在6个轨道面上，辅以6颗天基备份星和9颗地基备份星。铱星二代卫星重约860kg，最大功耗2kW，发射包络3.1m x 2.4m x 1.5m，设计寿命10年，任务寿命15年。卫星主载荷为L波段通信载荷，其相控阵天线在地球表面生成48个波束，形成直径为4700km 的蜂窝，用于提供1.5Mbps的星地数据传输服务；卫星提供搭载服务，可搭载质量不大于50kg、功耗不大于50W、空间包络不大于40 cm x 70 cm x 30 cm、数据量不大于100 kbps（90% 占空比）或 1 Mbps（10% 占空比）的次载荷，目前每颗卫星皆携带一个ADS-B 接收机，58 颗星携带了 AIS 接收机，用于全球民用客机及船舶监视服务。</p><p><strong>卫星具备星间和星地网关链路</strong>，星间链路由4个Ka波段（23 GHz）通信设备实现，前后双星的链路2个设备固定指向，相邻轨道2个设备具备目标姿态指向能力，通信速率达10Mbps；星地网关链路由2个具备目标姿态指向的Ka波段（20/30 GHz）通信设备实现，通信速率达8Mbps。</p><h3 id="参考链接-1"><a href="#参考链接-1" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://en.wikipedia.org/wiki/Iridium_satellite_constellation" target="_blank" rel="noopener">铱星星座</a></p><p><a href="https://directory.eoportal.org/web/eoportal/satellite-missions/i/iridium-next" target="_blank" rel="noopener">Iridium NEXT (Hosting Payloads on a Communications Constellation)</a></p><p><a href="https://spacefan.github.io/2019/02/12/LEOComm/" target="_blank" rel="noopener">低轨卫星通信系统发展综述</a></p><h2 id="Telesat"><a href="#Telesat" class="headerlink" title="Telesat"></a>Telesat</h2><h3 id="卫星主要参数：-1"><a href="#卫星主要参数：-1" class="headerlink" title="卫星主要参数："></a>卫星主要参数：</h3><table><thead><tr><th style="text-align:center"><strong>参数名称</strong></th><th style="text-align:center">数值</th></tr></thead><tbody><tr><td style="text-align:center">类型</td><td style="text-align:center">LEO</td></tr><tr><td style="text-align:center">高度/km</td><td style="text-align:center">1248</td></tr><tr><td style="text-align:center">倾角/(°)</td><td style="text-align:center">37.4</td></tr><tr><td style="text-align:center">轨道面个数</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">每个轨道面卫星个数</td><td style="text-align:center">10</td></tr><tr><td style="text-align:center">卫星个数</td><td style="text-align:center">不少于117颗</td></tr><tr><td style="text-align:center">上行链路/GHz</td><td style="text-align:center">Ka频段，17.8-20.2</td></tr><tr><td style="text-align:center">下行链路/GHz</td><td style="text-align:center">Ka频段，27.5-30.0</td></tr><tr><td style="text-align:center">星间链路</td><td style="text-align:center">光通信</td></tr><tr><td style="text-align:center">用户波束</td><td style="text-align:center">≥16个波束，具有波束成形，波束调形</td></tr><tr><td style="text-align:center">关口站</td><td style="text-align:center">每个卫星将具有2个可调向的关口站天线，每个关口站配备多个3.5米天线</td></tr></tbody></table><p>Telesat的Ka波段星座由不少于117颗卫星组成，卫星分布在两组轨道面上：</p><p>（1）第一组轨道面为极轨道，由6个轨道面组成，轨道倾角99.5度，高度1000km，每个平面至少12颗卫星；</p><p>（2）第二组轨道面为倾斜轨道，由不少于5个轨道面组成，轨道倾角37.4度，高度1200km，每个平面至少有10颗卫星。</p><p>同一轨道组内的同一平面内或相邻平面内，及在两个轨道组间的相邻卫星，都将<strong>通过激光卫星间链路（**</strong>Inter-SatelliteLink,ISL<strong>**）进行通信</strong>。由于使用星间链路，用户将能够从世界上任何地方连接到系统，即使用户和关口站不在同一卫星的视线内。</p><p>每颗卫星将作为IP网络的节点，并将携带具有直接辐射阵列（DirectRadiatingArray,DRA）的高级数字通信有效载荷。有效载荷将包括具有解调、路由和重新调制功能的星上处理模块，从而解耦上下行链路，这代表了当前弯管架构的重要创新。</p><p>DRA将能够在上行链路方向上形成至少16个波束，并且在下行链路方向上形成至少另外16个波束，并且将具有波束成形（beam-forming）和波束调形（beam-shaping）功能，其功率、带宽、大小和视轴动态地分配给每个波束以最大限度地提高性能并最大限度地减少对GSO和NGSO卫星的干扰。</p><p>此外，每个卫星将具有2个可调向的关口站天线，以及用于信令的宽视场接收器波束。该系统设计有多个分布在世界各地的关口站，每个关口站配备多个3.5米天线。渥太华的控制中心将监测、协调和控制资源分配过程，以及无线电信道的规划、安排和维护。</p><p>Telesat的星座将在Ka频段（17.8-20.2GHz）的较低频谱中使用1.8GHz的带宽用于下行链路，而在上Ka频段（27.5-30.0GHz）的带宽为2.1GHz用于上行链路。</p><h3 id="参考链接-2"><a href="#参考链接-2" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="http://202.202.43.73:8000/rwt/CNKI/http/NNYHGLUDN3WXTLUPMW4A/KCMS/detail/detail.aspx?dbcode=CJFQ&amp;dbname=CJFDLAST2019&amp;filename=WXWL201907010&amp;uid=WEEvREcwSlJHSldRa1FhcTdnTnhXS1B5MmpDZHUyT1hCa2Q1VExEb0xxST0=$9A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!&amp;v=MDQxMzN5L25XNy9BTWpYY1lyRzRIOWpNcUk5RVpJUjhlWDFMdXhZUzdEaDFUM3FUcldNMUZyQ1VSN3FmWmVSb0Y=" target="_blank" rel="noopener">Inigo del Portilloa,Bruce G.Cameronb,Edward F.Crawleyc,刘帅军,胡月梅.Telesat、One Web及Space X三个全球宽带低轨卫星星座系统的技术对比</a></p><p><a href="http://www.mit.edu/~portillo/files/Comparison-LEO-IAC-2018-slides.pdf" target="_blank" rel="noopener">A Technical Comparison of Three Low Earth Orbit Satellite Constellation Systems to Provide Global Broadband</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;低轨卫星星座系统调研&quot;&gt;&lt;a href=&quot;#低轨卫星星座系统调研&quot; class=&quot;headerlink&quot; title=&quot;低轨卫星星座系统调研&quot;&gt;&lt;/a&gt;低轨卫星星座系统调研&lt;/h1&gt;&lt;h2 id=&quot;低轨卫星系统概况&quot;&gt;&lt;a href=&quot;#低轨卫星系统概况&quot; cla
      
    
    </summary>
    
    
      <category term="卫星网络" scheme="http://b1ng0.top/tags/%E5%8D%AB%E6%98%9F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Java code snippet</title>
    <link href="http://b1ng0.top/2020/02/19/Java%20code%20snippet/"/>
    <id>http://b1ng0.top/2020/02/19/Java code snippet/</id>
    <published>2020-02-18T16:00:00.000Z</published>
    <updated>2020-05-19T12:00:32.540Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在家里就各种拖延症，不想看论文，不想挖洞，只能强迫自己刷刷题假装在学习的样子，在这里整理一下java常用的数据结构，记不住了就过来copy。。。</p></blockquote><h2 id="Array-amp-ArrayList"><a href="#Array-amp-ArrayList" class="headerlink" title="Array &amp; ArrayList"></a>Array &amp; ArrayList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] myArr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][<span class="number">10</span>];</span><br><span class="line">ArrayList&lt;String&gt; myArr = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">myArr.add(<span class="string">"dynamically resizing"</span>);</span><br><span class="line">System.out.println(myArr.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vector&lt;String&gt; myVect = <span class="keyword">new</span> Vector&lt;String&gt;();</span><br><span class="line">myVect.add(<span class="string">"synchronized"</span>);</span><br><span class="line">System.out.println(myVect.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;String&gt; myList = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">myList.add(<span class="string">"build-in list"</span>);</span><br><span class="line">Iterator&lt;String&gt; iter = myList.iterator();</span><br><span class="line"><span class="keyword">while</span> (iter.hasNext())</span><br><span class="line">System.out.println(iter.next());</span><br></pre></td></tr></table></figure><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">map.put(<span class="string">"key"</span>,<span class="string">"value"</span>);</span><br><span class="line">System.out.println(map.get(<span class="string">"key"</span>));</span><br></pre></td></tr></table></figure><h2 id="Stacks"><a href="#Stacks" class="headerlink" title="Stacks"></a>Stacks</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Stack&lt;Object&gt; stack = <span class="keyword">new</span> Stack&lt;Object&gt;();</span><br><span class="line"><span class="function">Object <span class="title">push</span><span class="params">(Object element)</span></span></span><br><span class="line"><span class="function">Object <span class="title">pop</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Object <span class="title">peek</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Object <span class="title">isEmpty</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h2 id="Queues"><a href="#Queues" class="headerlink" title="Queues"></a>Queues</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;Object&gt; queue = <span class="keyword">new</span> LinkedList&lt;Object&gt;();</span><br><span class="line"><span class="function">Object <span class="title">offer</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Object <span class="title">poll</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h2 id="Dictionaries"><a href="#Dictionaries" class="headerlink" title="Dictionaries"></a>Dictionaries</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Dictionary&lt;Object, Object&gt; dic = <span class="keyword">new</span> Hashtable&lt;Object, Object&gt;();</span><br><span class="line"><span class="function">Object <span class="title">put</span><span class="params">(Object key, Object value)</span></span></span><br><span class="line"><span class="function">Object <span class="title">get</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function">Enumeration <span class="title">elements</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Enumeration <span class="title">keys</span><span class="params">()</span></span></span><br><span class="line"><span class="function">Object <span class="title">remove</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object key)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder string = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="function">StringBuilder <span class="title">append</span><span class="params">(<span class="keyword">char</span> c)</span></span></span><br><span class="line"><span class="function">StringBuilder <span class="title">deleteCharAt</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(<span class="keyword">char</span> ch)</span></span></span><br><span class="line"><span class="function">String <span class="title">concat</span><span class="params">(String s)</span></span></span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex)</span></span></span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> beginIndex, <span class="keyword">int</span> endIndex)</span></span></span><br><span class="line"><span class="function">String <span class="title">toLowerCase</span><span class="params">()</span></span></span><br><span class="line"><span class="function">String <span class="title">toUpperCase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(CharSequence s)</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">copyValueOf</span><span class="params">(<span class="keyword">char</span>[] data)</span></span></span><br><span class="line"><span class="function"><span class="keyword">char</span>[] <span class="title">toCharArray</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contenEquals</span><span class="params">(StringBuffer sb)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWith</span><span class="params">(String suffix)</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span></span></span><br><span class="line"><span class="function">String <span class="title">intern</span><span class="params">()</span></span></span><br><span class="line"><span class="function">String <span class="title">trim</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">xxx <span class="title">abs</span><span class="params">(xxx x)</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ceil</span><span class="params">(<span class="keyword">double</span> d)</span> </span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">ceil</span><span class="params">(<span class="keyword">float</span> f)</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">floor</span><span class="params">(<span class="keyword">double</span> d)</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">floor</span><span class="params">(<span class="keyword">float</span> f)</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">int</span><span class="params">(<span class="keyword">double</span> d)</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">round</span><span class="params">(<span class="keyword">double</span> d)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">round</span><span class="params">(<span class="keyword">float</span> f)</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">exp</span><span class="params">(<span class="keyword">double</span> d)</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">log</span><span class="params">(<span class="keyword">double</span> d)</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">pow</span><span class="params">(<span class="keyword">double</span> base, <span class="keyword">double</span> exponent)</span></span></span><br><span class="line"><span class="function">Double E, PI</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在家里就各种拖延症，不想看论文，不想挖洞，只能强迫自己刷刷题假装在学习的样子，在这里整理一下java常用的数据结构，记不住了就过来copy。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Array-amp-ArrayList&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="java" scheme="http://b1ng0.top/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>OAI搭建eNB</title>
    <link href="http://b1ng0.top/2019/12/12/oai%E6%90%AD%E5%BB%BAenb/"/>
    <id>http://b1ng0.top/2019/12/12/oai搭建enb/</id>
    <published>2019-12-11T16:00:00.000Z</published>
    <updated>2020-05-19T12:00:32.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>难以置信，又开始搞5g了。。。</p><h2 id="0x01-准备"><a href="#0x01-准备" class="headerlink" title="0x01 准备"></a>0x01 准备</h2><p>参考链接： <a href="https://blog.csdn.net/qq_42030961/article/details/82740296" target="_blank" rel="noopener">https://blog.csdn.net/qq_42030961/article/details/82740296</a> </p><p>安装环境：</p><p> Ubuntu 14.04.3 </p><p> USRP B210 </p><h2 id="0x02-安装步骤"><a href="#0x02-安装步骤" class="headerlink" title="0x02 安装步骤"></a>0x02 安装步骤</h2><h3 id="更换内核"><a href="#更换内核" class="headerlink" title="更换内核"></a>更换内核</h3><p>执行如下两条，更换3.19.0-61低延迟内核</p><blockquote><p>sudo apt-get update<br>sudo apt-get install linux-image-3.19.0-61-lowlatency linux-headers-3.19.0-61-lowlatency</p></blockquote><p>更换完成后输入</p><blockquote><p>sudo reboot</p></blockquote><p>电脑就会立刻重启了。重启后输入 uname -a可以查看内核信息。如下</p><blockquote><p>Linux hostname 3.19.0-61-lowlatency #69~14.04.1-Ubuntu SMP PREEMPT Thu Jun 9 10:15:00 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux</p></blockquote><h3 id="电源管理"><a href="#电源管理" class="headerlink" title="电源管理"></a>电源管理</h3><blockquote><p>sudo gedit /etc/default/grub</p></blockquote><p>在GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash”这行的下面添加两行：</p><blockquote><p>GRUB_CMDLINE_LINUX_DEFAULT=”quiet intel_pstate=disable”<br>GRUB_CMDLINE_LINUX_DEFAULT=”processor.max_cstate=1 intel_idle.max_cstate=0 idle=poll”</p></blockquote><p>预告：如果没有关掉c-state，这两行会需要修改，先往下走。</p><blockquote><p>sudo gedit /etc/modprobe.d/blacklist.conf</p></blockquote><p>在文件最后添加</p><blockquote><p>blacklist intel_powerclam</p></blockquote><p>依次执行</p><blockquote><p>sudo apt-get install cpufrequtils<br>sudo gedit /etc/default/cpufrequtils</p></blockquote><p>这个cpufrequtils 大概率为空文件，在里面加上一句：</p><blockquote><p>GOVERNOR=“performance”</p></blockquote><blockquote><p>sudo update-rc.d ondemand disable</p></blockquote><blockquote><p>sudo apt-get install i7z</p></blockquote><p>安装i7z，后面可以查看CPU频率。</p><p>重启，进入bios关闭与节能或者影响CPU次能性能的设置，一般在Advanced设置里面。关闭超线程（Hyper-threading），C-state（有的电脑在bios里面找不到c-state，比如我的就没有，没有需要强行在grub里关），方法见（8）：</p><p>用i7z查看是否完成操作</p><p>sudo i7z<br>看到所有频率都在C0就大工告成了，如果没有，请执行:</p><blockquote><p>sudo gedit /etc/default/grub</p></blockquote><p>注释掉原来的三行（有两行是在（1）中添加的）</p><blockquote><p>GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash”<br>GRUB_CMDLINE_LINUX_DEFAULT=”quiet intel_pstate=disable”<br>GRUB_CMDLINE_LINUX_DEFAULT=”processor.max_cstate=1 intel_idle.max_cstate=0 idle=poll”</p></blockquote><p>把它们都写到一行去，用空格隔开：</p><blockquote><p>GRUB_CMDLINE_LINUX_DEFAULT=”quiet splash quiet intel_pstate=disable processor.max_cstate=1 intel_idle.max_cstate=0 idle=poll”</p></blockquote><p>然后更新并重启即可。</p><blockquote><p>sudo update-grub<br>sudo reboot</p></blockquote><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>克隆源码</p><blockquote><p>sudo apt-get install git<br>git clone <a href="https://gitlab.eurecom.fr/oai/openairinterface5g.git" target="_blank" rel="noopener">https://gitlab.eurecom.fr/oai/openairinterface5g.git</a></p></blockquote><p>如果外网访问速度太差，见0x03.</p><p>配置eNB</p><blockquote><p>sudo gedit ~/openairinterface5g/targets/PROJECTS/GENERIC-LTE-EPC/CONF/enb.band7.tm1.usrpb210.conf</p></blockquote><p>需要更改和确认的部分如下：前三行在MME中可以查到，之后就是把IP对应换成自己的EPC和eNB所在IP。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">tracking_area_code  =  "1";</span><br><span class="line">mobile_country_code =  "208";</span><br><span class="line">mobile_network_code =  "92";</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">////////// MME parameters:</span><br><span class="line">    mme_ip_address      = ( &#123; ipv4       = "192.168.12.62";</span><br><span class="line">                              ipv6       = "192:168:30::17";</span><br><span class="line">                              active     = "yes";</span><br><span class="line">                              preference = "ipv4";</span><br><span class="line">                            &#125;</span><br><span class="line">                          );</span><br><span class="line">    NETWORK_INTERFACES :</span><br><span class="line">    &#123;</span><br><span class="line">        ENB_INTERFACE_NAME_FOR_S1_MME         = "eth0";</span><br><span class="line">        ENB_IPV4_ADDRESS_FOR_S1_MME           = "192.168.12.82/24";</span><br><span class="line">        ENB_INTERFACE_NAME_FOR_S1U            = "eth0";</span><br><span class="line">        ENB_IPV4_ADDRESS_FOR_S1U              = "192.168.12.82/24";</span><br><span class="line">        ENB_PORT_FOR_S1U                      = 2152; # Spec 2152</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编译eNB</p><blockquote><p>cd openairinterface5g<br>source oaienv<br>cd cmake_targets<br>sudo ./build_oai -I -w USRP</p></blockquote><p>编译后无红色报错即可</p><p>运行eNB</p><blockquote><p>cd ~/openairinterface5g<br>source oaienv<br>cd cmake_targets<br>./build_oai –eNB -c -w USRP (这条运行一次就行了 确认安装)<br>cd lte_build_oai/build<br>sudo -E ./lte-softmodem -O $OPENAIR_DIR/targets/PROJECTS/GENERIC-LTE-EPC/CONF/enb.band7.tm1.usrpb210.conf -d</p></blockquote><h2 id="0x03-网络优化"><a href="#0x03-网络优化" class="headerlink" title="0x03 网络优化"></a>0x03 网络优化</h2><p>建议安装上ubuntu之后就不要进行更换镜像源操作，然后全局走能连上外网的代理，并且在network处设置proxy，这样就能一劳永逸的解决后续下载速度问题:</p><blockquote><p> http_proxy=’<a href="http://ip:port’" target="_blank" rel="noopener">http://ip:port’</a> </p><p> https_proxy=’<a href="http://ip:port’" target="_blank" rel="noopener">http://ip:port’</a></p><p> socks_proxy=’socks://ip:port’  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;难以置信，又开始搞5g了。。。&lt;/p&gt;
&lt;h2 id=&quot;0x01-准备&quot;&gt;&lt;a href=&quot;#0x0
      
    
    </summary>
    
    
      <category term="5g" scheme="http://b1ng0.top/tags/5g/"/>
    
  </entry>
  
  <entry>
    <title>go get速度优化</title>
    <link href="http://b1ng0.top/2019/11/19/go%20get%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/"/>
    <id>http://b1ng0.top/2019/11/19/go get速度优化/</id>
    <published>2019-11-18T16:00:00.000Z</published>
    <updated>2020-05-19T12:00:32.545Z</updated>
    
    <content type="html"><![CDATA[<h2 id="go-get-速度慢"><a href="#go-get-速度慢" class="headerlink" title="go get 速度慢"></a>go get 速度慢</h2><p> go get -u github.com/gpmgo/gopm </p><p>将 go get 替换成gopm get -g</p><p>对于下载失败的 直接通过github clone</p><p>eg:</p><p>mkdir -p $GOPATH/src/golang.org/x</p><p>cd $GOPATH/src/golang.org/x</p><p>git clone <a href="https://github.com/golang/sys.git" target="_blank" rel="noopener">https://github.com/golang/sys.git</a></p><h2 id="git-clone-速度慢"><a href="#git-clone-速度慢" class="headerlink" title="git clone 速度慢"></a>git clone 速度慢</h2><p>设置全局socks5代理</p><p> git config –global http.proxy socks5://your-server:your-port </p><p>取消设置</p><p> git config –global –unset http.proxy </p><h2 id="使用socks代理"><a href="#使用socks代理" class="headerlink" title="使用socks代理"></a>使用socks代理</h2><p>apt install tsocks<br>vim /etc/tsocks.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">local = 192.168.1.0/255.255.255.0  #local表示本地的网络，也就是不使用socks代理的网络</span><br><span class="line">local = 127.0.0.0/255.0.0.0</span><br><span class="line">server = 127.0.0.1   #socks服务器的IP</span><br><span class="line">server_type = 5  #socks服务版本</span><br><span class="line">server_port = 1080  ＃socks服务使用的端口</span><br></pre></td></tr></table></figure><p>使用代理：</p><p>tsocks apt-get install XXX</p><p>tsocks wget XXX</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;go-get-速度慢&quot;&gt;&lt;a href=&quot;#go-get-速度慢&quot; class=&quot;headerlink&quot; title=&quot;go get 速度慢&quot;&gt;&lt;/a&gt;go get 速度慢&lt;/h2&gt;&lt;p&gt; go get -u github.com/gpmgo/gopm &lt;/p&gt;

      
    
    </summary>
    
    
      <category term="go" scheme="http://b1ng0.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>sqlalchemy并发连接问题</title>
    <link href="http://b1ng0.top/2019/10/12/sqlalchemy%E5%B9%B6%E5%8F%91%E8%BF%9E%E6%8E%A5%E9%97%AE%E9%A2%98/"/>
    <id>http://b1ng0.top/2019/10/12/sqlalchemy并发连接问题/</id>
    <published>2019-10-11T16:00:00.000Z</published>
    <updated>2020-05-19T12:00:32.550Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-问题描述"><a href="#0x01-问题描述" class="headerlink" title="0x01 问题描述"></a>0x01 问题描述</h1><p>最近在写一个批量扫描工具，使用多线程爬取目标然后将数据存入数据库中，但是在使用sqlalchemy 引擎时线程数过多就会出现错误：“Too many connections”</p><p><img src="/images/1570865257995.png" alt="1570865257995"></p><h1 id="0x02-解决方案"><a href="#0x02-解决方案" class="headerlink" title="0x02 解决方案"></a>0x02 解决方案</h1><ul><li><p>增加数据库最大连接（不可取）</p><p>查了一下数据库最大连接数，当超过最大连接数数据库就会报出去错误，所以适当改大可以勉强解决问题。</p><p><img src="/images/1570865477424.png" alt="1570865477424"></p></li></ul><ul><li><p>不使用连接池</p><p>sqlalchemy在 <code>create_engine</code> 时有很多可选参数，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">engine = create_engine(<span class="string">'mysql://user:password@localhost:3306/test?charset=utf8mb4'</span>,</span><br><span class="line">                       echo=<span class="literal">False</span>, <span class="comment"># 打印info</span></span><br><span class="line">                       pool_size=<span class="number">100</span>, <span class="comment"># 连接池大小 默认为5</span></span><br><span class="line">                       pool_recycle=<span class="number">3600</span>, <span class="comment"># 连接回收时间</span></span><br><span class="line">                       )</span><br></pre></td></tr></table></figure><p>默认不指定连接池设置的话 ，SQLAlchemy会使用一个 QueuePool 绑定在新创建的引擎上，并附上合适的连接池参数。并发连接超过超过最大连接数，就会产生“Too many connections”错误，所以参考sqlalchemy文档完全可以不使用连接池即可解决问题。</p><p>一个栗子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sqlalchemy.pool <span class="keyword">import</span> NullPool</span><br><span class="line">engine = create_engine(<span class="string">"mysql://root:pass@hostname/dbname"</span>, poolclass=NullPool)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x01-问题描述&quot;&gt;&lt;a href=&quot;#0x01-问题描述&quot; class=&quot;headerlink&quot; title=&quot;0x01 问题描述&quot;&gt;&lt;/a&gt;0x01 问题描述&lt;/h1&gt;&lt;p&gt;最近在写一个批量扫描工具，使用多线程爬取目标然后将数据存入数据库中，但是在使用sql
      
    
    </summary>
    
    
      <category term="python" scheme="http://b1ng0.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>vmware彻底关闭时间同步</title>
    <link href="http://b1ng0.top/2019/08/27/vmware%E5%BD%BB%E5%BA%95%E5%85%B3%E9%97%AD%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/"/>
    <id>http://b1ng0.top/2019/08/27/vmware彻底关闭时间同步/</id>
    <published>2019-08-26T16:00:00.000Z</published>
    <updated>2020-05-19T12:00:32.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-问题"><a href="#0x01-问题" class="headerlink" title="0x01 问题"></a>0x01 问题</h1><p>迫于某垃圾项目需要在一个2014年的win7虚拟机中进行开发，宿主机时间不在2014年虚拟机里面的软件即会崩溃，但是调到2014年宿主机就不能上网了，作为一个复制粘贴boy，实在不能忍受断网调代码，然而在vmware上直接关闭时间同步，虚拟机依然会不时的与宿主机同步时间，于是在虚拟机崩了无数次之后，终于找到了解决方法。。。</p><h1 id="0x02-解决方法"><a href="#0x02-解决方法" class="headerlink" title="0x02 解决方法"></a>0x02 解决方法</h1><ol><li><p>在虚拟机的 .vmx 文件中添加配置选项:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tools.syncTime = &quot;FALSE&quot;</span><br><span class="line">time.synchronize.continue = &quot;FALSE&quot;</span><br><span class="line">time.synchronize.restore = &quot;FALSE&quot;</span><br><span class="line">time.synchronize.resume.disk = &quot;FALSE&quot;</span><br><span class="line">time.synchronize.shrink = &quot;FALSE&quot;</span><br><span class="line">time.synchronize.tools.startup = &quot;FALSE&quot;</span><br><span class="line">time.synchronize.tools.enable = &quot;FALSE&quot;</span><br><span class="line">time.synchronize.resume.host = &quot;FALSE&quot;</span><br></pre></td></tr></table></figure></li><li><p>在win7中关闭与Internet时间服务器同步</p><p><img src="/images/1566871209850.png" alt="1566871209850"></p></li></ol><h1 id="0x03-参考链接"><a href="#0x03-参考链接" class="headerlink" title="0x03 参考链接"></a>0x03 参考链接</h1><p><a href="https://kb.vmware.com/articleview?docid=1189&amp;lang=zh_CN" target="_blank" rel="noopener">https://kb.vmware.com/articleview?docid=1189&amp;lang=zh_CN</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x01-问题&quot;&gt;&lt;a href=&quot;#0x01-问题&quot; class=&quot;headerlink&quot; title=&quot;0x01 问题&quot;&gt;&lt;/a&gt;0x01 问题&lt;/h1&gt;&lt;p&gt;迫于某垃圾项目需要在一个2014年的win7虚拟机中进行开发，宿主机时间不在2014年虚拟机里面的软
      
    
    </summary>
    
    
      <category term="vmware" scheme="http://b1ng0.top/tags/vmware/"/>
    
  </entry>
  
  <entry>
    <title>scrapy的一些坑</title>
    <link href="http://b1ng0.top/2019/08/05/scrapy%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>http://b1ng0.top/2019/08/05/scrapy的一些坑/</id>
    <published>2019-08-04T16:00:00.000Z</published>
    <updated>2020-05-19T12:00:32.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="导出数据时中文乱码"><a href="#导出数据时中文乱码" class="headerlink" title="导出数据时中文乱码"></a>导出数据时中文乱码</h2><p>使用scrapy抓取的数据中含有中文时，因为中文默认是Unicode, 在使用-o参数导出时，无法显示。</p><p>解决方法：在setting.py中添加一行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FEED_EXPORT_ENCODING = <span class="string">'utf-8'</span></span><br></pre></td></tr></table></figure><h2 id="meta参数的浅拷贝问题"><a href="#meta参数的浅拷贝问题" class="headerlink" title="meta参数的浅拷贝问题"></a>meta参数的浅拷贝问题</h2><p>多级爬取数据时，需要在多个页面中获取数据，使用meta参数可以在多个parse中传递值，但是由于meta是浅拷贝，当item中的数据需要重复爬取时，下一个函数接收item= response.meta[‘item’]并不会及时更新，所以需要进行深拷贝：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="keyword">yield</span> scrapy.Request(post_url, callback=self.parse_post_url,</span><br><span class="line">                meta=&#123;<span class="string">'item'</span>:copy.deepcopy(item)&#125;)</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://www.aisun.org/2017/10/python+scrapy/" target="_blank" rel="noopener">https://www.aisun.org/2017/10/python+scrapy/</a></p><p><a href="https://www.zhihu.com/question/54773510/answer/146971644" target="_blank" rel="noopener">https://www.zhihu.com/question/54773510/answer/146971644</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;导出数据时中文乱码&quot;&gt;&lt;a href=&quot;#导出数据时中文乱码&quot; class=&quot;headerlink&quot; title=&quot;导出数据时中文乱码&quot;&gt;&lt;/a&gt;导出数据时中文乱码&lt;/h2&gt;&lt;p&gt;使用scrapy抓取的数据中含有中文时，因为中文默认是Unicode, 在使用-o参
      
    
    </summary>
    
    
      <category term="爬虫 scrapy" scheme="http://b1ng0.top/tags/%E7%88%AC%E8%99%AB-scrapy/"/>
    
  </entry>
  
  <entry>
    <title>docker常用命令整理</title>
    <link href="http://b1ng0.top/2019/07/25/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%95%B4%E7%90%86/"/>
    <id>http://b1ng0.top/2019/07/25/docker常用命令整理/</id>
    <published>2019-07-24T16:00:00.000Z</published>
    <updated>2020-05-19T12:00:32.543Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录一下docker常用的命令，待续…</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一键安装(linux)docker CE</span></span><br><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sudo sh get-docker.sh --mirror Aliyun</span><br><span class="line"><span class="comment"># 启动 Docker CE</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line">sudo systemctl start docker</span><br><span class="line"><span class="comment"># 建立 docker 用户组</span></span><br><span class="line">sudo groupadd docker</span><br><span class="line">sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"><span class="comment"># 测试 Docker 是否安装正确</span></span><br><span class="line">docker run hello-world</span><br><span class="line"><span class="comment"># 镜像加速 写入`/etc/docker/daemon.json`</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"registry-mirrors"</span>: </span><br><span class="line">[</span><br><span class="line"><span class="string">"https://dockerhub.azk8s.cn"</span>,</span><br><span class="line"><span class="string">"https://reg-mirror.qiniu.com"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用镜像"><a href="#使用镜像" class="headerlink" title="使用镜像"></a>使用镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 版本等信息</span></span><br><span class="line">docker version</span><br><span class="line"><span class="comment"># 更多的信息</span></span><br><span class="line">docker info</span><br><span class="line"><span class="comment"># 查看后台运行的容器</span></span><br><span class="line">docker ps        </span><br><span class="line"><span class="comment"># 搜索镜像</span></span><br><span class="line">docker search ubuntu:18.04</span><br><span class="line"><span class="comment"># 下载xxx镜像</span></span><br><span class="line">docker pull ubuntu:18.04</span><br><span class="line"><span class="comment"># 列出镜像</span></span><br><span class="line">docker image ls</span><br><span class="line"><span class="comment"># 中间层镜像</span></span><br><span class="line">docker image ls -a</span><br><span class="line"><span class="comment"># 删除虚悬镜像</span></span><br><span class="line">docker image prune</span><br><span class="line"><span class="comment"># 删除xxx镜像</span></span><br><span class="line">docker image rm ubuntu </span><br><span class="line"><span class="comment"># 导出镜像并压缩</span></span><br><span class="line">docker save ubuntu &gt; myubuntu.tar</span><br><span class="line">tar -zcvf myubuntu.tar.gz myubuntu.tar</span><br><span class="line"><span class="comment"># 解压导入镜像</span></span><br><span class="line">tar -xzvf myap.tar.gz</span><br><span class="line">docker load &lt; myap.tar</span><br><span class="line"></span><br><span class="line"><span class="comment"># commit保存镜像</span></span><br><span class="line"><span class="comment"># 运行nginx服务</span></span><br><span class="line">docker run --name webserver -d -p 80:80 nginx</span><br><span class="line"><span class="comment"># 对nginx做出修改</span></span><br><span class="line">docker <span class="built_in">exec</span> -it webserver bash</span><br><span class="line">root@3729b97e8226:/<span class="comment"># echo '&lt;h1&gt;Hello, Docker!&lt;/h1&gt;' &gt; /usr/share</span></span><br><span class="line">/nginx/html/index.html</span><br><span class="line">root@3729b97e8226:/<span class="comment"># exit</span></span><br><span class="line">docker diff webserver</span><br><span class="line"><span class="comment"># 保存修改为新镜像</span></span><br><span class="line">docker commit \</span><br><span class="line">--author <span class="string">"b1ng0"</span> \</span><br><span class="line">--message <span class="string">"修改了默认网页"</span> \</span><br><span class="line">webserver \</span><br><span class="line">nginx:v2</span><br><span class="line"><span class="comment"># 查看镜像历史</span></span><br><span class="line">docker <span class="built_in">history</span> nginx:v2</span><br></pre></td></tr></table></figure><h2 id="操作容器"><a href="#操作容器" class="headerlink" title="操作容器"></a>操作容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建并启动容器</span></span><br><span class="line">docker run -it ubuntu:18.04 /bin/bash</span><br><span class="line"><span class="comment"># 启动/重启/停止xxxx容器</span></span><br><span class="line">docker container start/restart/stop xxx</span><br><span class="line"><span class="comment"># 删除xxx容器</span></span><br><span class="line">docker container rm xxx</span><br><span class="line"><span class="comment"># 后台运行</span></span><br><span class="line">docker run -d ubuntu</span><br><span class="line"><span class="comment"># 进入后台运行的容器</span></span><br><span class="line">docker <span class="built_in">exec</span> xxx</span><br><span class="line"><span class="comment"># 导出容器</span></span><br><span class="line">docker <span class="built_in">export</span> xxx &gt; ubuntu.tar</span><br><span class="line"><span class="comment"># 导入容器</span></span><br><span class="line">docker import ubuntu.tar <span class="built_in">test</span>/ubuntu:v1.0</span><br><span class="line"><span class="comment"># 清理所有处于终止状态的容器</span></span><br><span class="line">docker container prune</span><br></pre></td></tr></table></figure><h2 id="访问仓库"><a href="#访问仓库" class="headerlink" title="访问仓库"></a>访问仓库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注册 https://hub.docker.com</span></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">docker login <span class="comment"># 输入用户名密码</span></span><br><span class="line"><span class="comment"># 退出登录</span></span><br><span class="line">docker <span class="built_in">logout</span> </span><br><span class="line"><span class="comment"># 拉取镜像</span></span><br><span class="line">docker search centos</span><br><span class="line">docker pull centos</span><br><span class="line"><span class="comment"># 推送镜像(登陆状态)</span></span><br><span class="line">docker tag ubuntu:18.04 b1ng0/ubuntu:18.04</span><br><span class="line">docker push b1ng0/ubuntu:18.04</span><br><span class="line">docker search b1ng0</span><br></pre></td></tr></table></figure><h2 id="数据管理"><a href="#数据管理" class="headerlink" title="数据管理"></a>数据管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据卷</span></span><br><span class="line">docker volume create my-vol</span><br><span class="line"><span class="comment"># 查看所有数据卷</span></span><br><span class="line">docker volume ls</span><br><span class="line"><span class="comment"># 查看指定数据卷信息</span></span><br><span class="line">docker volume inspect my-vol</span><br><span class="line"><span class="comment"># 启动一个挂载数据卷的容器 (--mount参数后面不要有空格)</span></span><br><span class="line">docker run -d -P \</span><br><span class="line">--name web \</span><br><span class="line"><span class="comment"># -v my-vol:/webapp \ </span></span><br><span class="line">--mount <span class="built_in">source</span>=my-vol,target=/webapp \</span><br><span class="line">training/webapp \ </span><br><span class="line">python app.py</span><br><span class="line"><span class="comment"># 查看数据卷(在容器中)的具体信息</span></span><br><span class="line">docker inspect web</span><br><span class="line"><span class="comment"># 删除数据卷</span></span><br><span class="line">docker volume rm my-vol</span><br><span class="line"><span class="comment"># 清理无主数据卷</span></span><br><span class="line">docker volume prune</span><br><span class="line"><span class="comment"># 挂载主机目录作为数据卷</span></span><br><span class="line">docker run -d -P \</span><br><span class="line">--name web \</span><br><span class="line"><span class="comment"># -v /src/webapp:/opt/webapp \</span></span><br><span class="line">--mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=/src/webapp,target=/opt/webapp \</span><br><span class="line">training/webapp \</span><br><span class="line">python app.py</span><br><span class="line"><span class="comment"># 挂载单个文件作为数据卷</span></span><br><span class="line">docker run --rm -it \</span><br><span class="line"><span class="comment"># -v $HOME/.bash_history:/root/.bash_history \</span></span><br><span class="line">--mount <span class="built_in">type</span>=<span class="built_in">bind</span>,<span class="built_in">source</span>=<span class="variable">$HOME</span>/.bash_history,target=/root/.ba</span><br><span class="line">sh_history \</span><br><span class="line">ubuntu:18.04 \</span><br><span class="line">bash</span><br></pre></td></tr></table></figure><h2 id="使用网络"><a href="#使用网络" class="headerlink" title="使用网络"></a>使用网络</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 外部访问容器</span></span><br><span class="line"><span class="comment"># -P 随机映射端口</span></span><br><span class="line">docker run -d -P training/webapp python app.py  </span><br><span class="line"><span class="comment"># 查看应用信息</span></span><br><span class="line">docker logs container_id</span><br><span class="line"><span class="comment"># -p 指定端口映射</span></span><br><span class="line"><span class="comment"># 格式：ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort</span></span><br><span class="line">docker run -d -p 5000:5000 training/webapp python app.py</span><br><span class="line"><span class="comment"># 查看映射端口配置</span></span><br><span class="line">docker port 433 5000 <span class="comment"># 433 是container_id/container_name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 容器互联</span></span><br><span class="line"><span class="comment"># 新建网络 (-d 指定网络类型 bridge/host/overlay/macvlan/none)</span></span><br><span class="line">docker network create -d bridge my-net</span><br><span class="line"><span class="comment"># 连接容器</span></span><br><span class="line">docker run -it --rm --name busybox1 --network my-net busybox sh</span><br><span class="line"><span class="comment"># 新开终端，连接第二个容器</span></span><br><span class="line">docker run -it --rm --name busybox2 --network my-net busybox sh</span><br><span class="line"><span class="comment"># 在busybox2 容器中ping busybox1, 测试连通性</span></span><br><span class="line">ping busybox1</span><br><span class="line"><span class="comment"># 将正在运行的容器连接到现有网桥</span></span><br><span class="line">docker network connect my-net my-nginx</span><br><span class="line"><span class="comment"># 断开容器与网络的连接</span></span><br><span class="line">docker network disconnect my-net my-nginx</span><br><span class="line"><span class="comment"># 配置DNS</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在容器中使用 mount 命令可以看到挂载信息</span></span><br><span class="line">mount</span><br><span class="line"><span class="comment"># 配置全部容器的DNS 写入`/etc/docker/daemon.json`：</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"dns"</span> : </span><br><span class="line">[</span><br><span class="line"><span class="string">"114.114.114.114"</span>,</span><br><span class="line"><span class="string">"8.8.8.8"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 检查配置</span></span><br><span class="line">docker run -it --rm ubuntu:18.04 cat etc/resolv.conf</span><br><span class="line"><span class="comment"># 指定容器的配置</span></span><br><span class="line">docker run -it --rm --dns=114.114.114.114 ubuntu:18.04</span><br></pre></td></tr></table></figure><h2 id="Dockerfile例子"><a href="#Dockerfile例子" class="headerlink" title="Dockerfile例子"></a>Dockerfile例子</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以构建flask为例</span></span><br><span class="line"><span class="comment">#在/etc/docker/deamon.json中写入dns</span></span><br><span class="line">&#123;<span class="string">"dns"</span>: [<span class="string">"119.29.29.29"</span>]&#125;</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># app.py内容</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line">from flask import Flask</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">@app.route(<span class="string">'/'</span>)</span><br><span class="line">def hello():</span><br><span class="line">    <span class="built_in">return</span> <span class="string">'&lt;h1&gt;test&lt;/h1&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    app.run(host=<span class="string">"0.0.0.0"</span>, debug=True)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Dockerfile内容</span></span><br><span class="line">FROM python:2.7-alpine</span><br><span class="line">ADD . /code</span><br><span class="line">WORKDIR /code</span><br><span class="line">RUN sed -i <span class="string">'s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g'</span> /etc/apk/repositories</span><br><span class="line">RUN apk update</span><br><span class="line">RUN pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --no-cache-dir flask</span><br><span class="line">CMD [<span class="string">"python"</span>, <span class="string">"app.py"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在Dockerfile所在目录下build</span></span><br><span class="line">docker build -t flask_test:v1 .</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://docs.docker.com/" target="_blank" rel="noopener">Docker Documentation</a></p><p><a href="https://github.com/yeasy/docker_practice" target="_blank" rel="noopener">Docker — 从入门到实践</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;记录一下docker常用的命令，待续…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
    
      <category term="docker" scheme="http://b1ng0.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>flask使用webSocket协议</title>
    <link href="http://b1ng0.top/2019/07/12/flask%E4%BD%BF%E7%94%A8websocket%E5%8D%8F%E8%AE%AE/"/>
    <id>http://b1ng0.top/2019/07/12/flask使用websocket协议/</id>
    <published>2019-07-11T16:00:00.000Z</published>
    <updated>2020-05-19T12:00:32.545Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>最近项目上需要实现后端的实时推送，而http作为一个单向的通信协议，必须一个request，一个response的进行，于是想到了webSocket ，webSocket 是 HTML5 开始提供的一种在单个 TCP 连接上进行全双工通讯的协议，可以很容易的实现Web的实时通信. 在这里谈一下自己在flask框架下使用webSocket的粗略实践.</p><h1 id="0x02-flask-socketio简单使用"><a href="#0x02-flask-socketio简单使用" class="headerlink" title="0x02 flask-socketio简单使用"></a>0x02 flask-socketio简单使用</h1><p>flask使用flask-socketio的扩展来实现webSocket.</p><p>安装方法:</p><blockquote><p>pip install flask-socketio</p></blockquote><p>参考<a href="https://flask-socketio.readthedocs.io/en/latest/" target="_blank" rel="noopener">官网</a>写了一个后端推送的简单栗子：</p><p>服务器(app.py)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding : utf-8 -*-</span></span><br><span class="line"><span class="comment"># author : b1ng0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, session, request</span><br><span class="line"><span class="keyword">from</span> flask_socketio <span class="keyword">import</span> SocketIO, emit</span><br><span class="line"><span class="keyword">import</span> time, json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'secret!'</span></span><br><span class="line"></span><br><span class="line">socketio = SocketIO(app)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@socketio.on('client_event')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_msg</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        emit(<span class="string">'server_response'</span>, &#123;<span class="string">'data'</span>: msg[<span class="string">'data'</span>]&#125;)</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="meta">@socketio.on('connect_event')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connected_msg</span><span class="params">(msg)</span>:</span></span><br><span class="line">    emit(<span class="string">'server_response'</span>, &#123;<span class="string">'data'</span>: msg[<span class="string">'data'</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    socketio.run(</span><br><span class="line">        app,</span><br><span class="line">        debug=<span class="literal">True</span>,</span><br><span class="line">        host=<span class="string">'0.0.0.0'</span>,</span><br><span class="line">        port=<span class="number">5000</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>客户端(templates/index.html)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flask-SocketIO Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/jquery/3.1.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/socket.io/1.5.1/socket.io.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    $(document).ready(function() &#123;</span><br><span class="line">        var socket = io.connect();</span><br><span class="line"></span><br><span class="line">        socket.on('connect', function() &#123;</span><br><span class="line">            socket.emit('connect_event', &#123;data: 'connected!'&#125;);</span><br><span class="line">            socket.emit('client_event', &#123;data: 'test'&#125;);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        socket.on('server_response', function(msg) &#123;</span><br><span class="line"><span class="xml">            $('#log').append('<span class="tag">&lt;<span class="name">br</span>&gt;</span>' + $('<span class="tag">&lt;<span class="name">div</span>/&gt;</span>').text('Received #' + ': ' + msg.data).html());</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $('form#emit').submit(function(event) &#123;</span><br><span class="line">                socket.emit('client_event', &#123;data: $('#emit_data').val()&#125;);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>WebSokect<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'log'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行效果：(每隔2秒推送一次)</p><p><img src="/images/1562856278162.png" alt></p><h1 id="0x03-一些坑点"><a href="#0x03-一些坑点" class="headerlink" title="0x03 一些坑点"></a>0x03 一些坑点</h1><p>貌似实现了效果，但是在运行的时候，才发现原来使用的是”假的”webSocket:</p><p><img src="/images/1562856476624.png" alt></p><p>提示信息如下：</p><blockquote><p>WebSocket transport not available. Install eventlet or gevent and gevent-websocket for improved performance.</p></blockquote><p>查阅了一些资料，发现其实使用的是长轮询（polling) 的方式在运行，要使用真正的“ws://”还得安装一些异步服务，比如：eventlet/gevent/gevent-websocket，这里安装了eventlet：</p><blockquote><p>pip install eventlet</p></blockquote><p>然而安装之后，客户端根本接收不到，连socketio.on函数都没有触发运行。再次一顿乱搜，发现都是前人踩过的坑了，原来是服务端陷入死循环，会影响与客户端之间的websocket连接。参考flask_socketio的示例程序，使用后台线程进行while循环解决了这个问题。</p><p>改进后的服务端：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding : utf-8 -*-</span></span><br><span class="line"><span class="comment"># author : b1ng0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, session, request</span><br><span class="line"><span class="keyword">from</span> flask_socketio <span class="keyword">import</span> SocketIO, emit</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"><span class="keyword">import</span> time, json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">'secret!'</span></span><br><span class="line"></span><br><span class="line">socketio = SocketIO(app)</span><br><span class="line">thread = <span class="literal">None</span></span><br><span class="line">thread_lock = Lock()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@socketio.on('client_event', namespace='/test_conn')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client_msg</span><span class="params">(msg)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> thread</span><br><span class="line">    <span class="keyword">with</span> thread_lock:</span><br><span class="line">        <span class="keyword">if</span> thread <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            thread = socketio.start_background_task(target=background_thread)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">background_thread</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        socketio.sleep(<span class="number">2</span>)</span><br><span class="line">        socketio.emit(<span class="string">'server_response'</span>, &#123;<span class="string">'data'</span>: <span class="string">'test'</span>&#125;, namespace=<span class="string">'/test_conn'</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="meta">@socketio.on('connect_event', namespace='/test_conn')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connected_msg</span><span class="params">(msg)</span>:</span></span><br><span class="line">    emit(<span class="string">'server_response'</span>, &#123;<span class="string">'data'</span>: msg[<span class="string">'data'</span>]&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    socketio.run(</span><br><span class="line">        app,</span><br><span class="line">        debug=<span class="literal">True</span>,</span><br><span class="line">        host=<span class="string">'0.0.0.0'</span>,</span><br><span class="line">        port=<span class="number">5000</span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure><p>改进后的客户端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Flask-SocketIO Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/jquery/3.1.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/socket.io/1.5.1/socket.io.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    $(document).ready(function() &#123;</span><br><span class="line">        // var socket = io.connect();</span><br><span class="line">        namespace = '/test_conn';</span><br><span class="line">        var socket = io.connect(location.protocol + '//' + document.domain + ':' + location.port + namespace);</span><br><span class="line"></span><br><span class="line">        socket.on('connect', function() &#123;</span><br><span class="line">            socket.emit('connect_event', &#123;data: 'connected!'&#125;);</span><br><span class="line">            socket.emit('client_event', &#123;data: 'test'&#125;);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        socket.on('server_response', function(msg) &#123;</span><br><span class="line"><span class="xml">            $('#log').append('<span class="tag">&lt;<span class="name">br</span>&gt;</span>' + $('<span class="tag">&lt;<span class="name">div</span>/&gt;</span>').text('Received #' + ': ' + msg.data).html());</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $('form#emit').submit(function(event) &#123;</span><br><span class="line">                socket.emit('client_event', &#123;data: $('#emit_data').val()&#125;);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>WebSokect<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'log'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h1><p><a href="https://flask-socketio.readthedocs.io/en/latest/" target="_blank" rel="noopener">https://flask-socketio.readthedocs.io/en/latest/</a></p><p><a href="https://github.com/miguelgrinberg/Flask-SocketIO" target="_blank" rel="noopener">https://github.com/miguelgrinberg/Flask-SocketIO</a></p><p><a href="https://www.cnblogs.com/luozx207/p/9714487.html" target="_blank" rel="noopener">https://www.cnblogs.com/luozx207/p/9714487.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h1&gt;&lt;p&gt;最近项目上需要实现后端的实时推送，而http作为一个单向的通信协议，必须一个request，一个re
      
    
    </summary>
    
    
      <category term="backend" scheme="http://b1ng0.top/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>flask-mail使用qq邮箱</title>
    <link href="http://b1ng0.top/2019/06/25/flask-mail%E4%BD%BF%E7%94%A8qq%E9%82%AE%E7%AE%B1/"/>
    <id>http://b1ng0.top/2019/06/25/flask-mail使用qq邮箱/</id>
    <published>2019-06-24T16:00:00.000Z</published>
    <updated>2020-05-19T12:00:32.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>最近在看狗书，准备系统性的学习一下flask，但是在&lt;&lt;电子邮件&gt;&gt;那章作者使用了gmail作为邮箱服务，笔者配了很久都发不出去，可能是天朝特色导致不能使用gmail的，于是探索了一下flask框架下使用qq邮箱发送电子邮件。</p><h1 id="0x01-qq邮箱配置"><a href="#0x01-qq邮箱配置" class="headerlink" title="0x01 qq邮箱配置"></a>0x01 qq邮箱配置</h1><p>因为是使用SMTP服务发送电子邮件，所以首先要去qq邮箱设置页开启：</p><p><img src="/images/1561425672893.png" alt="1561425672893"></p><p>开启后会得到一个授权码作为邮箱密码使用</p><h1 id="0x02-flask配置"><a href="#0x02-flask配置" class="headerlink" title="0x02 flask配置"></a>0x02 flask配置</h1><ul><li>先贴一个flask-mail的配置项</li></ul><table><thead><tr><th>配置项</th><th>默认值</th><th>功能</th></tr></thead><tbody><tr><td><strong>MAIL_SERVER</strong></td><td>localhost</td><td>邮箱服务器</td></tr><tr><td><strong>MAIL_PORT</strong></td><td>25</td><td>端口</td></tr><tr><td><strong>MAIL_USE_TLS</strong></td><td>False</td><td>是否使用TLS</td></tr><tr><td><strong>MAIL_USE_SSL</strong></td><td>False</td><td>是否使用SSL</td></tr><tr><td><strong>MAIL_DEBUG</strong></td><td>app.debug</td><td>是否为DEBUG模式，打印调试消息</td></tr><tr><td><strong>MAIL_SUPPRESS_SEND</strong></td><td>app.testing</td><td>设置是否真的发送邮件，True不发送</td></tr><tr><td><strong>MAIL_USERNAME</strong></td><td>None</td><td>用户名，填邮箱</td></tr><tr><td><strong>MAIL_PASSWORD</strong></td><td>None</td><td>密码，填授权码</td></tr><tr><td><strong>MAIL_DEFAULT_SENDER</strong></td><td>None</td><td>默认发送者，填邮箱</td></tr><tr><td><strong>MAIL_MAX_EMAILS</strong></td><td>None</td><td>一次连接中的发送邮件的上限</td></tr><tr><td><strong>MAIL_ASCII_ATTACHMENTS</strong></td><td>False</td><td>如果 MAIL_ASCII_ATTACHMENTS 设置成 True 的话，文件名将会转换成 ASCII 的。一般用于添加附件。</td></tr></tbody></table><ul><li>安装flask-mail:</li></ul><blockquote><p>pip <strong>install</strong> Flask-Mail</p></blockquote><ul><li>配置config  (这里的配置与书中gmail配置稍有不同)：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.config[<span class="string">'MAIL_SERVER'</span>] = <span class="string">'smtp.qq.com'</span></span><br><span class="line">app.config[<span class="string">'MAIL_PORT'</span>] = <span class="number">465</span></span><br><span class="line">app.config[<span class="string">'MAIL_USE_SSL'</span>] = <span class="literal">True</span></span><br><span class="line">app.config[<span class="string">'MAIL_USERNAME'</span>] = <span class="string">'your_qq@qq.com'</span></span><br><span class="line">app.config[<span class="string">'MAIL_PASSWORD'</span>] = 授权码</span><br><span class="line">app.config[<span class="string">'FLASKY_MAIL_SUBJECT_PREFIX'</span>] = <span class="string">'[Flasky]'</span></span><br><span class="line">app.config[<span class="string">'FLASKY_MAIL_SENDER'</span>] = <span class="string">'your_qq@qq.com'</span></span><br><span class="line">app.config[<span class="string">'FLASKY_ADMIN'</span>] = <span class="string">'your_qq@qq.com'</span></span><br></pre></td></tr></table></figure><p>send_mail  (抄自狗书)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> current_app, render_template</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Message</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> mail</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_async_email</span><span class="params">(app, msg)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():</span><br><span class="line">        mail.send(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_email</span><span class="params">(to, subject, template, **kwargs)</span>:</span></span><br><span class="line">    app = current_app._get_current_object()</span><br><span class="line">    msg = Message(app.config[<span class="string">'FLASKY_MAIL_SUBJECT_PREFIX'</span>] + <span class="string">' '</span> + subject,</span><br><span class="line">                  sender=app.config[<span class="string">'FLASKY_MAIL_SENDER'</span>], recipients=[to])</span><br><span class="line">    msg.body = render_template(template + <span class="string">'.txt'</span>, **kwargs)</span><br><span class="line">    msg.html = render_template(template + <span class="string">'.html'</span>, **kwargs)</span><br><span class="line">    thr = Thread(target=send_async_email, args=[app, msg])</span><br><span class="line">    thr.start()</span><br><span class="line">    <span class="keyword">return</span> thr</span><br></pre></td></tr></table></figure><h1 id="0x03-发送成功"><a href="#0x03-发送成功" class="headerlink" title="0x03 发送成功"></a>0x03 发送成功</h1><p><img src="/images/1561426625808.png" alt="1561426625808"></p><h1 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h1><p><a href="https://dormousehole.readthedocs.io/" target="_blank" rel="noopener">Flask 文档</a></p><p><a href="https://item.jd.com/32399773056.html" target="_blank" rel="noopener">Flask Web开发：基于Python的Web应用开发实战（第2版）</a></p><p><a href="https://pythonhosted.org/Flask-Mail/" target="_blank" rel="noopener">flask-email手册</a></p><p><a href="https://juejin.im/entry/594266e35c497d006bc4ae22" target="_blank" rel="noopener">使用 Flask-Mail 和 qq 邮箱 SMTP 服务发送邮件</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;最近在看狗书，准备系统性的学习一下flask，但是在&amp;lt;&amp;lt;电子邮件&amp;gt;&amp;gt;那章作者
      
    
    </summary>
    
    
      <category term="backend" scheme="http://b1ng0.top/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>pyinstaller打包python</title>
    <link href="http://b1ng0.top/2019/06/02/pyinstaller%E6%89%93%E5%8C%85python/"/>
    <id>http://b1ng0.top/2019/06/02/pyinstaller打包python/</id>
    <published>2019-06-01T16:00:00.000Z</published>
    <updated>2020-05-19T12:00:32.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>迫于某”科研项目”的奇葩要求，需要将python代码打包为exe，网上找了有不少解决方案（py2exe、PyInstaller、cx_Freeze，etc.），这里尝试了下pyinstaller，用着还算顺手。</p><h1 id="0x01-安装："><a href="#0x01-安装：" class="headerlink" title="0x01 安装："></a>0x01 安装：</h1><blockquote><p> pip install pyinstaller</p></blockquote><h1 id="0x02-打包命令："><a href="#0x02-打包命令：" class="headerlink" title="0x02 打包命令："></a>0x02 打包命令：</h1><blockquote><p>pyinstaller app.py -F -i app.ico -p C:/python/Lib/site-packages</p></blockquote><h1 id="0x03-常用参数："><a href="#0x03-常用参数：" class="headerlink" title="0x03 常用参数："></a>0x03 常用参数：</h1><table><thead><tr><th>参数</th><th>用法</th></tr></thead><tbody><tr><td>-F, –onefile</td><td>打包一个单个文件，如果你的代码都写在一个.py文件的话，可以用这个，如果是多个.py文件就别用</td></tr><tr><td>-D, –onedir</td><td>打包多个文件，在dist中生成很多依赖文件，适合以框架形式编写工具代码，我个人比较推荐这样，代码易于维护</td></tr><tr><td>-K, –tk</td><td>在部署时包含 TCL/TK</td></tr><tr><td>-a, –ascii</td><td>不包含编码.在支持Unicode的python版本上默认包含所有的编码.</td></tr><tr><td>-d, –debug</td><td>产生debug版本的可执行文件</td></tr><tr><td>-w,–windowed,–noconsole</td><td>使用Windows子系统执行.当程序启动的时候不会打开命令行(只对Windows有效)</td></tr><tr><td>-c,–nowindowed,–console</td><td>使用控制台子系统执行(默认)(只对Windows有效)</td></tr><tr><td>-s,–strip</td><td>可执行文件和共享库将run through strip.注意Cygwin的strip往往使普通的win32 Dll无法使用.</td></tr><tr><td>-X, –upx</td><td>如果有UPX安装(执行Configure.py时检测),会压缩执行文件(Windows系统中的DLL也会)</td></tr><tr><td>-o DIR, –out=DIR</td><td>指定spec文件的生成目录,如果没有指定,而且当前目录是PyInstaller的根目录,会自动创建一个用于输出(spec和生成的可执行文件)的目录.如果没有指定,而当前目录不是PyInstaller的根目录,则会输出到当前的目录下.</td></tr><tr><td>-p DIR, –path=DIR</td><td>设置导入路径(和使用PYTHONPATH效果相似).可以用路径分割符(Windows使用分号,Linux使用冒号)分割,指定多个目录.也可以使用多个-p参数来设置多个导入路径，让pyinstaller自己去找程序需要的资源.</td></tr><tr><td>–icon=&lt;FILE.ICO&gt;</td><td>将file.ico添加为可执行文件的资源(只对Windows系统有效)，改变程序的图标  pyinstaller -i  ico路径 xxxxx.py</td></tr><tr><td>–icon=&lt;FILE.EXE,N&gt;</td><td>将file.exe的第n个图标添加为可执行文件的资源(只对Windows系统有效)</td></tr><tr><td>-v FILE, –version=FILE</td><td>将verfile作为可执行文件的版本资源(只对Windows系统有效)</td></tr><tr><td>-n NAME, –name=NAME</td><td>可选的项目(产生的spec的)名字.如果省略,第一个脚本的主文件名将作为spec的名字</td></tr></tbody></table><h1 id="0x04-参考"><a href="#0x04-参考" class="headerlink" title="0x04 参考"></a>0x04 参考</h1><p><a href="https://pyinstaller.readthedocs.io/en/v3.3.1/usage.html" target="_blank" rel="noopener">https://pyinstaller.readthedocs.io/en/v3.3.1/usage.html</a></p><p><a href="https://blog.csdn.net/BearStarX/article/details/81054134" target="_blank" rel="noopener">https://blog.csdn.net/BearStarX/article/details/81054134</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;迫于某”科研项目”的奇葩要求，需要将python代码打包为exe，网上找了有不少解决方案（py2ex
      
    
    </summary>
    
    
      <category term="python" scheme="http://b1ng0.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>RESTful API</title>
    <link href="http://b1ng0.top/2019/05/19/RESTful%20API/"/>
    <id>http://b1ng0.top/2019/05/19/RESTful API/</id>
    <published>2019-05-18T16:00:00.000Z</published>
    <updated>2020-05-19T12:00:32.541Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">【GET】          /users                 # 查询用户信息列表</span><br><span class="line">【GET】          /users/1001            # 查看某个用户信息</span><br><span class="line">【POST】         /users                 # 新建用户信息</span><br><span class="line">【PUT】          /users/1001            # 更新用户信息(全部字段)</span><br><span class="line">【PATCH】        /users/1001            # 更新用户信息(部分字段)</span><br><span class="line">【DELETE】       /users/1001            # 删除用户信息</span><br></pre></td></tr></table></figure><p>在逼乎上看到一个说法：判断一个接口是否RESTful风格只需要看接口中有没有动词，感觉很有道理的样子。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="backend" scheme="http://b1ng0.top/tags/backend/"/>
    
  </entry>
  
  <entry>
    <title>关于公钥与明文长度</title>
    <link href="http://b1ng0.top/2019/05/13/%E5%85%B3%E4%BA%8E%E5%85%AC%E9%92%A5%E4%B8%8E%E6%98%8E%E6%96%87%E9%95%BF%E5%BA%A6/"/>
    <id>http://b1ng0.top/2019/05/13/关于公钥与明文长度/</id>
    <published>2019-05-13T14:13:00.000Z</published>
    <updated>2020-05-19T12:00:32.553Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直在使用密码算法写认证协议相关的东西，发现明文空间过长会导致加解密不成功的情况。</p><p>栗子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;openssl/rsa.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;openssl/pem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;openssl/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OPENSSLKEY <span class="meta-string">"test.key"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PUBLICKEY <span class="meta-string">"test_pub.key"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUFFSIZE 1024</span></span><br><span class="line"><span class="comment">/*openssl genrsa -out test.key 1024*/</span></span><br><span class="line"><span class="comment">/*openssl rsa -in test.key -pubout -out test_pub.key*/</span></span><br><span class="line"><span class="comment">/*gcc -Wall -O2 -o pk pk.c -lcrypto -lssl*/</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">my_encrypt</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">char</span> *path_key)</span></span>;<span class="comment">//加密</span></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">my_decrypt</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">char</span> *path_key)</span></span>;<span class="comment">//解密</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *source=<span class="string">"23333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"</span>;</span><br><span class="line">    <span class="keyword">char</span> *ptr_en,*ptr_de;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"source is    :%s\n"</span>,source);</span><br><span class="line">    ptr_en=my_encrypt(source,PUBLICKEY);</span><br><span class="line">    <span class="comment">//printf("after encrypt:%s\n",ptr_en);</span></span><br><span class="line">    ptr_de=my_decrypt(ptr_en,OPENSSLKEY);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"after decrypt:%s\n"</span>,ptr_de);</span><br><span class="line">    <span class="keyword">if</span>(ptr_en!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">free</span>(ptr_en);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">if</span>(ptr_de!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">free</span>(ptr_de);</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">my_encrypt</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">char</span> *path_key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p_en;</span><br><span class="line">    RSA *p_rsa;</span><br><span class="line">    FILE *file;</span><br><span class="line">    <span class="keyword">int</span> flen,rsa_len;</span><br><span class="line">    <span class="keyword">if</span>((file=fopen(path_key,<span class="string">"r"</span>))==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        perror(<span class="string">"open key file error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;    </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">if</span>((p_rsa=PEM_read_RSA_PUBKEY(file,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>))==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        ERR_print_errors_fp(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;   </span><br><span class="line">    flen=<span class="built_in">strlen</span>(str);</span><br><span class="line">    rsa_len=RSA_size(p_rsa);</span><br><span class="line">    p_en=(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>(rsa_len+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(p_en,<span class="number">0</span>,rsa_len+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(RSA_public_encrypt(rsa_len,(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)str,(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)p_en,p_rsa,RSA_NO_PADDING)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    RSA_free(p_rsa);</span><br><span class="line">    fclose(file);</span><br><span class="line">    <span class="keyword">return</span> p_en;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">my_decrypt</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">char</span> *path_key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p_de;</span><br><span class="line">    RSA *p_rsa;</span><br><span class="line">    FILE *file;</span><br><span class="line">    <span class="keyword">int</span> rsa_len;</span><br><span class="line">    <span class="keyword">if</span>((file=fopen(path_key,<span class="string">"r"</span>))==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        perror(<span class="string">"open key file error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>((p_rsa=PEM_read_RSAPrivateKey(file,<span class="literal">NULL</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>))==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        ERR_print_errors_fp(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rsa_len=RSA_size(p_rsa);</span><br><span class="line">    p_de=(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>(rsa_len+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(p_de,<span class="number">0</span>,rsa_len+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(RSA_private_decrypt(rsa_len,(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)str,(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)p_de,p_rsa,RSA_NO_PADDING)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    RSA_free(p_rsa);</span><br><span class="line">    fclose(file);</span><br><span class="line">    <span class="keyword">return</span> p_de;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/pk.png" alt="1557752156757"></p><p>关于密钥与明文长度，从网上查阅的说法如下：</p><blockquote><p>一次能加密的明文长度与密钥长度成正比：</p><p>len_in_byte(raw_data) = len_in_bit(key)/8 -11，如 1024bit 的密钥，一次能加密的内容长度为 1024/8 -11 = 117 byte。</p><p>所以<strong>非对称加密一般都用于加密对称加密算法的密钥，而不是直接加密内容。</strong></p><p>实际上，RSA 算法本身要求加密内容也就是明文长度 m 必须满足 0&lt;m&lt;n，也就是说内容这个大整数不能超过 n，否则就出错。</p><p>那么如果 m=0 是什么结果？</p><p>普遍 RSA 加密器会直接返回全 0 结果，如果 m&gt;n，运算就会出错。</p><p>因此，RSA 实际可加密的明文长度最大也是 1024bits，但问题就来了：</p><p>如果小于这个长度怎么办？</p><p>就需要进行 padding，因为如果没有 padding 用户无法确分解密后内容的真实长度，字符串之类的内容问题还不大，以 0 作为结束符，便于区分。</p><p>但对二进制数据就很难理解，因为不确定后面的 0 是内容还是内容结束符。</p><p>只要用到 padding，那么就会占用实际的明文长度，我们一般使用的 padding 标准有 NoPPadding、OAEPPadding、PKCS1Padding 等。</p><p>其中 PKCS#1 建议的 padding 就占用了 11 个字节，于是才有 117 字节的说法。</p><p>如果大于这个长度怎么办？</p><p>很多算法的 padding 往往是在后边的，但 PKCS 的 padding 则是在前面的，此为有意设计，有意的把第一个字节置 0 以确保 m 的值小于 n。</p><p>这样，128字节（1024bits）- 11 字节正好是117字节，但对于 RSA 加密来讲，padding 也是参与加密的。</p><p>所以，依然按照 <strong>RSA 1024 实际的明文只有 117 字节</strong>。</p><p>关于 PKCS#1 padding 规范可参考：RFC2313 chapter 8.1。</p><p>我们在把明文送给 RSA 加密器前，要确认这个值是不是大于 n，也就是如果接近 n 位长，那么需要先 padding 再分段加密。</p><p>除非我们是“定长定量自己可控可理解”的加密则不需要 padding。</p></blockquote><p>这就不难理解为什么公钥不适合用来做大规模数据传输的加密了，当然如果一定要用公钥来做，也可以通过分段加密或者数字信封的方式解决。</p><p>参考：</p><p><a href="https://www.cnblogs.com/jpfss/p/8528406.html" target="_blank" rel="noopener">https://www.cnblogs.com/jpfss/p/8528406.html</a></p><p><a href="https://www.cnblogs.com/aLittleBitCool/archive/2011/09/22/2185418.html" target="_blank" rel="noopener">https://www.cnblogs.com/aLittleBitCool/archive/2011/09/22/2185418.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近一直在使用密码算法写认证协议相关的东西，发现明文空间过长会导致加解密不成功的情况。&lt;/p&gt;
&lt;p&gt;栗子：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;li
      
    
    </summary>
    
    
      <category term="notes" scheme="http://b1ng0.top/tags/notes/"/>
    
  </entry>
  
</feed>
